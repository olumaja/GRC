using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace GrcApi.Migrations
{
    /// <inheritdoc />
    public partial class AddAllTables : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "BusinessEntity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BusinessEntity", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BusinessImpactAnalysis",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PeriodFrom = table.Column<DateTime>(type: "date", nullable: false),
                    PeriodTo = table.Column<DateTime>(type: "date", nullable: false),
                    StartDate = table.Column<DateTime>(type: "date", nullable: false),
                    EndDate = table.Column<DateTime>(type: "date", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BusinessImpactAnalysis", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BusinessRiskRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    IsEMCRated = table.Column<bool>(type: "bit", nullable: false),
                    IsManagementRated = table.Column<bool>(type: "bit", nullable: false),
                    OverAllComment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BusinessRiskRating", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceBusines",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessPhoneNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RCNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    Address = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    NameOfManagerOrMD = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CTO = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DateUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceBusines", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceCalendar",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Frequency = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FirmToSubmit = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    AttachmentCount = table.Column<int>(type: "int", nullable: true),
                    DeadLine = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ResponseStatus = table.Column<int>(type: "int", nullable: false),
                    ReportStatus = table.Column<int>(type: "int", nullable: false),
                    LevelStatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    NameOfReport = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceCalendar", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceRegulator",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RegulatorTitle = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceRegulator", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceRegulatoryPayment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Regulator = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessEntity = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    MeansOfPaymentAmount = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Amount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    AmountPaid = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ProcessOfficer = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ContactPerson = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PaymentDetail = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TransactionReference = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PaymentAttachmentCount = table.Column<int>(type: "int", nullable: true),
                    DateOfPayment = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeadLine = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    ComplianceLevel = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceRegulatoryPayment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Document",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModuleItemType = table.Column<int>(type: "int", nullable: false),
                    ModuleItemId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FileType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Size = table.Column<int>(type: "int", nullable: false),
                    Blob = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Document", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Email",
                columns: table => new
                {
                    EmailId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    To = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    CC = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    Subject = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    Message = table.Column<string>(type: "nvarchar(max)", maxLength: 50, nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DeliveryDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModuleItemType = table.Column<int>(type: "int", nullable: false),
                    ModuleItemId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Email", x => x.EmailId)
                        .Annotation("SqlServer:Clustered", true);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyARMAgribusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Team = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyARMAgribusinessRating", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyARMHillRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Team = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyARMHillRating", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyARMHoldingCompanyRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Team = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyARMHoldingCompanyRating", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyARMIMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Team = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyARMIMRating", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyARMSecurityRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Team = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyARMSecurityRating", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyARMSharedServiceRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Team = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyARMSharedServiceRating", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyARMTrusteeRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Team = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyARMTrusteeRating", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProductRiskAssessment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProductName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    BusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DepartmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProductDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    EmailAddress = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    Stage = table.Column<int>(type: "int", nullable: false),
                    DocumentAttachId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TestResultAttachmentModuleType = table.Column<int>(type: "int", nullable: false),
                    QuestionOrRecomendation = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    OwnerResponse = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    ReseasonForRejection = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductRiskAssessment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RecoveryType",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RecoveryType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RiskControlSelfAssessment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PeriodFrom = table.Column<DateTime>(type: "date", nullable: false),
                    PeriodTo = table.Column<DateTime>(type: "date", nullable: false),
                    StartDate = table.Column<DateTime>(type: "date", nullable: false),
                    EndDate = table.Column<DateTime>(type: "date", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskControlSelfAssessment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RiskDriver",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskDriver", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RiskEffectCategory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskEffectCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RiskEventType",
                columns: table => new
                {
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    NAME = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskEventType", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "SessionTracker",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DateCreated = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastLogin = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Token = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    NumberOfTry = table.Column<int>(type: "int", nullable: false),
                    IsLock = table.Column<bool>(type: "bit", nullable: false),
                    LockDuration = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RefreshToken = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    RefreshTokenExpiryDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SessionTracker", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserRole",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserRole", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Department",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Department", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Department_BusinessEntity_BusinessEntityId",
                        column: x => x.BusinessEntityId,
                        principalTable: "BusinessEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AnualAuditUniverseRiskRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AnualAuditUniverseRiskRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AnualAuditUniverseRiskRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMAgribusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterEmail = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMAgribusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMAgribusinessRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMHillRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterEmail = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMHillRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMHillRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMHoldingCompanyBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMHoldingCompanyBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMHoldingCompanyBusinessRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMIMBusinessRiskRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMIMBusinessRiskRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMIMBusinessRiskRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSecurityRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSecurityRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSecurityRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedServiceRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterEmail = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedServiceRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedServiceRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMTAMBusinessRiskRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMTAMBusinessRiskRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMTAMBusinessRiskRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMTrusteeRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMTrusteeRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMTrusteeRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ConsolidatedAuditFinding",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ReviewType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DateFindingRaised = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Level1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Level2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ReportingQuater = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    WorkStream = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuditArea = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ImpactRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommendation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RevisedDueDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ResolutionDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ActionDueDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Evidence = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DetailedFindings = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UpdatedComment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManagmentResponseAsAtTimeOfEngagement = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    StatusLevel = table.Column<int>(type: "int", nullable: false),
                    OPRStatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConsolidatedAuditFinding", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ConsolidatedAuditFinding_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EMCConcernRiskRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRateRequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    EmcRequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EMCConcernRiskRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EMCConcernRiskRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InternalAuditReport",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Unit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Team = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Summary = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Scope = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ScopeLimitation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ExecutiveSummary = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    GoodPractiseInclude = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AdditionalDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    OverAllManagementComment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SignedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DescriptionOfIssue = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IssueRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Observation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PotentialMaterialisedImpact = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RootCause = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Impact = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Recommendation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DocumentAttachId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AssessmentOfDigitalInitiative = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    OtherImprovementArea = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternalAuditReport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternalAuditReport_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernRiskRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRateRequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManagementConcernRequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernRiskRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernRiskRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RatedBusinessRiskRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Business = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RatedBusinessRiskRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RatedBusinessRiskRating_BusinessRiskRating_BusinessRiskRatingId",
                        column: x => x.BusinessRiskRatingId,
                        principalTable: "BusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceRules",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceRegulatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Section = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Heading = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deadline = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IssuesOrFillingOrReturn = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    Responsibilities = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Penalty = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceRules", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceRules_ComplianceRegulator_ComplianceRegulatorId",
                        column: x => x.ComplianceRegulatorId,
                        principalTable: "ComplianceRegulator",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductAssessRisk",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProductRiskAssementId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProductRiskCategory = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    ProductOwnerResponse = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Rating = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductAssessRisk", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductAssessRisk_ProductRiskAssessment_ProductRiskAssementId",
                        column: x => x.ProductRiskAssementId,
                        principalTable: "ProductRiskAssessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RiskDriverCategory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskDriverId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskDriverCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RiskDriverCategory_RiskDriver_RiskDriverId",
                        column: x => x.RiskDriverId,
                        principalTable: "RiskDriver",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RiskEventTypeCategory",
                columns: table => new
                {
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskEventTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    NAME = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskEventTypeCategory", x => x.ID);
                    table.ForeignKey(
                        name: "FK_RiskEventTypeCategory_RiskEventType_RiskEventTypeId",
                        column: x => x.RiskEventTypeId,
                        principalTable: "RiskEventType",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "User",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    Business = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    Unit = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    UnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserRoleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_User", x => x.Id);
                    table.ForeignKey(
                        name: "FK_User_UserRole_UserRoleId",
                        column: x => x.UserRoleId,
                        principalTable: "UserRole",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Unit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DepartmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Unit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Unit_Department_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMAgribusinessAuditUniverse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMAgribusinessAuditUniverse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMAgribusinessAuditUniverse_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMHillAuditUniverse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMHillAuditUniverse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMHillAuditUniverse_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMHoldingCompanyAnnualAuditUniverse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMHoldingCompanyAnnualAuditUniverse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMHoldingCompanyAnnualAuditUniverse_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMIMAuditUniverse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMIMAuditUniverse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMIMAuditUniverse_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSecurityAnnualAuditUniverse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSecurityAnnualAuditUniverse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSecurityAnnualAuditUniverse_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverse_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMTAMAuditUniverse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMTAMAuditUniverse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMTAMAuditUniverse_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMTrusteeAuditUniverse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AnualAuditUniverseStatus = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMTrusteeAuditUniverse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMTrusteeAuditUniverse_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CommenceEngagementAuditexecution",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AnualAuditUniverseRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    EngagementPlan = table.Column<int>(type: "int", nullable: false),
                    WorkPaper = table.Column<int>(type: "int", nullable: false),
                    Findingstatus = table.Column<int>(type: "int", nullable: false),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommenceEngagementAuditexecution", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CommenceEngagementAuditexecution_AnualAuditUniverseRiskRating_AnualAuditUniverseRiskRatingId",
                        column: x => x.AnualAuditUniverseRiskRatingId,
                        principalTable: "AnualAuditUniverseRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceAgribusiness",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceAgribusiness", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceAgribusiness_ARMAgribusinessRating_ARMAgribusinessRatingId",
                        column: x => x.ARMAgribusinessRatingId,
                        principalTable: "ARMAgribusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinancialAgribusinessReporting",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialAgribusinessReporting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialAgribusinessReporting_ARMAgribusinessRating_ARMAgribusinessRatingId",
                        column: x => x.ARMAgribusinessRatingId,
                        principalTable: "ARMAgribusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationAgribusiness",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationAgribusiness", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationAgribusiness_ARMAgribusinessRating_ARMAgribusinessRatingId",
                        column: x => x.ARMAgribusinessRatingId,
                        principalTable: "ARMAgribusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyAgribusiness",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyAgribusiness", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyAgribusiness_ARMAgribusinessRating_ARMAgribusinessRatingId",
                        column: x => x.ARMAgribusinessRatingId,
                        principalTable: "ARMAgribusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeSinceLastAgribusinessAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusiness = table.Column<int>(type: "int", nullable: false),
                    RFl = table.Column<int>(type: "int", nullable: false),
                    AAFML = table.Column<int>(type: "int", nullable: false),
                    FinancialControlRFl = table.Column<int>(type: "int", nullable: false),
                    FinancialControlAAFML = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeSinceLastAgribusinessAudit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TimeSinceLastAgribusinessAudit_ARMAgribusinessRating_ARMAgribusinessRatingId",
                        column: x => x.ARMAgribusinessRatingId,
                        principalTable: "ARMAgribusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceBusinessRatingHill",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceBusinessRatingHill", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceBusinessRatingHill_ARMHillRating_ARMHillRatingId",
                        column: x => x.ARMHillRatingId,
                        principalTable: "ARMHillRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinancialHillReporting",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialHillReporting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialHillReporting_ARMHillRating_ARMHillRatingId",
                        column: x => x.ARMHillRatingId,
                        principalTable: "ARMHillRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessRatingHill",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessRatingHill", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessRatingHill_ARMHillRating_ARMHillRatingId",
                        column: x => x.ARMHillRatingId,
                        principalTable: "ARMHillRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessRatingARMHill",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessRatingARMHill", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessRatingARMHill_ARMHillRating_ARMHillRatingId",
                        column: x => x.ARMHillRatingId,
                        principalTable: "ARMHillRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeSinceLastHillAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHill = table.Column<int>(type: "int", nullable: false),
                    InvestmentPortfolio = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeSinceLastHillAudit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TimeSinceLastHillAudit_ARMHillRating_ARMHillRatingId",
                        column: x => x.ARMHillRatingId,
                        principalTable: "ARMHillRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceBusinessRatingARMHoldCo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceBusinessRatingARMHoldCo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceBusinessRatingARMHoldCo_ARMHoldingCompanyBusinessRating_ARMHoldingCompanyBusinessRatingId",
                        column: x => x.ARMHoldingCompanyBusinessRatingId,
                        principalTable: "ARMHoldingCompanyBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinancialReportingBusinessratingARMHoldCo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialReportingBusinessratingARMHoldCo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialReportingBusinessratingARMHoldCo_ARMHoldingCompanyBusinessRating_ARMHoldingCompanyBusinessRatingId",
                        column: x => x.ARMHoldingCompanyBusinessRatingId,
                        principalTable: "ARMHoldingCompanyBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessRatingARMHoldCo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessRatingARMHoldCo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessRatingARMHoldCo_ARMHoldingCompanyBusinessRating_ARMHoldingCompanyBusinessRatingId",
                        column: x => x.ARMHoldingCompanyBusinessRatingId,
                        principalTable: "ARMHoldingCompanyBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessRatingARMHoldCo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessRatingARMHoldCo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessRatingARMHoldCo_ARMHoldingCompanyBusinessRating_ARMHoldingCompanyBusinessRatingId",
                        column: x => x.ARMHoldingCompanyBusinessRatingId,
                        principalTable: "ARMHoldingCompanyBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeSinceLastAuditBusinessRatingARMHoldCo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompany = table.Column<int>(type: "int", nullable: false),
                    TreasurySale = table.Column<int>(type: "int", nullable: false),
                    TreasuryOperation = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeSinceLastAuditBusinessRatingARMHoldCo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TimeSinceLastAuditBusinessRatingARMHoldCo_ARMHoldingCompanyBusinessRating_ARMHoldingCompanyBusinessRatingId",
                        column: x => x.ARMHoldingCompanyBusinessRatingId,
                        principalTable: "ARMHoldingCompanyBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMBusinessRating_ARMIMBusinessRiskRating_ARMIMBusinessRiskRatingId",
                        column: x => x.ARMIMBusinessRiskRatingId,
                        principalTable: "ARMIMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinancialIMBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialIMBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialIMBusinessRating_ARMIMBusinessRiskRating_ARMIMBusinessRiskRatingId",
                        column: x => x.ARMIMBusinessRiskRatingId,
                        principalTable: "ARMIMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMBusinessRating_ARMIMBusinessRiskRating_ARMIMBusinessRiskRatingId",
                        column: x => x.ARMIMBusinessRiskRatingId,
                        principalTable: "ARMIMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyImBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyImBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyImBusinessRating_ARMIMBusinessRiskRating_ARMIMBusinessRiskRatingId",
                        column: x => x.ARMIMBusinessRiskRatingId,
                        principalTable: "ARMIMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeSinceLastAuditIMBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IMUnit = table.Column<int>(type: "int", nullable: false),
                    BDPWMIAMIMRetail = table.Column<int>(type: "int", nullable: false),
                    FundAccount = table.Column<int>(type: "int", nullable: false),
                    FundAdmin = table.Column<int>(type: "int", nullable: false),
                    RetailOperation = table.Column<int>(type: "int", nullable: false),
                    ARMRegistrar = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    TreasuryInvestment = table.Column<int>(type: "int", nullable: false),
                    OperationSettlement = table.Column<int>(type: "int", nullable: false),
                    OperationControl = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeSinceLastAuditIMBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TimeSinceLastAuditIMBusinessRating_ARMIMBusinessRiskRating_ARMIMBusinessRiskRatingId",
                        column: x => x.ARMIMBusinessRiskRatingId,
                        principalTable: "ARMIMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSecurity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSecurity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSecurity_ARMSecurityRating_ARMSecurityRatingId",
                        column: x => x.ARMSecurityRatingId,
                        principalTable: "ARMSecurityRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinancialSecurityReporting",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialSecurityReporting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialSecurityReporting_ARMSecurityRating_ARMSecurityRatingId",
                        column: x => x.ARMSecurityRatingId,
                        principalTable: "ARMSecurityRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSecurityBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSecurityBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSecurityBusinessRating_ARMSecurityRating_ARMSecurityRatingId",
                        column: x => x.ARMSecurityRatingId,
                        principalTable: "ARMSecurityRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySecurityBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySecurityBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySecurityBusinessRating_ARMSecurityRating_ARMSecurityRatingId",
                        column: x => x.ARMSecurityRatingId,
                        principalTable: "ARMSecurityRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeSinceLastSecurityAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurity = table.Column<int>(type: "int", nullable: false),
                    FinancialAdvisory = table.Column<int>(type: "int", nullable: false),
                    StockBroking = table.Column<int>(type: "int", nullable: false),
                    SecurityOperation = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    Research = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeSinceLastSecurityAudit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TimeSinceLastSecurityAudit_ARMSecurityRating_ARMSecurityRatingId",
                        column: x => x.ARMSecurityRatingId,
                        principalTable: "ARMSecurityRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedService",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedServiceRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedService_ARMSharedServiceRating_ARMSharedServiceRatingId",
                        column: x => x.ARMSharedServiceRatingId,
                        principalTable: "ARMSharedServiceRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinancialSharedServiceReporting",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedServiceRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialSharedServiceReporting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialSharedServiceReporting_ARMSharedServiceRating_ARMSharedServiceRatingId",
                        column: x => x.ARMSharedServiceRatingId,
                        principalTable: "ARMSharedServiceRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedService",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedServiceRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedService_ARMSharedServiceRating_ARMSharedServiceRatingId",
                        column: x => x.ARMSharedServiceRatingId,
                        principalTable: "ARMSharedServiceRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedService",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedServiceRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedService_ARMSharedServiceRating_ARMSharedServiceRatingId",
                        column: x => x.ARMSharedServiceRatingId,
                        principalTable: "ARMSharedServiceRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeSinceLastSharedServiceAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedServiceRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedService = table.Column<int>(type: "int", nullable: false),
                    HCM = table.Column<int>(type: "int", nullable: false),
                    ProcurementAndAdmind = table.Column<int>(type: "int", nullable: false),
                    IT = table.Column<int>(type: "int", nullable: false),
                    RiskManagement = table.Column<int>(type: "int", nullable: false),
                    Academy = table.Column<int>(type: "int", nullable: false),
                    Legal = table.Column<int>(type: "int", nullable: false),
                    MCC = table.Column<int>(type: "int", nullable: false),
                    CTU = table.Column<int>(type: "int", nullable: false),
                    Customerexperience = table.Column<int>(type: "int", nullable: false),
                    InformationSecurity = table.Column<int>(type: "int", nullable: false),
                    InternalControl = table.Column<int>(type: "int", nullable: false),
                    Corporatestrategy = table.Column<int>(type: "int", nullable: false),
                    Treasury = table.Column<int>(type: "int", nullable: false),
                    DigitalFinanceService = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeSinceLastSharedServiceAudit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TimeSinceLastSharedServiceAudit_ARMSharedServiceRating_ARMSharedServiceRatingId",
                        column: x => x.ARMSharedServiceRatingId,
                        principalTable: "ARMSharedServiceRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceBusinessARMTAM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceBusinessARMTAM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceBusinessARMTAM_ARMTAMBusinessRiskRating_ARMTAMBusinessRiskRatingId",
                        column: x => x.ARMTAMBusinessRiskRatingId,
                        principalTable: "ARMTAMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinancialBusinessARMTAM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialBusinessARMTAM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialBusinessARMTAM_ARMTAMBusinessRiskRating_ARMTAMBusinessRiskRatingId",
                        column: x => x.ARMTAMBusinessRiskRatingId,
                        principalTable: "ARMTAMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessARMTAM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessARMTAM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessARMTAM_ARMTAMBusinessRiskRating_ARMTAMBusinessRiskRatingId",
                        column: x => x.ARMTAMBusinessRiskRatingId,
                        principalTable: "ARMTAMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessARMTAM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessARMTAM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessARMTAM_ARMTAMBusinessRiskRating_ARMTAMBusinessRiskRatingId",
                        column: x => x.ARMTAMBusinessRiskRatingId,
                        principalTable: "ARMTAMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeSinceLastBusinessARMTAMAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAMBusinessRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAM = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    TreasuryOperation = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeSinceLastBusinessARMTAMAudit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TimeSinceLastBusinessARMTAMAudit_ARMTAMBusinessRiskRating_ARMTAMBusinessRiskRatingId",
                        column: x => x.ARMTAMBusinessRiskRatingId,
                        principalTable: "ARMTAMBusinessRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceBusinessRatingTrustee",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceBusinessRatingTrustee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceBusinessRatingTrustee_ARMTrusteeRating_ARMTrusteeRatingId",
                        column: x => x.ARMTrusteeRatingId,
                        principalTable: "ARMTrusteeRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinancialTrusteeReporting",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialTrusteeReporting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialTrusteeReporting_ARMTrusteeRating_ARMTrusteeRatingId",
                        column: x => x.ARMTrusteeRatingId,
                        principalTable: "ARMTrusteeRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationTrustee",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationTrustee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationTrustee_ARMTrusteeRating_ARMTrusteeRatingId",
                        column: x => x.ARMTrusteeRatingId,
                        principalTable: "ARMTrusteeRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessRatingTrustee",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessRatingTrustee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessRatingTrustee_ARMTrusteeRating_ARMTrusteeRatingId",
                        column: x => x.ARMTrusteeRatingId,
                        principalTable: "ARMTrusteeRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeSinceLastTrusteeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrustee = table.Column<int>(type: "int", nullable: false),
                    PrivateTrust = table.Column<int>(type: "int", nullable: false),
                    CommercialTrust = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeSinceLastTrusteeAudit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TimeSinceLastTrusteeAudit_ARMTrusteeRating_ARMTrusteeRatingId",
                        column: x => x.ARMTrusteeRatingId,
                        principalTable: "ARMTrusteeRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ConsolidatedAuditFindingActionDetail",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConsolidatedAuditFindingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Recommendation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ActionOwner = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Unit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    EntityToAction = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ActionDueDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConsolidatedAuditFindingActionDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ConsolidatedAuditFindingActionDetail_ConsolidatedAuditFinding_ConsolidatedAuditFindingId",
                        column: x => x.ConsolidatedAuditFindingId,
                        principalTable: "ConsolidatedAuditFinding",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMAgribusinessEMCRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EMCConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RFL = table.Column<int>(type: "int", nullable: false),
                    AAFML = table.Column<int>(type: "int", nullable: false),
                    FarmingOperation = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMAgribusinessEMCRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMAgribusinessEMCRating_EMCConcernRiskRating_EMCConcernRiskRatingId",
                        column: x => x.EMCConcernRiskRatingId,
                        principalTable: "EMCConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMHILLEMCRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EMCConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHILL = table.Column<int>(type: "int", nullable: false),
                    InvestmentPortfolio = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMHILLEMCRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMHILLEMCRating_EMCConcernRiskRating_EMCConcernRiskRatingId",
                        column: x => x.EMCConcernRiskRatingId,
                        principalTable: "EMCConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMHoldingCompanyEMCRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EMCConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompany = table.Column<int>(type: "int", nullable: false),
                    TreasurySales = table.Column<int>(type: "int", nullable: false),
                    TreasuryInvestorNote = table.Column<int>(type: "int", nullable: false),
                    FinacialControl = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMHoldingCompanyEMCRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMHoldingCompanyEMCRating_EMCConcernRiskRating_EMCConcernRiskRatingId",
                        column: x => x.EMCConcernRiskRatingId,
                        principalTable: "EMCConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMIMEMCRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EMCConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIM = table.Column<int>(type: "int", nullable: false),
                    IMUnit = table.Column<int>(type: "int", nullable: false),
                    BDOrIMRetail = table.Column<int>(type: "int", nullable: false),
                    Fundaccount = table.Column<int>(type: "int", nullable: false),
                    FundAdmin = table.Column<int>(type: "int", nullable: false),
                    RetailOperations = table.Column<int>(type: "int", nullable: false),
                    ARMRegisterar = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    TreasuryInvestment = table.Column<int>(type: "int", nullable: false),
                    OperationSetlement = table.Column<int>(type: "int", nullable: false),
                    OperationControl = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMIMEMCRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMIMEMCRating_EMCConcernRiskRating_EMCConcernRiskRatingId",
                        column: x => x.EMCConcernRiskRatingId,
                        principalTable: "EMCConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSecurityEMCRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EMCConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurities = table.Column<int>(type: "int", nullable: false),
                    FinancialAdvisory = table.Column<int>(type: "int", nullable: false),
                    StockBroking = table.Column<int>(type: "int", nullable: false),
                    SecurityOperation = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    Research = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSecurityEMCRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSecurityEMCRating_EMCConcernRiskRating_EMCConcernRiskRatingId",
                        column: x => x.EMCConcernRiskRatingId,
                        principalTable: "EMCConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedServiceEMCRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EMCConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedService = table.Column<int>(type: "int", nullable: false),
                    HCM = table.Column<int>(type: "int", nullable: false),
                    ProcurementAndAdmin = table.Column<int>(type: "int", nullable: false),
                    IT = table.Column<int>(type: "int", nullable: false),
                    RiskManagement = table.Column<int>(type: "int", nullable: false),
                    Legal = table.Column<int>(type: "int", nullable: false),
                    MCC = table.Column<int>(type: "int", nullable: false),
                    CTU = table.Column<int>(type: "int", nullable: false),
                    CustomerExperience = table.Column<int>(type: "int", nullable: false),
                    InfoSecurity = table.Column<int>(type: "int", nullable: false),
                    InternalControl = table.Column<int>(type: "int", nullable: false),
                    CorporateStrategy = table.Column<int>(type: "int", nullable: false),
                    Academy = table.Column<int>(type: "int", nullable: false),
                    Treasury = table.Column<int>(type: "int", nullable: false),
                    DigitalFinanceServiceOrARMONE = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedServiceEMCRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedServiceEMCRating_EMCConcernRiskRating_EMCConcernRiskRatingId",
                        column: x => x.EMCConcernRiskRatingId,
                        principalTable: "EMCConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMTrusteeEMCRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EMCConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrustee = table.Column<int>(type: "int", nullable: false),
                    PrivateTrust = table.Column<int>(type: "int", nullable: false),
                    CommercialTrust = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMTrusteeEMCRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMTrusteeEMCRating_EMCConcernRiskRating_EMCConcernRiskRatingId",
                        column: x => x.EMCConcernRiskRatingId,
                        principalTable: "EMCConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditFindingAuditReport",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InternalAuditReportId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AuditFinding = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    NameOrRecurring = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ControlType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ControlDesignOrEffectively = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Rating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditFindingAuditReport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditFindingAuditReport_InternalAuditReport_InternalAuditReportId",
                        column: x => x.InternalAuditReportId,
                        principalTable: "InternalAuditReport",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CitationAuditReport",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InternalAuditReportId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Placement = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CitationAuditReport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CitationAuditReport_InternalAuditReport_InternalAuditReportId",
                        column: x => x.InternalAuditReportId,
                        principalTable: "InternalAuditReport",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InternalAuditRatingReport",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InternalAuditReportId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AuditArea = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CurrentRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PreviousRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternalAuditRatingReport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternalAuditRatingReport_InternalAuditReport_InternalAuditReportId",
                        column: x => x.InternalAuditReportId,
                        principalTable: "InternalAuditReport",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementResponseAuditReport",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InternalAuditReportId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActionPointToResolve = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ActionOwner = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Unit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Designation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DueDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementResponseAuditReport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementResponseAuditReport_InternalAuditReport_InternalAuditReportId",
                        column: x => x.InternalAuditReportId,
                        principalTable: "InternalAuditReport",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ObservationListAuditReport",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InternalAuditReportId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Observation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommendation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ActionOwner = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManagementResponse = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Destination = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DueDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObservationListAuditReport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ObservationListAuditReport_InternalAuditReport_InternalAuditReportId",
                        column: x => x.InternalAuditReportId,
                        principalTable: "InternalAuditReport",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernARMAgribusiness",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernARMAgribusiness", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernARMAgribusiness_ManagementConcernRiskRating_ManagementConcernRiskRatingId",
                        column: x => x.ManagementConcernRiskRatingId,
                        principalTable: "ManagementConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernARMHill",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernARMHill", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernARMHill_ManagementConcernRiskRating_ManagementConcernRiskRatingId",
                        column: x => x.ManagementConcernRiskRatingId,
                        principalTable: "ManagementConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernARMIM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernARMIM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernARMIM_ManagementConcernRiskRating_ManagementConcernRiskRatingId",
                        column: x => x.ManagementConcernRiskRatingId,
                        principalTable: "ManagementConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernARMSecurity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernARMSecurity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernARMSecurity_ManagementConcernRiskRating_ManagementConcernRiskRatingId",
                        column: x => x.ManagementConcernRiskRatingId,
                        principalTable: "ManagementConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernARMTrustee",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernRiskRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernARMTrustee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernARMTrustee_ManagementConcernRiskRating_ManagementConcernRiskRatingId",
                        column: x => x.ManagementConcernRiskRatingId,
                        principalTable: "ManagementConcernRiskRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceRulesBusiness",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceRuleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceRulesBusiness", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceRulesBusiness_ComplianceBusines_BusinessId",
                        column: x => x.BusinessId,
                        principalTable: "ComplianceBusines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ComplianceRulesBusiness_ComplianceRules_ComplianceRuleId",
                        column: x => x.ComplianceRuleId,
                        principalTable: "ComplianceRules",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RiskDriverSubCategory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskDriverCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskDriverSubCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RiskDriverSubCategory_RiskDriverCategory_RiskDriverCategoryId",
                        column: x => x.RiskDriverCategoryId,
                        principalTable: "RiskDriverCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RiskEventTypeSubCategory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskEventTypeCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskEventTypeSubCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RiskEventTypeSubCategory_RiskEventTypeCategory_RiskEventTypeCategoryId",
                        column: x => x.RiskEventTypeCategoryId,
                        principalTable: "RiskEventTypeCategory",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BusinessImpactAnalysisUnit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessImpactAnalysisId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    Stage = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BusinessImpactAnalysisUnit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BusinessImpactAnalysisUnit_BusinessImpactAnalysis_BusinessImpactAnalysisId",
                        column: x => x.BusinessImpactAnalysisId,
                        principalTable: "BusinessImpactAnalysis",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_BusinessImpactAnalysisUnit_Unit_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RiskControlSelfAssessmentUnit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskControlSelfAssessmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskControlSelfAssessmentUnit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RiskControlSelfAssessmentUnit_RiskControlSelfAssessment_RiskControlSelfAssessmentId",
                        column: x => x.RiskControlSelfAssessmentId,
                        principalTable: "RiskControlSelfAssessment",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_RiskControlSelfAssessmentUnit_Unit_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RiskEvent",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DateOfIdentification = table.Column<DateTime>(type: "date", nullable: false),
                    DateOfOccurence = table.Column<DateTime>(type: "date", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    EstimatedLoss = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    BusinessEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DepartmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AssesmentStatus = table.Column<int>(type: "int", maxLength: 10, nullable: false),
                    ReportedByUsername = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    RiskEventDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskEvent", x => x.Id)
                        .Annotation("SqlServer:Clustered", true);
                    table.ForeignKey(
                        name: "FK_RiskEvent_BusinessEntity_BusinessEntityId",
                        column: x => x.BusinessEntityId,
                        principalTable: "BusinessEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_RiskEvent_Department_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_RiskEvent_Unit_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "RSCAProcess",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RSCAProcess", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RSCAProcess_Unit_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMAgribusiness",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMAgribusiness", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMAgribusiness_ARMAgribusinessAuditUniverse_ARMAgribusinessAuditUniverseId",
                        column: x => x.ARMAgribusinessAuditUniverseId,
                        principalTable: "ARMAgribusinessAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMAgribusinessAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMAgribusinessAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMAgribusinessAAFML_ARMAgribusinessAuditUniverse_ARMAgribusinessAuditUniverseId",
                        column: x => x.ARMAgribusinessAuditUniverseId,
                        principalTable: "ARMAgribusinessAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMAgribusinessRFL",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMAgribusinessRFL", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMAgribusinessRFL_ARMAgribusinessAuditUniverse_ARMAgribusinessAuditUniverseId",
                        column: x => x.ARMAgribusinessAuditUniverseId,
                        principalTable: "ARMAgribusinessAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMAgriFinancialControlAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMAgriFinancialControlAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMAgriFinancialControlAAFML_ARMAgribusinessAuditUniverse_ARMAgribusinessAuditUniverseId",
                        column: x => x.ARMAgribusinessAuditUniverseId,
                        principalTable: "ARMAgribusinessAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMAgriFinancialControlRFL",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMAgribusinessAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMAgriFinancialControlRFL", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMAgriFinancialControlRFL_ARMAgribusinessAuditUniverse_ARMAgribusinessAuditUniverseId",
                        column: x => x.ARMAgribusinessAuditUniverseId,
                        principalTable: "ARMAgribusinessAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHill",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHill", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHill_ARMHillAuditUniverse_ARMHillAuditUniverseId",
                        column: x => x.ARMHillAuditUniverseId,
                        principalTable: "ARMHillAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHillCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHillCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHillCompliance_ARMHillAuditUniverse_ARMHillAuditUniverseId",
                        column: x => x.ARMHillAuditUniverseId,
                        principalTable: "ARMHillAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHillFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHillFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHillFinancialControl_ARMHillAuditUniverse_ARMHillAuditUniverseId",
                        column: x => x.ARMHillAuditUniverseId,
                        principalTable: "ARMHillAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHillInvestmentPortfolio",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHillAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHillInvestmentPortfolio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHillInvestmentPortfolio_ARMHillAuditUniverse_ARMHillAuditUniverseId",
                        column: x => x.ARMHillAuditUniverseId,
                        principalTable: "ARMHillAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHoldCoCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHoldCoCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHoldCoCompliance_ARMHoldingCompanyAnnualAuditUniverse_ARMHoldingCompanyAnnualAuditUniverseId",
                        column: x => x.ARMHoldingCompanyAnnualAuditUniverseId,
                        principalTable: "ARMHoldingCompanyAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHoldCoFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHoldCoFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHoldCoFinancialControl_ARMHoldingCompanyAnnualAuditUniverse_ARMHoldingCompanyAnnualAuditUniverseId",
                        column: x => x.ARMHoldingCompanyAnnualAuditUniverseId,
                        principalTable: "ARMHoldingCompanyAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHoldCoTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHoldCoTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHoldCoTreasuryOperation_ARMHoldingCompanyAnnualAuditUniverse_ARMHoldingCompanyAnnualAuditUniverseId",
                        column: x => x.ARMHoldingCompanyAnnualAuditUniverseId,
                        principalTable: "ARMHoldingCompanyAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHoldCoTreasurySale",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHoldCoTreasurySale", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHoldCoTreasurySale_ARMHoldingCompanyAnnualAuditUniverse_ARMHoldingCompanyAnnualAuditUniverseId",
                        column: x => x.ARMHoldingCompanyAnnualAuditUniverseId,
                        principalTable: "ARMHoldingCompanyAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMHoldingCompany",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHoldingCompanyAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMHoldingCompany", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMHoldingCompany_ARMHoldingCompanyAnnualAuditUniverse_ARMHoldingCompanyAnnualAuditUniverseId",
                        column: x => x.ARMHoldingCompanyAnnualAuditUniverseId,
                        principalTable: "ARMHoldingCompanyAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMBDPWMIAMIMRetail",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMBDPWMIAMIMRetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMBDPWMIAMIMRetail_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMCompliance_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMFinancialControl_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMFundAccount",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMFundAccount", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMFundAccount_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMFundAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMFundAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMFundAdmin_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMIMUnit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMIMUnit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMIMUnit_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMOperationControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMOperationControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMOperationControl_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMOperationSettlement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMOperationSettlement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMOperationSettlement_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMRegistrar",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMRegistrar", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMRegistrar_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMRetailOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMRetailOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMRetailOperation_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMIMTreasuryInvestment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMIMTreasuryInvestment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMIMTreasuryInvestment_ARMIMAuditUniverse_ARMIMAuditUniverseId",
                        column: x => x.ARMIMAuditUniverseId,
                        principalTable: "ARMIMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMSecurity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMSecurity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMSecurity_ARMSecurityAnnualAuditUniverse_ARMSecurityAnnualAuditUniverseId",
                        column: x => x.ARMSecurityAnnualAuditUniverseId,
                        principalTable: "ARMSecurityAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMSecurityCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMSecurityCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMSecurityCompliance_ARMSecurityAnnualAuditUniverse_ARMSecurityAnnualAuditUniverseId",
                        column: x => x.ARMSecurityAnnualAuditUniverseId,
                        principalTable: "ARMSecurityAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMSecurityFinacialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMSecurityFinacialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMSecurityFinacialControl_ARMSecurityAnnualAuditUniverse_ARMSecurityAnnualAuditUniverseId",
                        column: x => x.ARMSecurityAnnualAuditUniverseId,
                        principalTable: "ARMSecurityAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMSecurityFinancialAdvisory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMSecurityFinancialAdvisory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMSecurityFinancialAdvisory_ARMSecurityAnnualAuditUniverse_ARMSecurityAnnualAuditUniverseId",
                        column: x => x.ARMSecurityAnnualAuditUniverseId,
                        principalTable: "ARMSecurityAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMSecurityResearch",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMSecurityResearch", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMSecurityResearch_ARMSecurityAnnualAuditUniverse_ARMSecurityAnnualAuditUniverseId",
                        column: x => x.ARMSecurityAnnualAuditUniverseId,
                        principalTable: "ARMSecurityAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMSecuritySecurityOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMSecuritySecurityOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMSecuritySecurityOperation_ARMSecurityAnnualAuditUniverse_ARMSecurityAnnualAuditUniverseId",
                        column: x => x.ARMSecurityAnnualAuditUniverseId,
                        principalTable: "ARMSecurityAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMSecurityStockBroking",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurityAnnualAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMSecurityStockBroking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMSecurityStockBroking_ARMSecurityAnnualAuditUniverse_ARMSecurityAnnualAuditUniverseId",
                        column: x => x.ARMSecurityAnnualAuditUniverseId,
                        principalTable: "ARMSecurityAnnualAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseAcademy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseAcademy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseAcademy_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseARMShared",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseARMShared", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseARMShared_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseCorporatestrategy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseCorporatestrategy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseCorporatestrategy_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseCTU",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseCTU", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseCTU_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseCustomerExperience",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseCustomerExperience", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseCustomerExperience_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseDigitalFinanceService",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseDigitalFinanceService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseDigitalFinanceService_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseHCM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseHCM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseHCM_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseInformationSecurity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseInformationSecurity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseInformationSecurity_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseInternalControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseInternalControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseInternalControl_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseIT",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseIT", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseIT_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseLegal",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseLegal", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseLegal_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseMCC",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseMCC", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseMCC_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseProcurementAndAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseProcurementAndAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseProcurementAndAdmin_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseRiskManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseRiskManagement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseRiskManagement_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ARMSharedAuditUniverseTreasury",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSharedAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ARMSharedAuditUniverseTreasury", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ARMSharedAuditUniverseTreasury_ARMSharedAuditUniverse_ARMSharedAuditUniverseId",
                        column: x => x.ARMSharedAuditUniverseId,
                        principalTable: "ARMSharedAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMTAM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMTAM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMTAM_ARMTAMAuditUniverse_ARMTAMAuditUniverseId",
                        column: x => x.ARMTAMAuditUniverseId,
                        principalTable: "ARMTAMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMTAMFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMTAMFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMTAMFinancialControl_ARMTAMAuditUniverse_ARMTAMAuditUniverseId",
                        column: x => x.ARMTAMAuditUniverseId,
                        principalTable: "ARMTAMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMTAMTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTAMAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMTAMTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMTAMTreasuryOperation_ARMTAMAuditUniverse_ARMTAMAuditUniverseId",
                        column: x => x.ARMTAMAuditUniverseId,
                        principalTable: "ARMTAMAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMTrustee",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMTrustee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMTrustee_ARMTrusteeAuditUniverse_ARMTrusteeAuditUniverseId",
                        column: x => x.ARMTrusteeAuditUniverseId,
                        principalTable: "ARMTrusteeAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMTrusteeCommercialTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMTrusteeCommercialTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMTrusteeCommercialTrust_ARMTrusteeAuditUniverse_ARMTrusteeAuditUniverseId",
                        column: x => x.ARMTrusteeAuditUniverseId,
                        principalTable: "ARMTrusteeAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMTrusteeCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMTrusteeCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMTrusteeCompliance_ARMTrusteeAuditUniverse_ARMTrusteeAuditUniverseId",
                        column: x => x.ARMTrusteeAuditUniverseId,
                        principalTable: "ARMTrusteeAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMTrusteeFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMTrusteeFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMTrusteeFinancialControl_ARMTrusteeAuditUniverse_ARMTrusteeAuditUniverseId",
                        column: x => x.ARMTrusteeAuditUniverseId,
                        principalTable: "ARMTrusteeAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditUniverseARMTrusteePrivateTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrusteeAuditUniverseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessManagerConcern = table.Column<int>(type: "int", nullable: false),
                    OldRiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DirectorConcern = table.Column<int>(type: "int", nullable: false),
                    RiskScore = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskRating = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommentation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    January = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    February = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    March = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    April = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    May = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    June = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    July = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    August = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    September = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    October = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    November = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    December = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditUniverseARMTrusteePrivateTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditUniverseARMTrusteePrivateTrust_ARMTrusteeAuditUniverse_ARMTrusteeAuditUniverseId",
                        column: x => x.ARMTrusteeAuditUniverseId,
                        principalTable: "ARMTrusteeAuditUniverse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditAnnouncementMemoAuditExecution",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CommenceEngagementAuditexecutionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuditScoped = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    WorkApproach = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Role = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Salutation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Unit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Recommendation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsAuditAnnouncementMemoCompleted = table.Column<bool>(type: "bit", nullable: true),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditAnnouncementMemoAuditExecution", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditAnnouncementMemoAuditExecution_CommenceEngagementAuditexecution_CommenceEngagementAuditexecutionId",
                        column: x => x.CommenceEngagementAuditexecutionId,
                        principalTable: "CommenceEngagementAuditexecution",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditPlanningMemoAuditExecution",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CommenceEngagementAuditexecutionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    StrategicObjective = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ImplementationPlan = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskIdentified = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ScopeAndControlTesting = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PriorAuditObservation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuditPlanningMemoCompleted = table.Column<bool>(type: "bit", nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditPlanningMemoAuditExecution", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditPlanningMemoAuditExecution_CommenceEngagementAuditexecution_CommenceEngagementAuditexecutionId",
                        column: x => x.CommenceEngagementAuditexecutionId,
                        principalTable: "CommenceEngagementAuditexecution",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditProgramAuditExecution",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CommenceEngagementAuditexecutionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Title = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SubProcess = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RiskDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ControlDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ControlObjective = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ReviewProcedure = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InformationRequired = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuditProgramCompleted = table.Column<bool>(type: "bit", nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    WorkpaperStatus = table.Column<int>(type: "int", nullable: false),
                    FindingStatus = table.Column<int>(type: "int", nullable: false),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsWorkPaperInitiated = table.Column<bool>(type: "bit", nullable: false),
                    IsAuditFindingInitiated = table.Column<bool>(type: "bit", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditProgramAuditExecution", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditProgramAuditExecution_CommenceEngagementAuditexecution_CommenceEngagementAuditexecutionId",
                        column: x => x.CommenceEngagementAuditexecutionId,
                        principalTable: "CommenceEngagementAuditexecution",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EngagementLetterAuditExecution",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CommenceEngagementAuditexecutionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuditTitle = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuditType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessUnit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IssueBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Date = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ResponsibleExecutive = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BusinessOwner = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BriefBackgroundObjective = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    KeyRisk = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Mandate = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ResponsibilityOfInternalAudit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuditObjective = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuditScope = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ScopeLimitation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CommunicationProtocol = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    EngagementLetterCompleted = table.Column<bool>(type: "bit", nullable: true),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EngagementLetterAuditExecution", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EngagementLetterAuditExecution_CommenceEngagementAuditexecution_CommenceEngagementAuditexecutionId",
                        column: x => x.CommenceEngagementAuditexecutionId,
                        principalTable: "CommenceEngagementAuditexecution",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InformationRequirementAuditExecution",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CommenceEngagementAuditexecutionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RequesterName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InformationRequest = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ResponsibleOfficer = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RequestDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DateProvided = table.Column<DateTime>(type: "datetime2", nullable: false),
                    InformationRequirementCompleted = table.Column<bool>(type: "bit", nullable: true),
                    EngagementLetterCompleted = table.Column<bool>(type: "bit", nullable: true),
                    ReasonForRejection = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InformationRequirementAuditExecution", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InformationRequirementAuditExecution_CommenceEngagementAuditexecution_CommenceEngagementAuditexecutionId",
                        column: x => x.CommenceEngagementAuditexecutionId,
                        principalTable: "CommenceEngagementAuditexecution",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceAgribusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceAgribusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceAgribusinessRating_ComplianceAgribusiness_ComplianceAgribusinessId",
                        column: x => x.ComplianceAgribusinessId,
                        principalTable: "ComplianceAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceAgribusinessRatingAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceAgribusinessRatingAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceAgribusinessRatingAAFML_ComplianceAgribusiness_ComplianceAgribusinessId",
                        column: x => x.ComplianceAgribusinessId,
                        principalTable: "ComplianceAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceAgribusinessRatingFinancialControlAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceAgribusinessRatingFinancialControlAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceAgribusinessRatingFinancialControlAAFML_ComplianceAgribusiness_ComplianceAgribusinessId",
                        column: x => x.ComplianceAgribusinessId,
                        principalTable: "ComplianceAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceAgribusinessRatingFinancialControlRFl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceAgribusinessRatingFinancialControlRFl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceAgribusinessRatingFinancialControlRFl_ComplianceAgribusiness_ComplianceAgribusinessId",
                        column: x => x.ComplianceAgribusinessId,
                        principalTable: "ComplianceAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceAgribusinessRatingRFl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceAgribusinessRatingRFl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceAgribusinessRatingRFl_ComplianceAgribusiness_ComplianceAgribusinessId",
                        column: x => x.ComplianceAgribusinessId,
                        principalTable: "ComplianceAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialAgribusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialAgribusinessReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialAgribusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialAgribusinessRating_FinancialAgribusinessReporting_FinancialAgribusinessReportingId",
                        column: x => x.FinancialAgribusinessReportingId,
                        principalTable: "FinancialAgribusinessReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialAgribusinessRatingAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialAgribusinessReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialAgribusinessRatingAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialAgribusinessRatingAAFML_FinancialAgribusinessReporting_FinancialAgribusinessReportingId",
                        column: x => x.FinancialAgribusinessReportingId,
                        principalTable: "FinancialAgribusinessReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialAgribusinessRatingFinancialControlAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialAgribusinessReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialAgribusinessRatingFinancialControlAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialAgribusinessRatingFinancialControlAAFML_FinancialAgribusinessReporting_FinancialAgribusinessReportingId",
                        column: x => x.FinancialAgribusinessReportingId,
                        principalTable: "FinancialAgribusinessReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialAgribusinessRatingFinancialControlRFl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialAgribusinessReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialAgribusinessRatingFinancialControlRFl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialAgribusinessRatingFinancialControlRFl_FinancialAgribusinessReporting_FinancialAgribusinessReportingId",
                        column: x => x.FinancialAgribusinessReportingId,
                        principalTable: "FinancialAgribusinessReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialAgribusinessRatingRFl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialAgribusinessReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialAgribusinessRatingRFl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialAgribusinessRatingRFl_FinancialAgribusinessReporting_FinancialAgribusinessReportingId",
                        column: x => x.FinancialAgribusinessReportingId,
                        principalTable: "FinancialAgribusinessReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationAgribusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationAgribusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationAgribusinessRating_OperationAgribusiness_OperationAgribusinessId",
                        column: x => x.OperationAgribusinessId,
                        principalTable: "OperationAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationAgribusinessRatingAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationAgribusinessRatingAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationAgribusinessRatingAAFML_OperationAgribusiness_OperationAgribusinessId",
                        column: x => x.OperationAgribusinessId,
                        principalTable: "OperationAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationAgribusinessRatingFinancialControlAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationAgribusinessRatingFinancialControlAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationAgribusinessRatingFinancialControlAAFML_OperationAgribusiness_OperationAgribusinessId",
                        column: x => x.OperationAgribusinessId,
                        principalTable: "OperationAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationAgribusinessRatingFinancialControlRFl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationAgribusinessRatingFinancialControlRFl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationAgribusinessRatingFinancialControlRFl_OperationAgribusiness_OperationAgribusinessId",
                        column: x => x.OperationAgribusinessId,
                        principalTable: "OperationAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationAgribusinessRatingRFl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationAgribusinessRatingRFl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationAgribusinessRatingRFl_OperationAgribusiness_OperationAgribusinessId",
                        column: x => x.OperationAgribusinessId,
                        principalTable: "OperationAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyAgribusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyAgribusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyAgribusinessRating_StrategyAgribusiness_StrategyAgribusinessId",
                        column: x => x.StrategyAgribusinessId,
                        principalTable: "StrategyAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyAgribusinessRatingAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyAgribusinessRatingAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyAgribusinessRatingAAFML_StrategyAgribusiness_StrategyAgribusinessId",
                        column: x => x.StrategyAgribusinessId,
                        principalTable: "StrategyAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyAgribusinessRatingFinancialControlAAFML",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyAgribusinessRatingFinancialControlAAFML", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyAgribusinessRatingFinancialControlAAFML_StrategyAgribusiness_StrategyAgribusinessId",
                        column: x => x.StrategyAgribusinessId,
                        principalTable: "StrategyAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyAgribusinessRatingFinancialControlRFl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyAgribusinessRatingFinancialControlRFl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyAgribusinessRatingFinancialControlRFl_StrategyAgribusiness_StrategyAgribusinessId",
                        column: x => x.StrategyAgribusinessId,
                        principalTable: "StrategyAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyAgribusinessRatingRFl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyAgribusinessRatingRFl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyAgribusinessRatingRFl_StrategyAgribusiness_StrategyAgribusinessId",
                        column: x => x.StrategyAgribusinessId,
                        principalTable: "StrategyAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceHillRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceHillRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceHillRating_ComplianceBusinessRatingHill_ComplianceBusinessRatingHillId",
                        column: x => x.ComplianceBusinessRatingHillId,
                        principalTable: "ComplianceBusinessRatingHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceHillRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceHillRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceHillRatingCompliance_ComplianceBusinessRatingHill_ComplianceBusinessRatingHillId",
                        column: x => x.ComplianceBusinessRatingHillId,
                        principalTable: "ComplianceBusinessRatingHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceHillRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceHillRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceHillRatingFinancialControl_ComplianceBusinessRatingHill_ComplianceBusinessRatingHillId",
                        column: x => x.ComplianceBusinessRatingHillId,
                        principalTable: "ComplianceBusinessRatingHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceInvestmentPortfolio",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceInvestmentPortfolio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceInvestmentPortfolio_ComplianceBusinessRatingHill_ComplianceBusinessRatingHillId",
                        column: x => x.ComplianceBusinessRatingHillId,
                        principalTable: "ComplianceBusinessRatingHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialHillRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialHillReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialHillRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialHillRating_FinancialHillReporting_FinancialHillReportingId",
                        column: x => x.FinancialHillReportingId,
                        principalTable: "FinancialHillReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialHillRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialHillReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialHillRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialHillRatingCompliance_FinancialHillReporting_FinancialHillReportingId",
                        column: x => x.FinancialHillReportingId,
                        principalTable: "FinancialHillReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialHillRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialHillReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialHillRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialHillRatingFinancialControl_FinancialHillReporting_FinancialHillReportingId",
                        column: x => x.FinancialHillReportingId,
                        principalTable: "FinancialHillReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialHillRatingInvestmentPortfolio",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialHillReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialHillRatingInvestmentPortfolio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialHillRatingInvestmentPortfolio_FinancialHillReporting_FinancialHillReportingId",
                        column: x => x.FinancialHillReportingId,
                        principalTable: "FinancialHillReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationHillRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationHillRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationHillRating_OperationBusinessRatingHill_OperationBusinessRatingHillId",
                        column: x => x.OperationBusinessRatingHillId,
                        principalTable: "OperationBusinessRatingHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationHillRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationHillRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationHillRatingCompliance_OperationBusinessRatingHill_OperationBusinessRatingHillId",
                        column: x => x.OperationBusinessRatingHillId,
                        principalTable: "OperationBusinessRatingHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationHillRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationHillRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationHillRatingFinancialControl_OperationBusinessRatingHill_OperationBusinessRatingHillId",
                        column: x => x.OperationBusinessRatingHillId,
                        principalTable: "OperationBusinessRatingHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationHillRatingInvestmentPortfolio",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationHillRatingInvestmentPortfolio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationHillRatingInvestmentPortfolio_OperationBusinessRatingHill_OperationBusinessRatingHillId",
                        column: x => x.OperationBusinessRatingHillId,
                        principalTable: "OperationBusinessRatingHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyHillRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyHillRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyHillRating_StrategyBusinessRatingARMHill_StrategyBusinessRatingARMHillId",
                        column: x => x.StrategyBusinessRatingARMHillId,
                        principalTable: "StrategyBusinessRatingARMHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyHillRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyHillRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyHillRatingCompliance_StrategyBusinessRatingARMHill_StrategyBusinessRatingARMHillId",
                        column: x => x.StrategyBusinessRatingARMHillId,
                        principalTable: "StrategyBusinessRatingARMHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyHillRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyHillRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyHillRatingFinancialControl_StrategyBusinessRatingARMHill_StrategyBusinessRatingARMHillId",
                        column: x => x.StrategyBusinessRatingARMHillId,
                        principalTable: "StrategyBusinessRatingARMHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyHillRatingInvestmentPortfolio",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyHillRatingInvestmentPortfolio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyHillRatingInvestmentPortfolio_StrategyBusinessRatingARMHill_StrategyBusinessRatingARMHillId",
                        column: x => x.StrategyBusinessRatingARMHillId,
                        principalTable: "StrategyBusinessRatingARMHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CompliancesBusinessCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftOrFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompliancesBusinessCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompliancesBusinessCompliance_ComplianceBusinessRatingARMHoldCo_ComplianceBusinessRatingARMHoldCoId",
                        column: x => x.ComplianceBusinessRatingARMHoldCoId,
                        principalTable: "ComplianceBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CompliancesBusinessFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftOrFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompliancesBusinessFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompliancesBusinessFinancialControl_ComplianceBusinessRatingARMHoldCo_ComplianceBusinessRatingARMHoldCoId",
                        column: x => x.ComplianceBusinessRatingARMHoldCoId,
                        principalTable: "ComplianceBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CompliancesBusinessRiskRatingARMHoldCo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftOrFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompliancesBusinessRiskRatingARMHoldCo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompliancesBusinessRiskRatingARMHoldCo_ComplianceBusinessRatingARMHoldCo_ComplianceBusinessRatingARMHoldCoId",
                        column: x => x.ComplianceBusinessRatingARMHoldCoId,
                        principalTable: "ComplianceBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CompliancesBusinessTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftOrFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompliancesBusinessTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompliancesBusinessTreasuryOperation_ComplianceBusinessRatingARMHoldCo_ComplianceBusinessRatingARMHoldCoId",
                        column: x => x.ComplianceBusinessRatingARMHoldCoId,
                        principalTable: "ComplianceBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CompliancesBusinessTreasurySale",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    TheftOrFraudRisk = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompliancesBusinessTreasurySale", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompliancesBusinessTreasurySale_ComplianceBusinessRatingARMHoldCo_ComplianceBusinessRatingARMHoldCoId",
                        column: x => x.ComplianceBusinessRatingARMHoldCoId,
                        principalTable: "ComplianceBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialRatingBusinessCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialReportingBusinessratingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialRatingBusinessCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialRatingBusinessCompliance_FinancialReportingBusinessratingARMHoldCo_FinancialReportingBusinessratingARMHoldCoId",
                        column: x => x.FinancialReportingBusinessratingARMHoldCoId,
                        principalTable: "FinancialReportingBusinessratingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialRatingBusinessFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialReportingBusinessratingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialRatingBusinessFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialRatingBusinessFinancialControl_FinancialReportingBusinessratingARMHoldCo_FinancialReportingBusinessratingARMHoldCoId",
                        column: x => x.FinancialReportingBusinessratingARMHoldCoId,
                        principalTable: "FinancialReportingBusinessratingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialRatingBusinessratingARMHoldCo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialReportingBusinessratingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialRatingBusinessratingARMHoldCo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialRatingBusinessratingARMHoldCo_FinancialReportingBusinessratingARMHoldCo_FinancialReportingBusinessratingARMHoldCoId",
                        column: x => x.FinancialReportingBusinessratingARMHoldCoId,
                        principalTable: "FinancialReportingBusinessratingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialRatingBusinessratingTreasurySale",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialReportingBusinessratingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialRatingBusinessratingTreasurySale", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialRatingBusinessratingTreasurySale_FinancialReportingBusinessratingARMHoldCo_FinancialReportingBusinessratingARMHoldCo~",
                        column: x => x.FinancialReportingBusinessratingARMHoldCoId,
                        principalTable: "FinancialReportingBusinessratingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialRatingBusinessTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialReportingBusinessratingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialRatingBusinessTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialRatingBusinessTreasuryOperation_FinancialReportingBusinessratingARMHoldCo_FinancialReportingBusinessratingARMHoldCoId",
                        column: x => x.FinancialReportingBusinessratingARMHoldCoId,
                        principalTable: "FinancialReportingBusinessratingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessArmHolco",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessArmHolco", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessArmHolco_OperationBusinessRatingARMHoldCo_OperationBusinessRatingARMHoldCoId",
                        column: x => x.OperationBusinessRatingARMHoldCoId,
                        principalTable: "OperationBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessCompliance_OperationBusinessRatingARMHoldCo_OperationBusinessRatingARMHoldCoId",
                        column: x => x.OperationBusinessRatingARMHoldCoId,
                        principalTable: "OperationBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessFinancialControl_OperationBusinessRatingARMHoldCo_OperationBusinessRatingARMHoldCoId",
                        column: x => x.OperationBusinessRatingARMHoldCoId,
                        principalTable: "OperationBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessTreasuryOperation_OperationBusinessRatingARMHoldCo_OperationBusinessRatingARMHoldCoId",
                        column: x => x.OperationBusinessRatingARMHoldCoId,
                        principalTable: "OperationBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessTreasurySale",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessTreasurySale", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessTreasurySale_OperationBusinessRatingARMHoldCo_OperationBusinessRatingARMHoldCoId",
                        column: x => x.OperationBusinessRatingARMHoldCoId,
                        principalTable: "OperationBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessArmHoldCo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessArmHoldCo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessArmHoldCo_StrategyBusinessRatingARMHoldCo_StrategyBusinessRatingARMHoldCoId",
                        column: x => x.StrategyBusinessRatingARMHoldCoId,
                        principalTable: "StrategyBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessCompliance_StrategyBusinessRatingARMHoldCo_StrategyBusinessRatingARMHoldCoId",
                        column: x => x.StrategyBusinessRatingARMHoldCoId,
                        principalTable: "StrategyBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessFinancialControl_StrategyBusinessRatingARMHoldCo_StrategyBusinessRatingARMHoldCoId",
                        column: x => x.StrategyBusinessRatingARMHoldCoId,
                        principalTable: "StrategyBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessTreasuryOperation_StrategyBusinessRatingARMHoldCo_StrategyBusinessRatingARMHoldCoId",
                        column: x => x.StrategyBusinessRatingARMHoldCoId,
                        principalTable: "StrategyBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessTreasurySale",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingARMHoldCoId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessTreasurySale", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessTreasurySale_StrategyBusinessRatingARMHoldCo_StrategyBusinessRatingARMHoldCoId",
                        column: x => x.StrategyBusinessRatingARMHoldCoId,
                        principalTable: "StrategyBusinessRatingARMHoldCo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRating_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingARMRegistrar",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingARMRegistrar", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingARMRegistrar_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingBDPWMIAMIMRetail",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingBDPWMIAMIMRetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingBDPWMIAMIMRetail_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingCompliance_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingFinancialControl_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingFundAccount",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingFundAccount", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingFundAccount_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingFundAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingFundAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingFundAdmin_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingOperationControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingOperationControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingOperationControl_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingOperationSettlement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingOperationSettlement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingOperationSettlement_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingRetailOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingRetailOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingRetailOperation_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceIMRatingTreasuryInvestment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceIMRatingTreasuryInvestment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceIMRatingTreasuryInvestment_ComplianceIMBusinessRating_ComplianceIMBusinessRatingId",
                        column: x => x.ComplianceIMBusinessRatingId,
                        principalTable: "ComplianceIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMBusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMBusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMBusinessRating_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingARMRegistrar",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingARMRegistrar", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingARMRegistrar_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingBDPWMIAMIMRetail",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingBDPWMIAMIMRetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingBDPWMIAMIMRetail_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingCompliance_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingFinancialControl_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingFundAccount",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingFundAccount", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingFundAccount_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingFundAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingFundAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingFundAdmin_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingOperationControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingOperationControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingOperationControl_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingOperationSettlement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingOperationSettlement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingOperationSettlement_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingRetailOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingRetailOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingRetailOperation_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialIMRatingTreasuryInvestment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialIMRatingTreasuryInvestment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialIMRatingTreasuryInvestment_FinancialIMBusinessRating_FinancialIMBusinessRatingId",
                        column: x => x.FinancialIMBusinessRatingId,
                        principalTable: "FinancialIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingARMRegistrar",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingARMRegistrar", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingARMRegistrar_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingBDPWMIAMIMRetail",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingBDPWMIAMIMRetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingBDPWMIAMIMRetail_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingCompliance_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingFinancialControl_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingFundAccount",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingFundAccount", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingFundAccount_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingFundAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingFundAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingFundAdmin_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingOperationControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingOperationControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingOperationControl_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingOperationSettlement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingOperationSettlement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingOperationSettlement_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingRetailOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingRetailOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingRetailOperation_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMRatingTreasuryInvestment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMRatingTreasuryInvestment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMRatingTreasuryInvestment_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationIMUnitRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationIMBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationIMUnitRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationIMUnitRating_OperationIMBusinessRating_OperationIMBusinessRatingId",
                        column: x => x.OperationIMBusinessRatingId,
                        principalTable: "OperationIMBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRating_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingARMRegistrar",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingARMRegistrar", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingARMRegistrar_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingBDPWMIAMIMRetail",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingBDPWMIAMIMRetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingBDPWMIAMIMRetail_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingCompliance_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingFinancialControl_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingFundAccount",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingFundAccount", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingFundAccount_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingFundAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingFundAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingFundAdmin_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingOperationControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingOperationControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingOperationControl_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingOperationSettlement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingOperationSettlement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingOperationSettlement_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingRetailOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingRetailOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingRetailOperation_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyIMRatingTreasuryInvestment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyImBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyIMRatingTreasuryInvestment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyIMRatingTreasuryInvestment_StrategyImBusinessRating_StrategyImBusinessRatingId",
                        column: x => x.StrategyImBusinessRatingId,
                        principalTable: "StrategyImBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSecurityRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSecurityRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSecurityRating_ComplianceSecurity_ComplianceSecurityId",
                        column: x => x.ComplianceSecurityId,
                        principalTable: "ComplianceSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSecurityRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSecurityRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSecurityRatingCompliance_ComplianceSecurity_ComplianceSecurityId",
                        column: x => x.ComplianceSecurityId,
                        principalTable: "ComplianceSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSecurityRatingFinancialAdvisory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSecurityRatingFinancialAdvisory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSecurityRatingFinancialAdvisory_ComplianceSecurity_ComplianceSecurityId",
                        column: x => x.ComplianceSecurityId,
                        principalTable: "ComplianceSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSecurityRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSecurityRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSecurityRatingFinancialControl_ComplianceSecurity_ComplianceSecurityId",
                        column: x => x.ComplianceSecurityId,
                        principalTable: "ComplianceSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSecurityRatingResearch",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSecurityRatingResearch", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSecurityRatingResearch_ComplianceSecurity_ComplianceSecurityId",
                        column: x => x.ComplianceSecurityId,
                        principalTable: "ComplianceSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSecurityRatingSecurityOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSecurityRatingSecurityOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSecurityRatingSecurityOperation_ComplianceSecurity_ComplianceSecurityId",
                        column: x => x.ComplianceSecurityId,
                        principalTable: "ComplianceSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSecurityRatingStockBroking",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSecurityRatingStockBroking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSecurityRatingStockBroking_ComplianceSecurity_ComplianceSecurityId",
                        column: x => x.ComplianceSecurityId,
                        principalTable: "ComplianceSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSecurityRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSecurityReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSecurityRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSecurityRating_FinancialSecurityReporting_FinancialSecurityReportingId",
                        column: x => x.FinancialSecurityReportingId,
                        principalTable: "FinancialSecurityReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSecurityRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSecurityReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSecurityRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSecurityRatingCompliance_FinancialSecurityReporting_FinancialSecurityReportingId",
                        column: x => x.FinancialSecurityReportingId,
                        principalTable: "FinancialSecurityReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSecurityRatingFinancialAdvisory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSecurityReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSecurityRatingFinancialAdvisory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSecurityRatingFinancialAdvisory_FinancialSecurityReporting_FinancialSecurityReportingId",
                        column: x => x.FinancialSecurityReportingId,
                        principalTable: "FinancialSecurityReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSecurityRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSecurityReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSecurityRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSecurityRatingFinancialControl_FinancialSecurityReporting_FinancialSecurityReportingId",
                        column: x => x.FinancialSecurityReportingId,
                        principalTable: "FinancialSecurityReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSecurityRatingResearch",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSecurityReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSecurityRatingResearch", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSecurityRatingResearch_FinancialSecurityReporting_FinancialSecurityReportingId",
                        column: x => x.FinancialSecurityReportingId,
                        principalTable: "FinancialSecurityReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSecurityRatingSecurityOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSecurityReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSecurityRatingSecurityOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSecurityRatingSecurityOperation_FinancialSecurityReporting_FinancialSecurityReportingId",
                        column: x => x.FinancialSecurityReportingId,
                        principalTable: "FinancialSecurityReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSecurityRatingStockBroking",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSecurityReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSecurityRatingStockBroking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSecurityRatingStockBroking_FinancialSecurityReporting_FinancialSecurityReportingId",
                        column: x => x.FinancialSecurityReportingId,
                        principalTable: "FinancialSecurityReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSecurityRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSecurityRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSecurityRating_OperationSecurityBusinessRating_OperationSecurityBusinessRatingId",
                        column: x => x.OperationSecurityBusinessRatingId,
                        principalTable: "OperationSecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSecurityRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSecurityRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSecurityRatingCompliance_OperationSecurityBusinessRating_OperationSecurityBusinessRatingId",
                        column: x => x.OperationSecurityBusinessRatingId,
                        principalTable: "OperationSecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSecurityRatingFinancialAdvisory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSecurityRatingFinancialAdvisory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSecurityRatingFinancialAdvisory_OperationSecurityBusinessRating_OperationSecurityBusinessRatingId",
                        column: x => x.OperationSecurityBusinessRatingId,
                        principalTable: "OperationSecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSecurityRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSecurityRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSecurityRatingFinancialControl_OperationSecurityBusinessRating_OperationSecurityBusinessRatingId",
                        column: x => x.OperationSecurityBusinessRatingId,
                        principalTable: "OperationSecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSecurityRatingResearch",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSecurityRatingResearch", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSecurityRatingResearch_OperationSecurityBusinessRating_OperationSecurityBusinessRatingId",
                        column: x => x.OperationSecurityBusinessRatingId,
                        principalTable: "OperationSecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSecurityRatingSecurityOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSecurityRatingSecurityOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSecurityRatingSecurityOperation_OperationSecurityBusinessRating_OperationSecurityBusinessRatingId",
                        column: x => x.OperationSecurityBusinessRatingId,
                        principalTable: "OperationSecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSecurityRatingStockBroking",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSecurityRatingStockBroking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSecurityRatingStockBroking_OperationSecurityBusinessRating_OperationSecurityBusinessRatingId",
                        column: x => x.OperationSecurityBusinessRatingId,
                        principalTable: "OperationSecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySecurityRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySecurityRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySecurityRating_StrategySecurityBusinessRating_StrategySecurityBusinessRatingId",
                        column: x => x.StrategySecurityBusinessRatingId,
                        principalTable: "StrategySecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySecurityRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySecurityRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySecurityRatingCompliance_StrategySecurityBusinessRating_StrategySecurityBusinessRatingId",
                        column: x => x.StrategySecurityBusinessRatingId,
                        principalTable: "StrategySecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySecurityRatingFinancialAdvisory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySecurityRatingFinancialAdvisory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySecurityRatingFinancialAdvisory_StrategySecurityBusinessRating_StrategySecurityBusinessRatingId",
                        column: x => x.StrategySecurityBusinessRatingId,
                        principalTable: "StrategySecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySecurityRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySecurityRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySecurityRatingFinancialControl_StrategySecurityBusinessRating_StrategySecurityBusinessRatingId",
                        column: x => x.StrategySecurityBusinessRatingId,
                        principalTable: "StrategySecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySecurityRatingResearch",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySecurityRatingResearch", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySecurityRatingResearch_StrategySecurityBusinessRating_StrategySecurityBusinessRatingId",
                        column: x => x.StrategySecurityBusinessRatingId,
                        principalTable: "StrategySecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySecurityRatingSecurityOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySecurityRatingSecurityOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySecurityRatingSecurityOperation_StrategySecurityBusinessRating_StrategySecurityBusinessRatingId",
                        column: x => x.StrategySecurityBusinessRatingId,
                        principalTable: "StrategySecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySecurityRatingStockBroking",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySecurityBusinessRatingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySecurityRatingStockBroking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySecurityRatingStockBroking_StrategySecurityBusinessRating_StrategySecurityBusinessRatingId",
                        column: x => x.StrategySecurityBusinessRatingId,
                        principalTable: "StrategySecurityBusinessRating",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRating_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingAcademy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingAcademy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingAcademy_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingCorporatestrategy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingCorporatestrategy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingCorporatestrategy_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingCTU",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingCTU", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingCTU_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingCustomerexperience",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingCustomerexperience", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingCustomerexperience_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingDigitalFinanceService",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingDigitalFinanceService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingDigitalFinanceService_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingHCM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingHCM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingHCM_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingInformationSecurity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingInformationSecurity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingInformationSecurity_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingInternalControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingInternalControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingInternalControl_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingIT",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingIT", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingIT_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingLegal",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingLegal", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingLegal_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingMCC",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingMCC", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingMCC_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingProcurementAndAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingProcurementAndAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingProcurementAndAdmin_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingRiskManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingRiskManagement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingRiskManagement_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceSharedServiceRatingTreasury",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceSharedServiceRatingTreasury", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceSharedServiceRatingTreasury_ComplianceSharedService_ComplianceSharedServiceId",
                        column: x => x.ComplianceSharedServiceId,
                        principalTable: "ComplianceSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRating_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingAcademy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingAcademy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingAcademy_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingCorporatestrategy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingCorporatestrategy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingCorporatestrategy_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingCTU",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingCTU", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingCTU_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingCustomerexperience",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingCustomerexperience", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingCustomerexperience_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingDigitalFinanceService",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingDigitalFinanceService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingDigitalFinanceService_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingHCM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingHCM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingHCM_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingInformationSecurity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingInformationSecurity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingInformationSecurity_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingInternalControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingInternalControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingInternalControl_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingIT",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingIT", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingIT_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingLegal",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingLegal", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingLegal_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingMCC",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingMCC", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingMCC_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingProcurementAndAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingProcurementAndAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingProcurementAndAdmin_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingRiskManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingRiskManagement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingRiskManagement_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialSharedServiceRatingTreasury",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialSharedServiceReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialSharedServiceRatingTreasury", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialSharedServiceRatingTreasury_FinancialSharedServiceReporting_FinancialSharedServiceReportingId",
                        column: x => x.FinancialSharedServiceReportingId,
                        principalTable: "FinancialSharedServiceReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRating_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingAcademy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingAcademy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingAcademy_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingCorporatestrategy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingCorporatestrategy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingCorporatestrategy_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingCTU",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingCTU", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingCTU_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingCustomerexperience",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingCustomerexperience", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingCustomerexperience_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingDigitalFinanceService",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingDigitalFinanceService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingDigitalFinanceService_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingHCM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingHCM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingHCM_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingInformationSecurity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingInformationSecurity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingInformationSecurity_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingInternalControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingInternalControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingInternalControl_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingIT",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingIT", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingIT_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingLegal",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingLegal", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingLegal_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingMCC",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingMCC", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingMCC_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingProcurementAndAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingProcurementAndAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingProcurementAndAdmin_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingRiskManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingRiskManagement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingRiskManagement_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationSharedServiceRatingTreasury",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationSharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ObsoleteTechnology = table.Column<int>(type: "int", nullable: false),
                    VendorManagement = table.Column<int>(type: "int", nullable: false),
                    QualityManagament = table.Column<int>(type: "int", nullable: false),
                    AssentMaintenance = table.Column<int>(type: "int", nullable: false),
                    EventManagement = table.Column<int>(type: "int", nullable: false),
                    DisclosureCorruptionOfSensitiveData = table.Column<int>(type: "int", nullable: false),
                    ChangeNoticeManagement = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSharedServiceRatingTreasury", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSharedServiceRatingTreasury_OperationSharedService_OperationSharedServiceId",
                        column: x => x.OperationSharedServiceId,
                        principalTable: "OperationSharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRating_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingAcademy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingAcademy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingAcademy_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingCorporatestrategy",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingCorporatestrategy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingCorporatestrategy_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingCTU",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingCTU", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingCTU_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingCustomerexperience",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingCustomerexperience", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingCustomerexperience_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingDigitalFinanceService",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingDigitalFinanceService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingDigitalFinanceService_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingHCM",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthAndSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    Emergingrisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingHCM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingHCM_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingInformationSecurity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingInformationSecurity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingInformationSecurity_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingInternalControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingInternalControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingInternalControl_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingIT",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingIT", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingIT_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingLegal",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingLegal", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingLegal_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingMCC",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingMCC", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingMCC_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingProcurementAndAdmin",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingProcurementAndAdmin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingProcurementAndAdmin_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingRiskManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingRiskManagement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingRiskManagement_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategySharedServiceRatingTreasury",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategySharedServiceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategySharedServiceRatingTreasury", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategySharedServiceRatingTreasury_StrategySharedService_StrategySharedServiceId",
                        column: x => x.StrategySharedServiceId,
                        principalTable: "StrategySharedService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceBusinessTAMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceBusinessTAMRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceBusinessTAMRating_ComplianceBusinessARMTAM_ComplianceBusinessARMTAMId",
                        column: x => x.ComplianceBusinessARMTAMId,
                        principalTable: "ComplianceBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceBusinessTAMRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceBusinessTAMRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceBusinessTAMRatingFinancialControl_ComplianceBusinessARMTAM_ComplianceBusinessARMTAMId",
                        column: x => x.ComplianceBusinessARMTAMId,
                        principalTable: "ComplianceBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceBusinessTAMRatingTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceBusinessTAMRatingTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceBusinessTAMRatingTreasuryOperation_ComplianceBusinessARMTAM_ComplianceBusinessARMTAMId",
                        column: x => x.ComplianceBusinessARMTAMId,
                        principalTable: "ComplianceBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialBusinessTAMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialBusinessTAMRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialBusinessTAMRating_FinancialBusinessARMTAM_FinancialBusinessARMTAMId",
                        column: x => x.FinancialBusinessARMTAMId,
                        principalTable: "FinancialBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialTAMRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialTAMRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialTAMRatingFinancialControl_FinancialBusinessARMTAM_FinancialBusinessARMTAMId",
                        column: x => x.FinancialBusinessARMTAMId,
                        principalTable: "FinancialBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialTAMRatingTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialTAMRatingTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialTAMRatingTreasuryOperation_FinancialBusinessARMTAM_FinancialBusinessARMTAMId",
                        column: x => x.FinancialBusinessARMTAMId,
                        principalTable: "FinancialBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessTAMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessTAMRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessTAMRating_OperationBusinessARMTAM_OperationBusinessARMTAMId",
                        column: x => x.OperationBusinessARMTAMId,
                        principalTable: "OperationBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessTAMRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessTAMRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessTAMRatingFinancialControl_OperationBusinessARMTAM_OperationBusinessARMTAMId",
                        column: x => x.OperationBusinessARMTAMId,
                        principalTable: "OperationBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationBusinessTAMRatingTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationBusinessTAMRatingTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationBusinessTAMRatingTreasuryOperation_OperationBusinessARMTAM_OperationBusinessARMTAMId",
                        column: x => x.OperationBusinessARMTAMId,
                        principalTable: "OperationBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessTAMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessTAMRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessTAMRating_StrategyBusinessARMTAM_StrategyBusinessARMTAMId",
                        column: x => x.StrategyBusinessARMTAMId,
                        principalTable: "StrategyBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessTAMRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessTAMRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessTAMRatingFinancialControl_StrategyBusinessARMTAM_StrategyBusinessARMTAMId",
                        column: x => x.StrategyBusinessARMTAMId,
                        principalTable: "StrategyBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyBusinessTAMRatingTreasuryOperation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessARMTAMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyBusinessTAMRatingTreasuryOperation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyBusinessTAMRatingTreasuryOperation_StrategyBusinessARMTAM_StrategyBusinessARMTAMId",
                        column: x => x.StrategyBusinessARMTAMId,
                        principalTable: "StrategyBusinessARMTAM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceTrusteeRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceTrusteeRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceTrusteeRating_ComplianceBusinessRatingTrustee_ComplianceBusinessRatingTrusteeId",
                        column: x => x.ComplianceBusinessRatingTrusteeId,
                        principalTable: "ComplianceBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceTrusteeRatingCommercialTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceTrusteeRatingCommercialTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceTrusteeRatingCommercialTrust_ComplianceBusinessRatingTrustee_ComplianceBusinessRatingTrusteeId",
                        column: x => x.ComplianceBusinessRatingTrusteeId,
                        principalTable: "ComplianceBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceTrusteeRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceTrusteeRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceTrusteeRatingCompliance_ComplianceBusinessRatingTrustee_ComplianceBusinessRatingTrusteeId",
                        column: x => x.ComplianceBusinessRatingTrusteeId,
                        principalTable: "ComplianceBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceTrusteeRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceTrusteeRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceTrusteeRatingFinancialControl_ComplianceBusinessRatingTrustee_ComplianceBusinessRatingTrusteeId",
                        column: x => x.ComplianceBusinessRatingTrusteeId,
                        principalTable: "ComplianceBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplianceTrusteeRatingPrivateTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ComplianceBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AMLCFT = table.Column<int>(type: "int", nullable: false),
                    LitigationRisk = table.Column<int>(type: "int", nullable: false),
                    ChangingRegulations = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    InaccurateComputationofRegulatoryRemittancesDelayedFilings = table.Column<int>(type: "int", nullable: false),
                    NonComplianceWithContracts = table.Column<int>(type: "int", nullable: false),
                    KYCChecks = table.Column<int>(type: "int", nullable: false),
                    GDPROrNDPR = table.Column<int>(type: "int", nullable: false),
                    AdoptionandIimplementationOfPoliciesandAdherenceToProcesses = table.Column<int>(type: "int", nullable: false),
                    DisclosureRisk = table.Column<int>(type: "int", nullable: false),
                    CorporateGovernance = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplianceTrusteeRatingPrivateTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplianceTrusteeRatingPrivateTrust_ComplianceBusinessRatingTrustee_ComplianceBusinessRatingTrusteeId",
                        column: x => x.ComplianceBusinessRatingTrusteeId,
                        principalTable: "ComplianceBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialTrusteeRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialTrusteeReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialTrusteeRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialTrusteeRating_FinancialTrusteeReporting_FinancialTrusteeReportingId",
                        column: x => x.FinancialTrusteeReportingId,
                        principalTable: "FinancialTrusteeReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialTrusteeRatingCommercialTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialTrusteeReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialTrusteeRatingCommercialTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialTrusteeRatingCommercialTrust_FinancialTrusteeReporting_FinancialTrusteeReportingId",
                        column: x => x.FinancialTrusteeReportingId,
                        principalTable: "FinancialTrusteeReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialTrusteeRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialTrusteeReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialTrusteeRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialTrusteeRatingCompliance_FinancialTrusteeReporting_FinancialTrusteeReportingId",
                        column: x => x.FinancialTrusteeReportingId,
                        principalTable: "FinancialTrusteeReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialTrusteeRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialTrusteeReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialTrusteeRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialTrusteeRatingFinancialControl_FinancialTrusteeReporting_FinancialTrusteeReportingId",
                        column: x => x.FinancialTrusteeReportingId,
                        principalTable: "FinancialTrusteeReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FinacialTrusteeRatingPrivateTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FinancialTrusteeReportingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncomeAssuranceRisk = table.Column<int>(type: "int", nullable: false),
                    StatutoryDeductionsandTaxes = table.Column<int>(type: "int", nullable: false),
                    AdherencetoFinancialStandards = table.Column<int>(type: "int", nullable: false),
                    AdoptionandImplementationofPoliciesAdherence = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    ErrororControlRisk = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinacialTrusteeRatingPrivateTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinacialTrusteeRatingPrivateTrust_FinancialTrusteeReporting_FinancialTrusteeReportingId",
                        column: x => x.FinancialTrusteeReportingId,
                        principalTable: "FinancialTrusteeReporting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationTrusteeRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationTrusteeRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationTrusteeRating_OperationTrustee_OperationTrusteeId",
                        column: x => x.OperationTrusteeId,
                        principalTable: "OperationTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationTrusteeRatingCommercialTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationTrusteeRatingCommercialTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationTrusteeRatingCommercialTrust_OperationTrustee_OperationTrusteeId",
                        column: x => x.OperationTrusteeId,
                        principalTable: "OperationTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationTrusteeRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationTrusteeRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationTrusteeRatingCompliance_OperationTrustee_OperationTrusteeId",
                        column: x => x.OperationTrusteeId,
                        principalTable: "OperationTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationTrusteeRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationTrusteeRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationTrusteeRatingFinancialControl_OperationTrustee_OperationTrusteeId",
                        column: x => x.OperationTrusteeId,
                        principalTable: "OperationTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OperationTrusteeRatingPrivateTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperationTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AdoptionandImplementationofPolicies = table.Column<int>(type: "int", nullable: false),
                    ProductMisselling = table.Column<int>(type: "int", nullable: false),
                    TheftorFraudRisk = table.Column<int>(type: "int", nullable: false),
                    PoorCustomerService = table.Column<int>(type: "int", nullable: false),
                    ITInfrastructureDowntime = table.Column<int>(type: "int", nullable: false),
                    ThirdpartyRisk = table.Column<int>(type: "int", nullable: false),
                    TAT = table.Column<int>(type: "int", nullable: false),
                    TheftLeakageorMisuseofIntellectualProperty = table.Column<int>(type: "int", nullable: false),
                    FOREXRisk = table.Column<int>(type: "int", nullable: false),
                    OverorUnderpaymentofClient = table.Column<int>(type: "int", nullable: false),
                    RecruitmentRisk = table.Column<int>(type: "int", nullable: false),
                    ConfidentialityIntegrityandAvailabilityofData = table.Column<int>(type: "int", nullable: false),
                    UnauthorizedAccess = table.Column<int>(type: "int", nullable: false),
                    MalwareorVirusorWebsiteAttacks = table.Column<int>(type: "int", nullable: false),
                    ErroneousDataEntry = table.Column<int>(type: "int", nullable: false),
                    Miscommunication = table.Column<int>(type: "int", nullable: false),
                    ErrorDetectionRisk = table.Column<int>(type: "int", nullable: false),
                    StrategyMonitoringRisk = table.Column<int>(type: "int", nullable: false),
                    RelevanceandRecencyofModelToolsandTechniques = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    BudgetOverruns = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationTrusteeRatingPrivateTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationTrusteeRatingPrivateTrust_OperationTrustee_OperationTrusteeId",
                        column: x => x.OperationTrusteeId,
                        principalTable: "OperationTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyTrusteeRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyTrusteeRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyTrusteeRating_StrategyBusinessRatingTrustee_StrategyBusinessRatingTrusteeId",
                        column: x => x.StrategyBusinessRatingTrusteeId,
                        principalTable: "StrategyBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyTrusteeRatingCommercialTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyTrusteeRatingCommercialTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyTrusteeRatingCommercialTrust_StrategyBusinessRatingTrustee_StrategyBusinessRatingTrusteeId",
                        column: x => x.StrategyBusinessRatingTrusteeId,
                        principalTable: "StrategyBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyTrusteeRatingCompliance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyTrusteeRatingCompliance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyTrusteeRatingCompliance_StrategyBusinessRatingTrustee_StrategyBusinessRatingTrusteeId",
                        column: x => x.StrategyBusinessRatingTrusteeId,
                        principalTable: "StrategyBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyTrusteeRatingFinancialControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyTrusteeRatingFinancialControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyTrusteeRatingFinancialControl_StrategyBusinessRatingTrustee_StrategyBusinessRatingTrusteeId",
                        column: x => x.StrategyBusinessRatingTrusteeId,
                        principalTable: "StrategyBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrategyTrusteeRatingPrivateTrust",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrategyBusinessRatingTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FlunctuatingInterestRates = table.Column<int>(type: "int", nullable: false),
                    CurrencyDevaluation = table.Column<int>(type: "int", nullable: false),
                    Increasedleverage = table.Column<int>(type: "int", nullable: false),
                    LiquidityPressures = table.Column<int>(type: "int", nullable: false),
                    ReputationalRisk = table.Column<int>(type: "int", nullable: false),
                    PeopleRetentionRisk = table.Column<int>(type: "int", nullable: false),
                    TechnologicalRisk = table.Column<int>(type: "int", nullable: false),
                    InformationSecurityRisk = table.Column<int>(type: "int", nullable: false),
                    CreditRisk = table.Column<int>(type: "int", nullable: false),
                    AllianceandPartnershipRisks = table.Column<int>(type: "int", nullable: false),
                    PortfolioProductandFundPerformanceRisk = table.Column<int>(type: "int", nullable: false),
                    RisktoProfitabilityorPerformance = table.Column<int>(type: "int", nullable: false),
                    RiskofDeclineinMarketShare = table.Column<int>(type: "int", nullable: false),
                    DropinFundandFundManagerRatings = table.Column<int>(type: "int", nullable: false),
                    HarshMacroeconomicConditionsegInflation = table.Column<int>(type: "int", nullable: false),
                    StiffCompetitionandPoorVisibilityOftheBusiness = table.Column<int>(type: "int", nullable: false),
                    ErosionofStatutoryCapital = table.Column<int>(type: "int", nullable: false),
                    FluidityofTechnologicalSolutions = table.Column<int>(type: "int", nullable: false),
                    UnregulatedUnstructuredlandscape = table.Column<int>(type: "int", nullable: false),
                    PoliticalRisk = table.Column<int>(type: "int", nullable: false),
                    ProjectManagementRisk = table.Column<int>(type: "int", nullable: false),
                    InvestmentRisk = table.Column<int>(type: "int", nullable: false),
                    FailureofInvestor = table.Column<int>(type: "int", nullable: false),
                    ExitRisk = table.Column<int>(type: "int", nullable: false),
                    SocialRisk = table.Column<int>(type: "int", nullable: false),
                    EnvironmentalRisk = table.Column<int>(type: "int", nullable: false),
                    SustainabilityRisk = table.Column<int>(type: "int", nullable: false),
                    BCPandDRP = table.Column<int>(type: "int", nullable: false),
                    MyLegacyIssuesProperty = table.Column<int>(type: "int", nullable: false),
                    HealthandSafetyRisks = table.Column<int>(type: "int", nullable: false),
                    EmergingRisks = table.Column<int>(type: "int", nullable: false),
                    ProductivityRisk = table.Column<int>(type: "int", nullable: false),
                    Total = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrategyTrusteeRatingPrivateTrust", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StrategyTrusteeRatingPrivateTrust_StrategyBusinessRatingTrustee_StrategyBusinessRatingTrusteeId",
                        column: x => x.StrategyBusinessRatingTrusteeId,
                        principalTable: "StrategyBusinessRatingTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernBusinessUnitARMAgribusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RFL = table.Column<int>(type: "int", nullable: false),
                    AAFML = table.Column<int>(type: "int", nullable: false),
                    FarmingOperation = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernBusinessUnitARMAgribusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernBusinessUnitARMAgribusinessRating_ManagementConcernARMAgribusiness_ManagementConcernARMAgribusinessId",
                        column: x => x.ManagementConcernARMAgribusinessId,
                        principalTable: "ManagementConcernARMAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernSharedServiceARMAgribusinessRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMAgribusinessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HCM = table.Column<int>(type: "int", nullable: false),
                    ProcurementAndAdmin = table.Column<int>(type: "int", nullable: false),
                    IT = table.Column<int>(type: "int", nullable: false),
                    RiskManagement = table.Column<int>(type: "int", nullable: false),
                    Legal = table.Column<int>(type: "int", nullable: false),
                    MCC = table.Column<int>(type: "int", nullable: false),
                    CTU = table.Column<int>(type: "int", nullable: false),
                    CustomerExperience = table.Column<int>(type: "int", nullable: false),
                    InformationSecurity = table.Column<int>(type: "int", nullable: false),
                    InternalControl = table.Column<int>(type: "int", nullable: false),
                    CorporateStrategy = table.Column<int>(type: "int", nullable: false),
                    Treasury = table.Column<int>(type: "int", nullable: false),
                    Academy = table.Column<int>(type: "int", nullable: false),
                    DigitalFinanceServiceDFS = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernSharedServiceARMAgribusinessRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernSharedServiceARMAgribusinessRating_ManagementConcernARMAgribusiness_ManagementConcernARMAgribusinessId",
                        column: x => x.ManagementConcernARMAgribusinessId,
                        principalTable: "ManagementConcernARMAgribusiness",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernBusinessUnitARMHillRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMHill = table.Column<int>(type: "int", nullable: false),
                    InvestmentPortfolio = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernBusinessUnitARMHillRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernBusinessUnitARMHillRating_ManagementConcernARMHill_ManagementConcernARMHillId",
                        column: x => x.ManagementConcernARMHillId,
                        principalTable: "ManagementConcernARMHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernSharedServiceARMHillRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMHillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HCM = table.Column<int>(type: "int", nullable: false),
                    ProcurementAndAdmin = table.Column<int>(type: "int", nullable: false),
                    IT = table.Column<int>(type: "int", nullable: false),
                    RiskManagement = table.Column<int>(type: "int", nullable: false),
                    Legal = table.Column<int>(type: "int", nullable: false),
                    MCC = table.Column<int>(type: "int", nullable: false),
                    Academy = table.Column<int>(type: "int", nullable: false),
                    CTU = table.Column<int>(type: "int", nullable: false),
                    CustomerExperience = table.Column<int>(type: "int", nullable: false),
                    InformationSecurity = table.Column<int>(type: "int", nullable: false),
                    InternalControl = table.Column<int>(type: "int", nullable: false),
                    CorporateStrategy = table.Column<int>(type: "int", nullable: false),
                    Treasury = table.Column<int>(type: "int", nullable: false),
                    DigitalFinanceServiceDFS = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernSharedServiceARMHillRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernSharedServiceARMHillRating_ManagementConcernARMHill_ManagementConcernARMHillId",
                        column: x => x.ManagementConcernARMHillId,
                        principalTable: "ManagementConcernARMHill",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernBusinessUnitARMIMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMIMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMIM = table.Column<int>(type: "int", nullable: false),
                    IMUnit = table.Column<int>(type: "int", nullable: false),
                    BDOrIMRetail = table.Column<int>(type: "int", nullable: false),
                    FundAccount = table.Column<int>(type: "int", nullable: false),
                    FundAdmin = table.Column<int>(type: "int", nullable: false),
                    RetailOperation = table.Column<int>(type: "int", nullable: false),
                    ARMRegistrar = table.Column<int>(type: "int", nullable: false),
                    Financialcontrol = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    TreasuryInvestment = table.Column<int>(type: "int", nullable: false),
                    OperationSettlement = table.Column<int>(type: "int", nullable: false),
                    OperationControl = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernBusinessUnitARMIMRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernBusinessUnitARMIMRating_ManagementConcernARMIM_ManagementConcernARMIMId",
                        column: x => x.ManagementConcernARMIMId,
                        principalTable: "ManagementConcernARMIM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernSharedServiceARMIMRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMIMId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HCM = table.Column<int>(type: "int", nullable: false),
                    ProcurementAndAdmin = table.Column<int>(type: "int", nullable: false),
                    IT = table.Column<int>(type: "int", nullable: false),
                    RiskManagement = table.Column<int>(type: "int", nullable: false),
                    Academy = table.Column<int>(type: "int", nullable: false),
                    Legal = table.Column<int>(type: "int", nullable: false),
                    MCC = table.Column<int>(type: "int", nullable: false),
                    CTU = table.Column<int>(type: "int", nullable: false),
                    CustomerExperience = table.Column<int>(type: "int", nullable: false),
                    InformationSecurity = table.Column<int>(type: "int", nullable: false),
                    InternalControl = table.Column<int>(type: "int", nullable: false),
                    CorporateStrategy = table.Column<int>(type: "int", nullable: false),
                    Treasury = table.Column<int>(type: "int", nullable: false),
                    DigitalFinanceServiceDFS = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernSharedServiceARMIMRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernSharedServiceARMIMRating_ManagementConcernARMIM_ManagementConcernARMIMId",
                        column: x => x.ManagementConcernARMIMId,
                        principalTable: "ManagementConcernARMIM",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernBusinessUnitARMSecurityRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMSecurity = table.Column<int>(type: "int", nullable: false),
                    FinancialAdvirory = table.Column<int>(type: "int", nullable: false),
                    SecurityOperation = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    Research = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernBusinessUnitARMSecurityRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernBusinessUnitARMSecurityRating_ManagementConcernARMSecurity_ManagementConcernARMSecurityId",
                        column: x => x.ManagementConcernARMSecurityId,
                        principalTable: "ManagementConcernARMSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernSharedServiceARMSecurityRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMSecurityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HCM = table.Column<int>(type: "int", nullable: false),
                    ProcurementAndAdmin = table.Column<int>(type: "int", nullable: false),
                    IT = table.Column<int>(type: "int", nullable: false),
                    RiskManagement = table.Column<int>(type: "int", nullable: false),
                    Legal = table.Column<int>(type: "int", nullable: false),
                    MCC = table.Column<int>(type: "int", nullable: false),
                    CTU = table.Column<int>(type: "int", nullable: false),
                    CustomerExperience = table.Column<int>(type: "int", nullable: false),
                    InformationSecurity = table.Column<int>(type: "int", nullable: false),
                    InternalControl = table.Column<int>(type: "int", nullable: false),
                    CorporateStrategy = table.Column<int>(type: "int", nullable: false),
                    Academy = table.Column<int>(type: "int", nullable: false),
                    Treasury = table.Column<int>(type: "int", nullable: false),
                    DigitalFinanceServiceDFS = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernSharedServiceARMSecurityRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernSharedServiceARMSecurityRating_ManagementConcernARMSecurity_ManagementConcernARMSecurityId",
                        column: x => x.ManagementConcernARMSecurityId,
                        principalTable: "ManagementConcernARMSecurity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernBusinessUnitARMTrusteeRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ARMTrustee = table.Column<int>(type: "int", nullable: false),
                    PrivateTrust = table.Column<int>(type: "int", nullable: false),
                    CommercialTrust = table.Column<int>(type: "int", nullable: false),
                    FinancialControl = table.Column<int>(type: "int", nullable: false),
                    Compliance = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernBusinessUnitARMTrusteeRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernBusinessUnitARMTrusteeRating_ManagementConcernARMTrustee_ManagementConcernARMTrusteeId",
                        column: x => x.ManagementConcernARMTrusteeId,
                        principalTable: "ManagementConcernARMTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ManagementConcernSharedServiceARTrusteeRating",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagementConcernARMTrusteeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HCM = table.Column<int>(type: "int", nullable: false),
                    ProcurementAndAdmin = table.Column<int>(type: "int", nullable: false),
                    IT = table.Column<int>(type: "int", nullable: false),
                    RiskManagement = table.Column<int>(type: "int", nullable: false),
                    Legal = table.Column<int>(type: "int", nullable: false),
                    MCC = table.Column<int>(type: "int", nullable: false),
                    CTU = table.Column<int>(type: "int", nullable: false),
                    CustomerExperience = table.Column<int>(type: "int", nullable: false),
                    InformationSecurity = table.Column<int>(type: "int", nullable: false),
                    InternalControl = table.Column<int>(type: "int", nullable: false),
                    CorporateStrategy = table.Column<int>(type: "int", nullable: false),
                    Treasury = table.Column<int>(type: "int", nullable: false),
                    Academy = table.Column<int>(type: "int", nullable: false),
                    DigitalFinanceServiceDFS = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManagementConcernSharedServiceARTrusteeRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ManagementConcernSharedServiceARTrusteeRating_ManagementConcernARMTrustee_ManagementConcernARMTrusteeId",
                        column: x => x.ManagementConcernARMTrusteeId,
                        principalTable: "ManagementConcernARMTrustee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BIAUnitProcessDetails",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessImpactAnalysisUnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProcessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessProcessDescriptionSummary = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    FinancialImpact = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CustomerExperience = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    OtherProcessesOrPeople = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    RegulatoryOrLegal = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    Reputation = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    ThirdPartyImpact = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    MinimumBusinessContinuityObjective = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    MaximumAllowableOutage = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    RecoveryTimeObjective = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    RecoveryPointObjective = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    Priority = table.Column<int>(type: "int", nullable: false),
                    ApplicationsUsedToRunProcess = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    KeyVendors = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    AnyNonElectronicVitalRecords = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    AlternativeWorkarounds = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    PrimaryRecoverStrategyAndSolution = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    PeakPeriod = table.Column<int>(type: "int", nullable: false),
                    RemoteWorking = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BIAUnitProcessDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BIAUnitProcessDetails_BusinessImpactAnalysisUnit_BusinessImpactAnalysisUnitId",
                        column: x => x.BusinessImpactAnalysisUnitId,
                        principalTable: "BusinessImpactAnalysisUnit",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "BusinessImpactAnalysisUnitLog",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessImpactAnalysisUnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BusinessImpactAnalysisUnitJson = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BusinessImpactAnalysisUnitLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BusinessImpactAnalysisUnitLog_BusinessImpactAnalysisUnit_BusinessImpactAnalysisUnitId",
                        column: x => x.BusinessImpactAnalysisUnitId,
                        principalTable: "BusinessImpactAnalysisUnit",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "DocumentRSCAProcess",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskControlSelfAssessmentUnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RCSAStage = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentRSCAProcess", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocumentRSCAProcess_RiskControlSelfAssessmentUnit_RiskControlSelfAssessmentUnitId",
                        column: x => x.RiskControlSelfAssessmentUnitId,
                        principalTable: "RiskControlSelfAssessmentUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ActionManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskEventId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Action = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ActionOwner = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ActionResolutionDate = table.Column<DateTime>(type: "date", nullable: false),
                    ActionProgress = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ActionStatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActionManagement", x => x.Id)
                        .Annotation("SqlServer:Clustered", true);
                    table.ForeignKey(
                        name: "FK_ActionManagement_RiskEvent_RiskEventId",
                        column: x => x.RiskEventId,
                        principalTable: "RiskEvent",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LossManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskEventId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    GrossLossValue = table.Column<decimal>(type: "decimal(10,2)", precision: 10, scale: 2, nullable: false),
                    TotalRecoveredAmount = table.Column<decimal>(type: "decimal(10,2)", precision: 10, scale: 2, nullable: false),
                    RecoveryDate = table.Column<DateTime>(type: "date", nullable: false),
                    RecoveredAmount = table.Column<decimal>(type: "decimal(10,2)", precision: 10, scale: 2, nullable: false),
                    RecoveryTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RecoveryDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    NetLoss = table.Column<decimal>(type: "decimal(10,2)", precision: 10, scale: 2, nullable: false),
                    AccountImpacted = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LossManagement", x => x.Id)
                        .Annotation("SqlServer:Clustered", true);
                    table.ForeignKey(
                        name: "FK_LossManagement_RiskEvent_RiskEventId",
                        column: x => x.RiskEventId,
                        principalTable: "RiskEvent",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RiskEffectManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskEventId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EffectType = table.Column<int>(type: "int", nullable: false),
                    EffectCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LossValue = table.Column<decimal>(type: "decimal(10,2)", precision: 10, scale: 2, nullable: false),
                    RationaleForGrossLossValue = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EffectDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskEffectManagement", x => x.Id)
                        .Annotation("SqlServer:Clustered", true);
                    table.ForeignKey(
                        name: "FK_RiskEffectManagement_RiskEffectCategory_EffectCategoryId",
                        column: x => x.EffectCategoryId,
                        principalTable: "RiskEffectCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RiskEffectManagement_RiskEvent_RiskEventId",
                        column: x => x.RiskEventId,
                        principalTable: "RiskEvent",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RiskEventManagement",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskEventId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EventTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EventCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EventSubCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BoundaryEventId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskDriverId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskDriverCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskDriverSubCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RiskDriverDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskEventManagement", x => x.Id)
                        .Annotation("SqlServer:Clustered", true);
                    table.ForeignKey(
                        name: "FK_RiskEventManagement_RiskDriverCategory_RiskDriverCategoryId",
                        column: x => x.RiskDriverCategoryId,
                        principalTable: "RiskDriverCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RiskEventManagement_RiskDriverSubCategory_RiskDriverSubCategoryId",
                        column: x => x.RiskDriverSubCategoryId,
                        principalTable: "RiskDriverSubCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_RiskEventManagement_RiskDriver_RiskDriverId",
                        column: x => x.RiskDriverId,
                        principalTable: "RiskDriver",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_RiskEventManagement_RiskEventTypeCategory_EventCategoryId",
                        column: x => x.EventCategoryId,
                        principalTable: "RiskEventTypeCategory",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RiskEventManagement_RiskEventTypeSubCategory_EventSubCategoryId",
                        column: x => x.EventSubCategoryId,
                        principalTable: "RiskEventTypeSubCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_RiskEventManagement_RiskEventType_EventTypeId",
                        column: x => x.EventTypeId,
                        principalTable: "RiskEventType",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_RiskEventManagement_RiskEvent_RiskEventId",
                        column: x => x.RiskEventId,
                        principalTable: "RiskEvent",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "WorkPaper",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AuditProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Reference = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Reoccurrence = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ExceptionsNoted = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IssueSummary = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    RootCause = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Impact = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Recommendation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IssueRating = table.Column<int>(type: "int", nullable: false),
                    IsAuditFindingInitiated = table.Column<bool>(type: "bit", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkPaper", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkPaper_AuditProgramAuditExecution_AuditProgramId",
                        column: x => x.AuditProgramId,
                        principalTable: "AuditProgramAuditExecution",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EngagementLetterAuditExecutionDuration",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EngagementLetterAuditExecutionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DurationAction = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DurationTiming = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EngagementLetterAuditExecutionDuration", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EngagementLetterAuditExecutionDuration_EngagementLetterAuditExecution_EngagementLetterAuditExecutionId",
                        column: x => x.EngagementLetterAuditExecutionId,
                        principalTable: "EngagementLetterAuditExecution",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EngagementLetterReportDistributionList",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EngagementLetterAuditExecutionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReportDistributionListName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ReportDistributionListTitle = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ReportDistributionListBusinessUnit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EngagementLetterReportDistributionList", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EngagementLetterReportDistributionList_EngagementLetterAuditExecution_EngagementLetterAuditExecutionId",
                        column: x => x.EngagementLetterAuditExecutionId,
                        principalTable: "EngagementLetterAuditExecution",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BIAUnitProcessDetailsBusinessUnitToRunProcess",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BIAUnitProcessDetailsId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BIAUnitProcessDetailsBusinessUnitToRunProcess", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BIAUnitProcessDetailsBusinessUnitToRunProcess_BIAUnitProcessDetails_BIAUnitProcessDetailsId",
                        column: x => x.BIAUnitProcessDetailsId,
                        principalTable: "BIAUnitProcessDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_BIAUnitProcessDetailsBusinessUnitToRunProcess_Unit_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DocumentRSCAProcessLog",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DocumentRSCAProcessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DocumentRSCAProcessJsonDump = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentRSCAProcessLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocumentRSCAProcessLog_DocumentRSCAProcess_DocumentRSCAProcessId",
                        column: x => x.DocumentRSCAProcessId,
                        principalTable: "DocumentRSCAProcess",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProcessInherentRiskControl",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProcessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InherentRisk = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    Control = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    TestToApply = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    DocumentRCSAProcessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TestResult = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    TestResultAttachmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TestResultAttachmentModuleType = table.Column<int>(type: "int", nullable: false),
                    ColourEffectiveness = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    ResidualRisks = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    ResidualRiskRating = table.Column<int>(type: "int", nullable: true),
                    ResidualRiskLevel = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CorrectiveActions = table.Column<string>(type: "nvarchar(max)", maxLength: 2147483647, nullable: true),
                    ActionOwnerUserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TimeLine = table.Column<DateTime>(type: "date", nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ActionProgress = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ActionStatus = table.Column<int>(type: "int", nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcessInherentRiskControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProcessInherentRiskControl_DocumentRSCAProcess_DocumentRCSAProcessId",
                        column: x => x.DocumentRCSAProcessId,
                        principalTable: "DocumentRSCAProcess",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuditFindings",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    WorkerPaperId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActionToResolve = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ActionToPreventReoccurrence = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ActionDueDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ActionOwner = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ActionOwnerUnit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedOnUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditFindings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuditFindings_WorkPaper_WorkerPaperId",
                        column: x => x.WorkerPaperId,
                        principalTable: "WorkPaper",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "BusinessEntity",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name" },
                values: new object[,]
                {
                    { new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7182), null, false, null, null, "ARMIM" },
                    { new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7200), null, false, null, null, "Mixta Nigeria" },
                    { new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7179), null, false, null, null, "ARM Securities" },
                    { new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7195), null, false, null, null, "ARM Trustees" },
                    { new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7197), null, false, null, null, "ARM Harith Infracstrure Investement Limited" },
                    { new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7199), null, false, null, null, "ARM AgriBusiness" },
                    { new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7186), null, false, null, null, "ARM HoldCo" },
                    { new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7198), null, false, null, null, "Shared Services" },
                    { new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 492, DateTimeKind.Utc).AddTicks(7202), null, false, null, null, "ARM Digital Financial Services" }
                });

            migrationBuilder.InsertData(
                table: "ComplianceBusines",
                columns: new[] { "Id", "Address", "BusinessName", "BusinessPhoneNumber", "CTO", "CreatedBy", "CreatedOnUtc", "DateUpdated", "DeletedBy", "Description", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "NameOfManagerOrMD", "RCNumber" },
                values: new object[,]
                {
                    { new Guid("70c25108-c4c7-4221-b444-2a98bddbba7b"), null, "ARMTrustee", null, null, new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(5673), new DateTime(2024, 8, 3, 11, 55, 22, 506, DateTimeKind.Local).AddTicks(5672), null, null, false, null, null, null, null },
                    { new Guid("803dcb0e-6a10-4e3b-9c73-35f1c7c4a265"), null, "ARMCapitalPartner", null, null, new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(5675), new DateTime(2024, 8, 3, 11, 55, 22, 506, DateTimeKind.Local).AddTicks(5674), null, null, false, null, null, null, null },
                    { new Guid("b8fda6fb-0e8a-4621-bae1-16f26d40f345"), null, "ARMSecurity", null, null, new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(5663), new DateTime(2024, 8, 3, 11, 55, 22, 506, DateTimeKind.Local).AddTicks(5652), null, null, false, null, null, null, null },
                    { new Guid("c767a782-a495-4b96-988c-22e8e16c33d9"), null, "ARMIM", null, null, new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(5667), new DateTime(2024, 8, 3, 11, 55, 22, 506, DateTimeKind.Local).AddTicks(5667), null, null, false, null, null, null, null }
                });

            migrationBuilder.InsertData(
                table: "ComplianceRegulator",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "Description", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "RegulatorTitle" },
                values: new object[,]
                {
                    { new Guid("0902e170-5fc5-49ca-9e31-9da612ed2547"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6528), null, null, false, null, null, "GUIDELINES ON FUND ACCOUNTING" },
                    { new Guid("10de3a4e-49f8-4e67-a513-6219d087e747"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6496), null, null, false, null, null, "CIRCULAR ON SERVICE DELIVERY BY PENSION FUND ADMINISTRATORS" },
                    { new Guid("12418cf1-0592-49ac-96b2-eb27bf63ca96"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6509), null, null, false, null, null, "GUIDELINE FOR APPOINTMENT TO BOARD AND TOP MANAGEMENT POSITIONS IN PFAs AND PFCs" },
                    { new Guid("17488d81-13f9-4cf1-bfb9-931191142061"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6499), null, null, false, null, null, "CODE OF CORPORATE GOVERNANCE" },
                    { new Guid("189a4456-930e-4a59-b721-b698d448775c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6497), null, null, false, null, null, "CIRCULAR ON STANDARDIZATION OF ANNUAL TOTAL EMOLUMENTS FOR THE COMPUTATION OF RETIREMENT BENEFITS" },
                    { new Guid("191ca6ae-a827-4b40-8798-af53ff64e14f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6498), null, null, false, null, null, "CIRCULAR ON THE IMPORTANCE OF TRAINING FOR STAFF OF PENSION FUND OPERATORS" },
                    { new Guid("1ad9ae19-60ce-4712-84dc-fe55e1b88c3b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6481), null, null, false, null, null, "FINANCIAL REPORTINNG COUNCIL OF NIGERIA ACT 2011" },
                    { new Guid("1b244041-2bfb-4158-8251-6599f66d3302"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6485), null, null, false, null, null, "PAY AS YOU EARN (PAYE)" },
                    { new Guid("20b7b8e7-ebfb-4e30-a35c-ef0cc4878188"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6464), null, null, false, null, null, "LABOUR ACT" },
                    { new Guid("2163d6c4-f924-4698-839f-654ec59e7284"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6490), null, null, false, null, null, "VALUE ADDED TAX LFN 2004" },
                    { new Guid("21c301ca-73a5-4def-800b-27987416b42c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6527), null, null, false, null, null, "GUIDELINES ON DIRECT REAL ESTATE INVESTMENTS BY CLOSED PENSION FUND ADMINISTRATORS AND APPROVED EXISTING SCHEMES" },
                    { new Guid("27688539-e496-4a50-89a8-8b842aeacfd9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6525), null, null, false, null, null, "GUIDELINES FOR THE TRANSFER OF NSITF CONTRIBUTIONS INTO EMPLOYEES RETIREMENT SAVINGS ACCOUNT" },
                    { new Guid("2a93b173-23a6-4530-b447-98b1ce499bf7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6518), null, null, false, null, null, "GUIDELINES FOR THE APPOINTMENT OF PENSION FUND CUSTODIANS FOR STATE GOVERNMENT AND RETIREE FUNDS" },
                    { new Guid("30c07d3f-8f36-41de-87e9-bc1071d434d5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6520), null, null, false, null, null, "GUIDELINES FOR THE OPERATIONS OF PENSION TRANSITIONAL ARRANGEMENT DEPARTMENTS" },
                    { new Guid("3454dc14-648d-4c68-8279-0b82585618ac"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6468), null, null, false, null, null, "PENSION REFORM ACT 2004" },
                    { new Guid("3d03d9e4-4026-41f4-98e0-ee15d5d37907"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6535), null, null, false, null, null, "MINIMUM INFORMATION TO BE POSTED ON A PFAs WEBSITE" },
                    { new Guid("3e58ddd8-da9b-47b5-800c-f97a606c438f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6512), null, null, false, null, null, "GUIDELINES FOR CROSS BOARDER ARRANGEMENTS UNDER PENSION REFORM ACT" },
                    { new Guid("43cf07e6-8956-4b21-9b13-4d931e6a77b2"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6494), null, null, false, null, null, "CIRCULAR ON PAYMENT OF ACCRUED PRE-PENSION REFORM BENEFITS MAY 2011" },
                    { new Guid("53e6317c-f579-4ca4-a6dd-77dce9473d01"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6541), null, null, false, null, null, "REGULATIONS ON COMPLIANCE OFFICERS" },
                    { new Guid("57c7047e-c1c5-4323-9b26-72d8560499f4"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6488), null, null, false, null, null, "PERSONAL INCOME TAX ACT LFN 2004" },
                    { new Guid("59138bb0-e094-48eb-b5ec-4cd2aa3f9db3"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6495), null, null, false, null, null, "CIRCULAR ON REQUIREMENTS FOR PFAs WITH FUNDS UNDER MANAGEMENT OF N100 BILLION & ABOVE AND NEW REQUIREMENTS FOR APPOINTMENTS TO BOARD AND TOP MANAGEMENT POSITIONS OF ALL PFAs" },
                    { new Guid("594b2f82-13d1-4a70-b45a-47b85daffb8d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6542), null, null, false, null, null, "SECURITIES AND EXCHANGE COMMISSION RULES AND REGULATIONS 2013" },
                    { new Guid("596f7f2e-0e82-46ff-b11e-7b8a27e03983"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6516), null, null, false, null, null, "GUIDELINES FOR THE ADMINISTRATION OF STATE FUNDS DEDUCTED AT SOURCE UNDER THE CONTRIBUTORY PENSION SCHEME" },
                    { new Guid("5c923578-67d4-4e86-ae34-a28036056a7b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6537), null, null, false, null, null, "REGULATION ON INVESTMENT OF PENSION FUND ASSETS" },
                    { new Guid("63d58047-074e-439a-b244-b50a2d216c88"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6533), null, null, false, null, null, "INCLUSION OF GROUP LIFE INSURANCE POLICY FOR EMPLOYEES: FURTHER STEPS TO IMPROVE COMPLIANCE" },
                    { new Guid("66ad68b7-2f5e-4be4-9f7c-e30695022ded"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6539), null, null, false, null, null, "REGULATIONS FOR AUDITING PENSION FUNDS" },
                    { new Guid("6abca7e0-03cf-40f8-831e-1f3503322e42"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6526), null, null, false, null, null, "GUIDELINES FOR TRANSITIONAL CONTRIBUTIONS FUND" },
                    { new Guid("885c060b-eea9-4d86-b163-f28c60e66736"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6470), null, null, false, null, null, "COMPANIES AND ALLIED MATTERS ACT LFN 2004" },
                    { new Guid("91525b64-1cb5-42e9-82eb-034ed057d7e0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6519), null, null, false, null, null, "GUIDELINES FOR THE OPERATIONS OF PENSION FUND CUSTODIANS" },
                    { new Guid("9171c80a-d862-4254-b6e7-a488124a2979"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6484), null, null, false, null, null, "NATIONAL YOUTH SERVICE CORPS ACT" },
                    { new Guid("92508225-4b55-4fd1-b32c-e069d107a554"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6475), null, null, false, null, null, "EMPLOYEES COMPENSATION ACT" },
                    { new Guid("9b6f45a5-744b-43eb-aaf5-5dcc65974fa0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6513), null, null, false, null, null, "GUIDELINES FOR LIFE INSURANCE POLICY FOR EMPLOYEES" },
                    { new Guid("9deda427-c40d-4e08-9cba-227444dedbde"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6523), null, null, false, null, null, "GUIDELINES FOR THE OPERATIONS OF PFAS" },
                    { new Guid("a28cac7e-cbe2-4950-83ad-cbadc060c86c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6472), null, null, false, null, null, "COMPANIES INCOME TAX (RATE etc OF TAX DEDUCTED AT SOURCE (WITHOLDING TAX) REGULATIONS 1977" },
                    { new Guid("a55cdcc2-aef2-40bb-97ed-97ed0cd31909"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6524), null, null, false, null, null, "GUIDELINES FOR THE PUBLICATION OF RATES OF RETURN ON RSA FUNDS BYPENSION FUND ADMINISTRATORS" },
                    { new Guid("bf3b070f-2883-40ea-b573-cecabbeb77f9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6491), null, null, false, null, null, "CIRCULAR ON MINIMUM REQUIREMENTS FOR OPENING BRANCHES" },
                    { new Guid("bf3c448d-5602-4aa9-b94e-3e36cdcb337b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6501), null, null, false, null, null, "CODE OF ETHICS & BUSINESS PRACTICES" },
                    { new Guid("c5dae39f-b49d-4a24-86f4-e83544fc5e47"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6487), null, null, false, null, null, "PERSONAL INCOME TAX (RATE etc OF TAX DEDUCTED AT SOURCE (WITHHOLDING TAX REGULATION) 1997" },
                    { new Guid("c83f0df5-a41b-4296-a185-14b423473122"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6474), null, null, false, null, null, "COMPANIES INCOME TAX ACT LFN 2004" },
                    { new Guid("d72c7077-df45-4f41-95b2-b1f48a25de30"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6543), null, null, false, null, null, "WHISTLE BLOWING GUIDELINES FOR PENSIONS" },
                    { new Guid("e7563613-5933-4c0a-bded-728e3e2b9835"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6540), null, null, false, null, null, "REGULATIONS FOR THE ADMINISTRATION OF RETIREMENT AND TERMINAL BENEFITS" },
                    { new Guid("ed229bfb-b639-401f-95f8-a267adceefff"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6517), null, null, false, null, null, "GUIDELINES FOR THE APPOINTMENT OF PENSION FUND ADMINISTRATORS AND CUSTODIANS FOR EXISTING PENSION SCHEMES" },
                    { new Guid("f3e71ebf-7fcf-4af3-90ed-332de74e9601"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6514), null, null, false, null, null, "GUIDELINES FOR RISK MANAGEMENT FRAMEWORK FOR LICENSED OPERATORS" },
                    { new Guid("f3eab0ba-f3fd-4e89-8716-ab23699e1159"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 507, DateTimeKind.Utc).AddTicks(6483), null, null, false, null, null, "INVESTMENT & SECURITIES ACT 2007" }
                });

            migrationBuilder.InsertData(
                table: "RecoveryType",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name" },
                values: new object[,]
                {
                    { new Guid("64c5f5ee-ff08-4c03-914b-57c7e01b391e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 504, DateTimeKind.Utc).AddTicks(3920), null, false, null, null, "recovery1" },
                    { new Guid("c359ee33-8b9f-4543-8750-2738d0ea9ae1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 504, DateTimeKind.Utc).AddTicks(3923), null, false, null, null, "recovery2" }
                });

            migrationBuilder.InsertData(
                table: "RiskDriver",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name" },
                values: new object[,]
                {
                    { new Guid("27781fcf-bf63-4ac4-8ab5-c8530ab68abc"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(4732), null, false, null, null, "ExternalEvents" },
                    { new Guid("36507944-db19-40a0-ac53-5c70c5f4007d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(4730), null, false, null, null, "Systems" },
                    { new Guid("df0bcdd9-2a59-4de2-b061-63e193c5965e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(4728), null, false, null, null, "Process" },
                    { new Guid("f6ec7b08-f46f-4e00-a589-f15b3b24028d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(4724), null, false, null, null, "People" }
                });

            migrationBuilder.InsertData(
                table: "RiskEffectCategory",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name" },
                values: new object[,]
                {
                    { new Guid("0981a194-a892-4bf1-a1b6-6fc2b2d05179"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8331), null, false, null, null, "Legal Liability" },
                    { new Guid("0d10ce84-e13f-4382-bd2b-33ada6a06611"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8345), null, false, null, null, "Write-down" },
                    { new Guid("129b52a1-5377-4dcf-adb5-4c632c6914a4"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8347), null, false, null, null, "Reputational Loss" },
                    { new Guid("32dcd0e2-c225-4fc0-a7e2-ddf1a1fa3be7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8346), null, false, null, null, "Outsourcing / Vendor Costs" },
                    { new Guid("893e9d12-5edf-4bf2-92fa-b8e8ae4b131e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8343), null, false, null, null, "Restitution" },
                    { new Guid("966c0c30-a3bf-43ff-b1a9-d1ed28da5f06"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8344), null, false, null, null, "Loss of Recourse" },
                    { new Guid("aab97ed2-4af4-45e8-9a52-aa22b14cef05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8341), null, false, null, null, "Loss or Damage to Assets" },
                    { new Guid("c3c4b244-5540-494f-8318-701cb0b26348"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8333), null, false, null, null, "Regulatory Action" },
                    { new Guid("cc0bf87d-c037-4483-bc62-0304f510b36a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 496, DateTimeKind.Utc).AddTicks(8347), null, false, null, null, "Reduced operational capacity" }
                });

            migrationBuilder.InsertData(
                table: "RiskEventType",
                columns: new[] { "ID", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "NAME" },
                values: new object[,]
                {
                    { new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(615), null, false, null, null, "Clients, Products and Business Practices" },
                    { new Guid("33aadbfc-fa8a-448a-93d4-0c57e1618bd3"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(604), null, false, null, null, "Internal Fraud" },
                    { new Guid("468f18e4-d9be-49a9-af61-00556b1eb6e8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(617), null, false, null, null, "Business Disruption and System Failures" },
                    { new Guid("92fb8ba9-3b62-4d6a-acb1-a4111b2196ad"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(611), null, false, null, null, "External Fraud" },
                    { new Guid("ac12cf01-4e9b-4cd0-b578-9e1016a3e4c1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(616), null, false, null, null, "Disasters and Other Events" },
                    { new Guid("b0fdd290-1ebf-4a08-803f-07a69d349b4d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(619), null, false, null, null, "Execution, Delivery and Process Management" },
                    { new Guid("d47bd1f5-c11e-4f25-9854-e028a566db5c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 506, DateTimeKind.Utc).AddTicks(613), null, false, null, null, "Employment Practices and Workplace Safety" }
                });

            migrationBuilder.InsertData(
                table: "UserRole",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name" },
                values: new object[,]
                {
                    { new Guid("4d94774a-bd57-491a-bcec-b1e6c547bb4b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 511, DateTimeKind.Utc).AddTicks(9442), null, false, null, null, "RiskChampion" },
                    { new Guid("6d834a22-463e-4553-a2ac-030b1a21f88b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 511, DateTimeKind.Utc).AddTicks(9432), null, false, null, null, "UnitHead" },
                    { new Guid("8d667eed-04db-481c-9ae0-1c7e614e4507"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 511, DateTimeKind.Utc).AddTicks(9429), null, false, null, null, "Admin" },
                    { new Guid("9998f0e2-81ba-4c0b-96b2-419b8040a47d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 511, DateTimeKind.Utc).AddTicks(9445), null, false, null, null, "OtherComplianceUser" },
                    { new Guid("a8cac012-b665-481a-8028-90ed1c4226f9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 511, DateTimeKind.Utc).AddTicks(9444), null, false, null, null, "Staff" },
                    { new Guid("e8a6dd2a-a84f-4061-a772-318ff57ed62c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 511, DateTimeKind.Utc).AddTicks(9446), null, false, null, null, "ComplianceOfficer" }
                });

            migrationBuilder.InsertData(
                table: "Department",
                columns: new[] { "Id", "BusinessEntityId", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name" },
                values: new object[,]
                {
                    { new Guid("00805aae-25cb-4540-83a4-5f8891e6687a"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9823), null, false, null, null, "Coporate Transformation Unit" },
                    { new Guid("013f1c1f-994f-4178-a82a-98293abf3fd9"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9795), null, false, null, null, "Corporate Strategy" },
                    { new Guid("01b5cda8-819c-49d6-ac53-d6d38fde3b99"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(74), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("02eb6692-18d6-49cd-9404-1225dfe8bcc1"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9809), null, false, null, null, "Finance / Treasury" },
                    { new Guid("0529a58d-3fec-47d9-baf0-5f588014ab1d"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9749), null, false, null, null, "ARM Academy" },
                    { new Guid("07a11106-3e41-417e-bc54-7f29a335c51e"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9825), null, false, null, null, "Administration" },
                    { new Guid("08679d84-cd66-4415-85ea-c4ceb9fdc008"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9696), null, false, null, null, "Information Technology" },
                    { new Guid("098ddce3-8aea-42d3-a3aa-e2c7b3a40bbe"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9872), null, false, null, null, "Finance / Treasury" },
                    { new Guid("0b6029b0-97b5-4dcb-af24-ea214143b795"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9853), null, false, null, null, "ARM Academy" },
                    { new Guid("0d7ec4b9-58ff-4dd1-b29c-9bf526cae665"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9771), null, false, null, null, "Customer Experience" },
                    { new Guid("0dbc7eba-bc38-4b8d-af59-92769cd22afc"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9676), null, false, null, null, "Corporate Strategy" },
                    { new Guid("0eb79555-2e7e-4e98-95a3-8b09e35c8f65"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9833), null, false, null, null, "Legal & Compliance" },
                    { new Guid("1107ea36-29cd-48ec-9e71-0867a3248d45"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9674), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("15c808a9-658c-4a88-885a-59654f6d376f"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(22), null, false, null, null, "Crosstown Iju" },
                    { new Guid("16201b11-7d0d-4d2c-a632-4408439672da"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9982), null, false, null, null, "Summerville / Lakowe" },
                    { new Guid("1ac6a090-f8d8-4c57-b604-036f61257463"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9870), null, false, null, null, "ARM Agricbusiness Fund Manager Ltd" },
                    { new Guid("1b733991-ba99-460e-96eb-f2e669afb4e2"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9709), null, false, null, null, "ARM Academy" },
                    { new Guid("1bab317b-253a-4b3d-b5c6-21f1ea4e95b5"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(78), null, false, null, null, "Coporate Transformation Unit" },
                    { new Guid("1bc03880-d977-40df-b4f7-02b031cf7a13"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9761), null, false, null, null, "Human Capital Management" },
                    { new Guid("1ef96ef9-a51f-4632-8aa1-eb844abce381"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9888), null, false, null, null, "Administration" },
                    { new Guid("203a95e8-1dbb-4957-ad3d-e2199facd3df"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9860), null, false, null, null, "Corporate Strategy" },
                    { new Guid("203d9306-73ee-4f90-b4b5-84da8c23d7f4"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9812), null, false, null, null, "Information Technology" },
                    { new Guid("26f0bc25-7466-46ba-b420-215d49d37ccf"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9784), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("27446c0d-a9af-471f-8a83-7e9a31ade74d"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(51), null, false, null, null, "Human Capital Management" },
                    { new Guid("29f35a84-0491-415e-9583-0acc53696230"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9973), null, false, null, null, "Corporate Strategy" },
                    { new Guid("2a650f64-bb8c-4529-a02c-d9e6ded8dd77"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9747), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("2b4a09bb-d50b-4af2-b635-b7df21581795"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9882), null, false, null, null, "ARM Academy" },
                    { new Guid("2bcee133-d95c-4662-b71a-40197ae725a0"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9689), null, false, null, null, "Back Office Operations" },
                    { new Guid("2c04365f-3fd6-491d-9ef1-13751fbe8b32"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9891), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("2cd5e5f8-67c2-4216-9684-2550888f86d1"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9862), null, false, null, null, "Legal & Compliance" },
                    { new Guid("2dbd67f5-a20d-4ce7-a147-707e1e8bc31d"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(49), null, false, null, null, "Legal & Compliance" },
                    { new Guid("322bd236-2e60-409a-86e6-835c2689015f"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9651), null, false, null, null, "Back Office Operations" },
                    { new Guid("32bc8c7e-cb36-42f0-88f3-96da17bc5b80"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(26), null, false, null, null, "Finance / Treasury" },
                    { new Guid("332e2c96-7873-4e7e-a417-855c6cf61512"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9745), null, false, null, null, "Project Management Office" },
                    { new Guid("3495caee-2674-4590-a0b1-05ed02f7c5d3"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(68), null, false, null, null, "Information Technology" },
                    { new Guid("36b7af25-5670-422b-a961-d19591210791"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9994), null, false, null, null, "Mixta Nigeria Operations" },
                    { new Guid("374cc2c3-1692-4211-a438-9c84f096c998"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9737), null, false, null, null, "Finance / Treasury" },
                    { new Guid("3b4b6872-94ef-45c4-93de-39a35fbce365"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9765), null, false, null, null, "Commercial Trust" },
                    { new Guid("3bcf36b7-e55e-4f3e-8edc-4c537f74d9d1"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9752), null, false, null, null, "Administration" },
                    { new Guid("3da5a658-20b1-4c7d-9817-669807b26cb3"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9672), null, false, null, null, "Administration" },
                    { new Guid("40a08501-139d-4f64-9ceb-d4746af51fb1"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9699), null, false, null, null, "Risk Management" },
                    { new Guid("428fa69d-36cf-4fd3-9bba-d4a45dff366b"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9729), null, false, null, null, "Proprietary and Principal Transactions" },
                    { new Guid("43074297-ed5e-465c-be08-3a681e4404bf"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9669), null, false, null, null, "ARM Academy" },
                    { new Guid("44d0991b-952e-4c8f-ba3e-3290fe2606be"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(64), null, false, null, null, "Business Support" },
                    { new Guid("44dc2e6a-def4-4fa1-a130-5e755ff04522"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(13), null, false, null, null, "Oakland Limited" },
                    { new Guid("45cdfa60-9130-49ed-9fdf-845f34eca48b"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9778), null, false, null, null, "Information Technology" },
                    { new Guid("464713f9-0a6a-4da1-b5b9-ccd01200fa13"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9842), null, false, null, null, "Business Support" },
                    { new Guid("4b242a25-387f-4193-9d1f-04e715479802"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9713), null, false, null, null, "Coporate Transformation Unit" },
                    { new Guid("4ee4f005-2ab1-43a9-a714-78649319e467"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9819), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("4ef41c3b-77f4-41e8-89ce-05869eb3fac8"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9743), null, false, null, null, "Risk Management" },
                    { new Guid("4efd2543-e778-4610-b003-c7dd46c91920"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9986), null, false, null, null, "Hospitality and Retail Management" },
                    { new Guid("500cd5ee-7fac-4285-80d3-9e3a86869ba2"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(82), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("51850e25-0a19-4bfa-9cee-b3ea1cd09ec1"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(15), null, false, null, null, "Lakowe Lakes Golf Club Ltd" },
                    { new Guid("52353d55-0c2c-48b8-b8fe-67c4c76380c0"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9692), null, false, null, null, "Finance / Treasury" },
                    { new Guid("52e9802f-2408-435f-9f5f-5d4a10de82bf"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9786), null, false, null, null, "ARM Academy" },
                    { new Guid("53c3f01b-9c1d-435a-8f98-59a2f16f91c6"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9874), null, false, null, null, "Information Technology" },
                    { new Guid("54fe23d5-e9fc-4ec2-82d6-f294ae6aba1f"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9797), null, false, null, null, "Legal & Compliance" },
                    { new Guid("57bdc355-223c-471e-b5d1-a9381721e815"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9978), null, false, null, null, "Human Capital Management" },
                    { new Guid("5ba71bd0-7831-44f4-be2b-b4894ecd17df"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9661), null, false, null, null, "Risk Management" },
                    { new Guid("5c23a138-65a5-4c07-9dc1-1fc581abeba1"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9727), null, false, null, null, "Human Capital Management" },
                    { new Guid("5d470b46-3059-4868-b413-f84c6b73f38d"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9756), null, false, null, null, "Corporate Strategy" },
                    { new Guid("5f813a8d-b1f6-4271-a8f1-1fe8da637b31"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(24), null, false, null, null, "Business Planning" },
                    { new Guid("62645a9d-45d7-4470-95d3-30e12c649e5d"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(32), null, false, null, null, "Risk Management" },
                    { new Guid("657ba2bd-1ca7-47f9-9518-b09103df8000"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9663), null, false, null, null, "Project Management Office" },
                    { new Guid("67f97d9b-6a96-431f-a6ee-080e58220b8d"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(38), null, false, null, null, "Corporate Transformation Unit" },
                    { new Guid("694ecc27-72e5-4aba-bf1b-d169e3c82eeb"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9868), null, false, null, null, "Information Security" },
                    { new Guid("6a5cdada-9119-496c-92b1-051ad5794c7e"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9782), null, false, null, null, "Project Management Office" },
                    { new Guid("6b930a61-222f-445a-b3dc-b38c7b9465a8"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9886), null, false, null, null, "Coporate Transformation Unit" },
                    { new Guid("6dcf8606-8ba4-4310-8acc-2a6ad3e7ff57"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9767), null, false, null, null, "Investment Management" },
                    { new Guid("6f4bde6b-21ac-4631-b7da-0d3bd0ce2a95"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(89), null, false, null, null, "Legal and Compliance" },
                    { new Guid("7222488c-5f14-4d9f-9d53-d1cf0ee621f4"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9763), null, false, null, null, "Private Trust" },
                    { new Guid("7252a7d7-b535-4461-82c8-10ce3cda075f"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9976), null, false, null, null, "Legal & Compliance" },
                    { new Guid("74ea2a08-c9e4-4d76-853c-fea704def351"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9702), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("74ed3363-3053-4e12-afda-8aa3a9ba5394"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(43), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("7503c8dc-27d2-4364-92f4-086444244e47"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9788), null, false, null, null, "Coporate Transformation Unit" },
                    { new Guid("769375cb-e998-4055-a75f-58a9039a8229"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9878), null, false, null, null, "Project Management Office" },
                    { new Guid("76b853d0-f625-4e48-bdcd-5cfb930ff181"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9649), null, false, null, null, "ARM Financial Advisers" },
                    { new Guid("778caba2-5bc9-44e7-ab17-74fcf528d9e7"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9750), null, false, null, null, "Coporate Transformation Unit" },
                    { new Guid("7ad4c706-19c0-4e01-a9b5-1686059e0180"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9725), null, false, null, null, "Legal & Compliance" },
                    { new Guid("7be57b73-24b7-4e03-8c75-ba06181ac887"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc), null, false, null, null, "Design & Construction" },
                    { new Guid("7e9ed9b4-f4cc-4ae3-800f-dc2e0b614f8f"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(72), null, false, null, null, "Project Management Office" },
                    { new Guid("7eee5e9e-f47d-4f90-bc9c-b8502f55298f"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9815), null, false, null, null, "Risk Management" },
                    { new Guid("7f042f8c-2e1c-410b-9892-525d3cdc7bcc"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9821), null, false, null, null, "ARM Academy" },
                    { new Guid("81b3631c-84bd-4357-8919-ce9a18c42720"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9684), null, false, null, null, "Investment Management" },
                    { new Guid("83f8177c-f3a4-4766-85ee-415608202a64"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(91), null, false, null, null, "Human Capital Management" },
                    { new Guid("86bfe07d-57d0-4c7e-b778-6c4b3967ba49"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(53), null, false, null, null, "Digital Financial Services" },
                    { new Guid("8948b589-f3d6-4166-9c85-083eccf50ef0"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9880), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("8bcaabe1-68e8-48d9-993c-037bb38b1a0c"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(59), null, false, null, null, "Customer Experience" },
                    { new Guid("8c756839-450f-4ba7-bb42-aa26399d452f"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(45), null, false, null, null, "Corporate Strategy" },
                    { new Guid("8c800862-9634-44b8-b597-5273d8f025d5"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9847), null, false, null, null, "Project Management Office" },
                    { new Guid("8c9b5665-1e3b-45c5-8f08-1d4836487b12"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9733), null, false, null, null, "Back Office Operations" },
                    { new Guid("8d7eedf4-3714-4ab6-bd81-c6d87058407b"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(70), null, false, null, null, "Risk Management" },
                    { new Guid("8de5a8ea-0f58-494f-b022-8a403e34d840"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9837), null, false, null, null, "Customer Experience" },
                    { new Guid("92708b32-f123-452e-9589-8d191e51f524"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9827), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("95fa75c8-5e83-4696-a739-bec98c3bd9ea"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9846), null, false, null, null, "Risk Management" },
                    { new Guid("9790b206-c748-48d8-8e3d-92e1848d181b"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(36), null, false, null, null, "ARM Academy" },
                    { new Guid("97966912-7879-4358-b802-c71cfd610871"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(2), null, false, null, null, "Adiva" },
                    { new Guid("9c2b6429-7224-4b41-9078-24ec7f29619d"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(11), null, false, null, null, "TSD Ltd" },
                    { new Guid("9e8c92bb-3e4b-4dc7-a5e6-bb3a8562b3d3"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(61), null, false, null, null, "Finance / Treasury" },
                    { new Guid("9f6edbba-294b-4526-9175-e8ec4950a564"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9759), null, false, null, null, "Legal & Compliance" },
                    { new Guid("a30367f4-d362-4f4d-b8f9-0ddf8446d02e"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9996), null, false, null, null, "Technical / Projects" },
                    { new Guid("a307d88a-0271-4630-a127-e15b01d4fb0d"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(76), null, false, null, null, "ARM Academy" },
                    { new Guid("a39a7edb-e4d2-4bd1-959c-9a82b03ded14"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9731), null, false, null, null, "HoldCo Sales" },
                    { new Guid("a8e98921-579a-4824-9bb8-ec5f4254b32c"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(18), null, false, null, null, "Townsville" },
                    { new Guid("aadf66e4-2e68-42dc-9fee-dfc99e037236"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9722), null, false, null, null, "Corporate Strategy" },
                    { new Guid("b36eff41-501d-463f-b764-b7998a4d039e"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9671), null, false, null, null, "Coporate Transformation Unit" },
                    { new Guid("b3dd1e0b-7fb0-41e7-ac57-a7dc6fd35190"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9739), null, false, null, null, "Information Technology" },
                    { new Guid("b425cf7c-40b2-4419-89df-8bc891b2e15e"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9735), null, false, null, null, "Customer Experience" },
                    { new Guid("b56de526-2e34-41c7-9cd3-3e38408404d2"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9773), null, false, null, null, "Finance / Treasury" },
                    { new Guid("bb58cf62-0d7a-4738-be3f-5bb05bb2d54d"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9859), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("bb950e8a-57d5-4795-b027-7ef594142df2"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(5), null, false, null, null, "Beechwood" },
                    { new Guid("be805504-2141-44dd-b6f3-0718142df7ae"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9659), null, false, null, null, "Information Technology" },
                    { new Guid("c005c30e-ebc3-4ec1-a1b3-0d23f4d06b60"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(20), null, false, null, null, "Farapark" },
                    { new Guid("c08d35a4-8107-4d76-8c7a-cc588b5ff552"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(30), null, false, null, null, "Information Technology" },
                    { new Guid("c19e5f07-3325-447e-a0b8-ab67aaba1390"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9855), null, false, null, null, "Coporate Transformation Unit" },
                    { new Guid("c55dd501-c81a-40d6-a087-c0db735c280c"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9998), null, false, null, null, "Facility Management" },
                    { new Guid("c5cc333f-018a-4f43-9a77-1b3d2a8b565e"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9686), null, false, null, null, "Business Development" },
                    { new Guid("c5fdcbd4-7c92-4838-90e4-1d22f52d596e"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(80), null, false, null, null, "Administration" },
                    { new Guid("c76cf258-40da-497b-b3ca-5035438c23c5"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9790), null, false, null, null, "Administration" },
                    { new Guid("c7db68c2-9dd0-429d-bdad-dbd5af1a1978"), new Guid("7c6d5b40-7673-48a1-9485-19ff94961c70"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9876), null, false, null, null, "Risk Management" },
                    { new Guid("cc56bbaa-4c91-45a8-bd01-276b89a49028"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9801), null, false, null, null, "ARM Harith Infrastructure Investment Ltd" },
                    { new Guid("cee03620-24b8-4293-bf43-03d8d0e570d5"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9769), null, false, null, null, "Back Office Operations" },
                    { new Guid("d02e7cc9-5cae-4590-9ada-7e01e2eb0721"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9638), null, false, null, null, "Research" },
                    { new Guid("d035fddb-c8b1-46ac-bad0-0c6433c32a96"), new Guid("7e222ca0-5e9b-4a55-8c17-2e9b0de78641"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9754), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("d05f8a34-201b-458e-af3f-d546aa51ba93"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(7), null, false, null, null, "Greater Port Harcour Golf Club" },
                    { new Guid("d2f7a060-2f44-4714-98bb-f03741d918d2"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9655), null, false, null, null, "Customer Experience" },
                    { new Guid("d6601e9a-645c-4b34-86fd-96379b4cda73"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9857), null, false, null, null, "Administration" },
                    { new Guid("d6718e8a-104b-4fbc-a48d-1e5d6f9d12d1"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9835), null, false, null, null, "Human Capital Management" },
                    { new Guid("d6f89132-a0c8-4ffe-9d31-438a62821397"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9803), null, false, null, null, "Customer Experience" },
                    { new Guid("d9955013-91b9-4200-897e-cb3cc9ec45aa"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(34), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("d9b9f300-6378-4d18-b511-36b88d40cdb2"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9793), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("db791aa9-d9b5-435c-aa4f-efd668a6fe62"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9701), null, false, null, null, "Project Management Office" },
                    { new Guid("db8cd93a-2aee-465c-aee1-ebc408ad3501"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9657), null, false, null, null, "Finance / Treasury" },
                    { new Guid("dfe3332e-0098-412b-bcd6-9599bef354ea"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9864), null, false, null, null, "Human Capital Management" },
                    { new Guid("e0649b38-ae55-4664-9b1e-07c93d4d0c47"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9678), null, false, null, null, "Legal & Compliance" },
                    { new Guid("e082844a-52c9-4719-a2da-a10cf49f82e6"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9817), null, false, null, null, "Project Management Office" },
                    { new Guid("e29ab0a4-f3d8-4ee6-a03e-acba120fd7cc"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(55), null, false, null, null, "Investment Management" },
                    { new Guid("e2ed9446-64f8-4150-abf0-2e170136c6aa"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9653), null, false, null, null, "Trading / Bokerage" },
                    { new Guid("e31ff356-9785-4e9f-ab1c-018b4bc65483"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9851), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("e7ca403b-763d-4bc2-9ba9-ddf0c07db0f0"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9691), null, false, null, null, "Customer Experience" },
                    { new Guid("ea5061d7-5ff1-419b-aa65-3f6e820d215b"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9680), null, false, null, null, "Human Capital Management" },
                    { new Guid("ebb477e8-093d-47f2-baf0-cd77f2884705"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9777), null, false, null, null, "Business Support" },
                    { new Guid("efcc9848-f2b7-43f3-a5a5-880ff82af57f"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(41), null, false, null, null, "Administration" },
                    { new Guid("f1baaf91-b927-4ed0-ae14-9446760caf96"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9719), null, false, null, null, "Marketing and Corporate Communications" },
                    { new Guid("f27e8e75-fbbc-49e0-b7a5-48d3772c170c"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9839), null, false, null, null, "Finance / Treasury" },
                    { new Guid("f28ded07-03e1-4706-a28f-fad22856265c"), new Guid("5a188edb-7c0e-4881-8a39-59e40c36ab05"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9830), null, false, null, null, "Corporate Strategy" },
                    { new Guid("f3506495-7e1a-41b1-ae2a-4bedd308c2b1"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(57), null, false, null, null, "Back Office Operations" },
                    { new Guid("f3a518ad-7fd9-4b61-8329-d5202365376a"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9799), null, false, null, null, "Human Capital Management" },
                    { new Guid("f56e3da6-b318-4ade-89e4-f6d03aec0973"), new Guid("a2c4abe1-90bf-417d-a390-ad158c191c5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 498, DateTimeKind.Utc).AddTicks(86), null, false, null, null, "Corporate Strategy" },
                    { new Guid("f5bbaf6f-6593-4b31-87fa-8704088ecff3"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9687), null, false, null, null, "Retail Sales" },
                    { new Guid("f5bdf107-f9c6-4c13-b41f-b1ba55568906"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9716), null, false, null, null, "Administration" },
                    { new Guid("f6c2a424-bf74-4f64-a6ea-eb1466730bf1"), new Guid("0ca1b490-11d5-4e58-9289-e3eecefbdb9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9694), null, false, null, null, "Business Support" },
                    { new Guid("fa7d1d89-8a78-49ec-86fd-7ec5310a2545"), new Guid("8497da34-5cac-46dd-bad0-efcc4bcb3656"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9844), null, false, null, null, "Information Technology" },
                    { new Guid("fbe396d7-8f37-4344-8767-6a1e343c73ad"), new Guid("517f4870-0546-4ab6-a83a-24eb2bc7eb93"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9780), null, false, null, null, "Risk Management" },
                    { new Guid("fcf19754-f07e-41c0-8a3f-bd135f93c40f"), new Guid("50987439-cf5a-4356-8dec-55a845974076"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9667), null, false, null, null, "Internal Control / Internal Audit" },
                    { new Guid("fd320c62-42b4-430d-bab5-accbb1f501c5"), new Guid("3c8cc6b3-1c41-47df-800f-3588c3251fb9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 497, DateTimeKind.Utc).AddTicks(9980), null, false, null, null, "Mixta Nigeria Sales" }
                });

            migrationBuilder.InsertData(
                table: "RiskDriverCategory",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name", "RiskDriverId" },
                values: new object[,]
                {
                    { new Guid("00a54610-0522-4313-ac74-d39f550ff600"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2414), null, false, null, null, "Data protection", new Guid("36507944-db19-40a0-ac53-5c70c5f4007d") },
                    { new Guid("037fef6e-a151-422e-be74-89efe99f6f6f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2398), null, false, null, null, "Adequacy of procedures", new Guid("df0bcdd9-2a59-4de2-b061-63e193c5965e") },
                    { new Guid("2094ab76-2766-4a88-9a45-fd5444570151"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2405), null, false, null, null, "System security", new Guid("36507944-db19-40a0-ac53-5c70c5f4007d") },
                    { new Guid("237bec3d-cee6-4134-a49c-df772ee78d2d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2422), null, false, null, null, "Client / customer relations", new Guid("27781fcf-bf63-4ac4-8ab5-c8530ab68abc") },
                    { new Guid("25302c84-c975-45f7-a46e-f9b0dd286b5c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2415), null, false, null, null, "Outsourcing", new Guid("27781fcf-bf63-4ac4-8ab5-c8530ab68abc") },
                    { new Guid("269387bf-03b1-4b60-95fc-a62977783334"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2395), null, false, null, null, "Quality of controls", new Guid("df0bcdd9-2a59-4de2-b061-63e193c5965e") },
                    { new Guid("47c33a55-b546-4f6e-a47d-7afdfcbc4594"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2420), null, false, null, null, "Social, and natural environment", new Guid("27781fcf-bf63-4ac4-8ab5-c8530ab68abc") },
                    { new Guid("4a0e5abf-d42b-45a7-a98a-8d5dfba25983"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2417), null, false, null, null, "Regulatory", new Guid("27781fcf-bf63-4ac4-8ab5-c8530ab68abc") },
                    { new Guid("4ab36063-c149-4e0f-80c3-0fa76c8fa24c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2400), null, false, null, null, "System adequacy", new Guid("36507944-db19-40a0-ac53-5c70c5f4007d") },
                    { new Guid("5fa8e2a4-6d28-4cab-93bf-5a4d13ca66c8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2397), null, false, null, null, "Roles and responsibilities", new Guid("df0bcdd9-2a59-4de2-b061-63e193c5965e") },
                    { new Guid("96912526-6283-4f3c-9079-769b5d08f06d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2407), null, false, null, null, "System Complexity", new Guid("36507944-db19-40a0-ac53-5c70c5f4007d") },
                    { new Guid("a5296a9f-bda3-4971-8796-8b8e262612bf"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2372), null, false, null, null, "Skills", new Guid("f6ec7b08-f46f-4e00-a589-f15b3b24028d") },
                    { new Guid("acda7790-6767-47b1-bee3-87566c8f6e04"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2389), null, false, null, null, "Industrial Action", new Guid("f6ec7b08-f46f-4e00-a589-f15b3b24028d") },
                    { new Guid("aee0a8ca-a49a-4ee4-b13f-10ae36b6788a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2419), null, false, null, null, "Legal", new Guid("27781fcf-bf63-4ac4-8ab5-c8530ab68abc") },
                    { new Guid("b528e800-47df-42c5-993c-c0b0ae1fff7f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2380), null, false, null, null, "Capacity", new Guid("f6ec7b08-f46f-4e00-a589-f15b3b24028d") },
                    { new Guid("c8892fdd-4b7e-499f-8a80-9b7c1ec9f6c2"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2391), null, false, null, null, "Process complexity", new Guid("df0bcdd9-2a59-4de2-b061-63e193c5965e") },
                    { new Guid("deefc21e-32fc-4ffa-94ef-884256816c81"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2427), null, false, null, null, "Third-party Relations", new Guid("27781fcf-bf63-4ac4-8ab5-c8530ab68abc") },
                    { new Guid("e9ac2f9f-42c4-4b61-8f58-f2a8f8828a31"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2377), null, false, null, null, "Motivation", new Guid("f6ec7b08-f46f-4e00-a589-f15b3b24028d") },
                    { new Guid("f0297818-9833-4ab3-995f-78cf6bb964e7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2402), null, false, null, null, "System availability", new Guid("36507944-db19-40a0-ac53-5c70c5f4007d") },
                    { new Guid("f0c40deb-1d86-4f0d-9ad8-283f25ce56b8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(2393), null, false, null, null, "Change management", new Guid("df0bcdd9-2a59-4de2-b061-63e193c5965e") }
                });

            migrationBuilder.InsertData(
                table: "RiskEventTypeCategory",
                columns: new[] { "ID", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "NAME", "RiskEventTypeId" },
                values: new object[,]
                {
                    { new Guid("05d02531-4d98-41f9-8c34-1da6115b385b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8953), null, false, null, null, "Consulting/Advisory Activities", new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c") },
                    { new Guid("0fbe8f2c-7905-40cd-837b-7ccd5195aff6"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8977), null, false, null, null, "Interruption in services provided by external providers", new Guid("468f18e4-d9be-49a9-af61-00556b1eb6e8") },
                    { new Guid("0fef6d10-b14d-4912-a09a-5db403d34154"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8978), null, false, null, null, "Inadequacy Inefficiency Malfunction or Block of Technology Systems", new Guid("468f18e4-d9be-49a9-af61-00556b1eb6e8") },
                    { new Guid("3429aad4-e734-44ac-919c-af9758979aab"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8927), null, false, null, null, "Theft and Fraud", new Guid("92fb8ba9-3b62-4d6a-acb1-a4111b2196ad") },
                    { new Guid("4e053fc0-8442-4da3-a1d9-8a1cca234912"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8975), null, false, null, null, "Disputes with Regulatory Authorities or other Governmental Bodies", new Guid("ac12cf01-4e9b-4cd0-b578-9e1016a3e4c1") },
                    { new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8981), null, false, null, null, "Transaction capture, execution and maintenance", new Guid("b0fdd290-1ebf-4a08-803f-07a69d349b4d") },
                    { new Guid("5e969527-3694-477a-8f17-40e53039966c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8963), null, false, null, null, "Misrepresentation of company information", new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c") },
                    { new Guid("611b88d4-5289-4da1-a78d-420f236257dc"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8970), null, false, null, null, "Accidents and public safety", new Guid("ac12cf01-4e9b-4cd0-b578-9e1016a3e4c1") },
                    { new Guid("62ce3931-6d3a-42d0-a0f4-f637e9afd0b9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8973), null, false, null, null, "Human Acts", new Guid("ac12cf01-4e9b-4cd0-b578-9e1016a3e4c1") },
                    { new Guid("635ca6d7-708f-4349-a483-ecf00679c489"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8966), null, false, null, null, "Poor Quality of Media Production", new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c") },
                    { new Guid("715e84f3-6d29-49d0-b8ab-9f3c6c65d27e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8968), null, false, null, null, "Natural causes", new Guid("ac12cf01-4e9b-4cd0-b578-9e1016a3e4c1") },
                    { new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8916), null, false, null, null, "Theft and Fraud", new Guid("33aadbfc-fa8a-448a-93d4-0c57e1618bd3") },
                    { new Guid("7f26b2bc-e09d-4dcb-9e1b-375f971b66c1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8924), null, false, null, null, "Unauthorised Activities", new Guid("33aadbfc-fa8a-448a-93d4-0c57e1618bd3") },
                    { new Guid("81f7e998-9b34-4092-8590-a551647de2c0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8985), null, false, null, null, "Customer intake and documentation", new Guid("b0fdd290-1ebf-4a08-803f-07a69d349b4d") },
                    { new Guid("849dc895-eca1-4165-b5ab-7cfcdc0d3ebb"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8937), null, false, null, null, "Unauthorised Activities", new Guid("92fb8ba9-3b62-4d6a-acb1-a4111b2196ad") },
                    { new Guid("84c43920-c0c7-4d25-86fe-1ec905d69e26"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8983), null, false, null, null, "Monitoring and reporting", new Guid("b0fdd290-1ebf-4a08-803f-07a69d349b4d") },
                    { new Guid("8978faf7-d8ef-482f-9845-6f8a232f64d4"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8922), null, false, null, null, "System Security", new Guid("33aadbfc-fa8a-448a-93d4-0c57e1618bd3") },
                    { new Guid("8e9be527-5bc1-48f5-a07c-10f36cd6d759"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8962), null, false, null, null, "Mismanagement of classified company information", new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c") },
                    { new Guid("9a06f398-dacd-44dc-abfd-cfe9721e6ce5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8990), null, false, null, null, "Vendors and suppliers", new Guid("b0fdd290-1ebf-4a08-803f-07a69d349b4d") },
                    { new Guid("a67cde3e-3ec3-44ee-a4dd-ad45713cdac7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8941), null, false, null, null, "Diversity and discrimination", new Guid("d47bd1f5-c11e-4f25-9854-e028a566db5c") },
                    { new Guid("a9386e4f-342c-4868-9ef6-9c2db682ac0b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8946), null, false, null, null, "Suitability, disclosure and fiduciary", new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c") },
                    { new Guid("ac39225c-db94-4127-8675-c6645b51a8c1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8939), null, false, null, null, "Safe Environment", new Guid("d47bd1f5-c11e-4f25-9854-e028a566db5c") },
                    { new Guid("c5c4e527-45e0-4bd2-917f-59783425e0a3"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8987), null, false, null, null, "Customer account management", new Guid("b0fdd290-1ebf-4a08-803f-07a69d349b4d") },
                    { new Guid("c96fdc22-4a35-4461-8726-5f73124545b1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8944), null, false, null, null, "Employee relations", new Guid("d47bd1f5-c11e-4f25-9854-e028a566db5c") },
                    { new Guid("cb18e18c-39a4-4802-9cc5-9a775368cc98"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8992), null, false, null, null, "Other Process breakdown", new Guid("b0fdd290-1ebf-4a08-803f-07a69d349b4d") },
                    { new Guid("d93d70e3-39d2-4b82-8d73-ba447f1bc06d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8948), null, false, null, null, "Improper business or market practices", new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c") },
                    { new Guid("ef9c5269-9866-4d0b-bc67-1cda07009562"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8951), null, false, null, null, "Selection, sponsorship and exposure", new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c") },
                    { new Guid("f2320468-3def-4022-a67f-af0f6bbdc3cd"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8950), null, false, null, null, "Product flaws", new Guid("2d5e2984-086e-41fa-8af8-28ede5d4079c") },
                    { new Guid("f6d2467a-358d-446e-b6ea-79c5c649b472"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8989), null, false, null, null, "Non-client counterparty breaches", new Guid("b0fdd290-1ebf-4a08-803f-07a69d349b4d") },
                    { new Guid("f9d3f84f-c129-46f1-9a6a-e18d7ef7f317"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8929), null, false, null, null, "System Security", new Guid("92fb8ba9-3b62-4d6a-acb1-a4111b2196ad") },
                    { new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(8972), null, false, null, null, "Retroactive effects and improper activities by third parties", new Guid("ac12cf01-4e9b-4cd0-b578-9e1016a3e4c1") }
                });

            migrationBuilder.InsertData(
                table: "RiskDriverSubCategory",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name", "RiskDriverCategoryId" },
                values: new object[,]
                {
                    { new Guid("011b8663-d1b0-45e7-991a-80a01c0c00ea"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6721), null, false, null, null, "Inadequate legal structures", new Guid("aee0a8ca-a49a-4ee4-b13f-10ae36b6788a") },
                    { new Guid("085e5c62-d0f3-4ec7-a501-c706f28d041a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6642), null, false, null, null, "Lack of staff experience in relation to performed tasks", new Guid("a5296a9f-bda3-4971-8796-8b8e262612bf") },
                    { new Guid("0e51fafd-1151-42c0-afe7-a9ec43a72f23"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6681), null, false, null, null, "Inadequate definition of duties and responsibilities", new Guid("5fa8e2a4-6d28-4cab-93bf-5a4d13ca66c8") },
                    { new Guid("0f3fbcc2-0ca9-48fa-bc5f-8eb983abcb3f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6662), null, false, null, null, "Introduction of new processes and procedures", new Guid("f0c40deb-1d86-4f0d-9ad8-283f25ce56b8") },
                    { new Guid("0f7e6d3b-bca5-4120-bed9-dbdaa5472787"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6729), null, false, null, null, "Inadequate/inappropriate information provided by third-parties", new Guid("deefc21e-32fc-4ffa-94ef-884256816c81") },
                    { new Guid("11335c9d-84f5-4ca9-9e06-9206f02ff8d7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6656), null, false, null, null, "Complexity of policies / procedures", new Guid("c8892fdd-4b7e-499f-8a80-9b7c1ec9f6c2") },
                    { new Guid("187599bc-f4d4-4a25-a153-4d8715c045ef"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6701), null, false, null, null, "Other Equipment failure (Failure of other assets/ equipments other than IT related equipments etc.)", new Guid("f0297818-9833-4ab3-995f-78cf6bb964e7") },
                    { new Guid("1ffcc3ac-1ec2-4859-a812-e20d90ecade4"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6722), null, false, null, null, "Natural disasters (Fire, floods, etc)", new Guid("47c33a55-b546-4f6e-a47d-7afdfcbc4594") },
                    { new Guid("23815320-f20e-4e04-ad12-4353cd7e8e67"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6724), null, false, null, null, "Political or social unrest", new Guid("47c33a55-b546-4f6e-a47d-7afdfcbc4594") },
                    { new Guid("2a908b98-e6ba-4039-a7ee-9ce0178805a6"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6686), null, false, null, null, "Lack of access to internal procedures / guidelines", new Guid("037fef6e-a151-422e-be74-89efe99f6f6f") },
                    { new Guid("2c32f0e7-5bff-4c01-afd1-a7500e494fb5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6680), null, false, null, null, "Inadequate delegation of power (scope, limits, communication, reporting etc)", new Guid("5fa8e2a4-6d28-4cab-93bf-5a4d13ca66c8") },
                    { new Guid("2dd263ec-be85-4b73-8392-cad0bdd415c0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6704), null, false, null, null, "Inadequate logical system control checks (e.g. log monitoring)", new Guid("2094ab76-2766-4a88-9a45-fd5444570151") },
                    { new Guid("333182f3-1aa0-4f93-8e43-2f8dba0d9440"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6647), null, false, null, null, "Workload perception (lack of clearly stated goals and objectives etc)", new Guid("e9ac2f9f-42c4-4b61-8f58-f2a8f8828a31") },
                    { new Guid("397a3ce5-7d57-4dfe-843a-4640c35a28b5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6658), null, false, null, null, "Process inappropriate for geographic / physical location", new Guid("c8892fdd-4b7e-499f-8a80-9b7c1ec9f6c2") },
                    { new Guid("3cc792ad-7391-43e3-8fe1-17306b8bc769"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6694), null, false, null, null, "IT helpdesk inefficiencies", new Guid("f0297818-9833-4ab3-995f-78cf6bb964e7") },
                    { new Guid("446c774a-c6fb-4952-a359-8b314eebb519"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6700), null, false, null, null, "System unavailable due to extended period of power outage", new Guid("f0297818-9833-4ab3-995f-78cf6bb964e7") },
                    { new Guid("45432c28-6f44-46f9-b862-e7ffedcb33e5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6685), null, false, null, null, "Inadequate / incomplete procedure (Internal communication failure)", new Guid("037fef6e-a151-422e-be74-89efe99f6f6f") },
                    { new Guid("47b52895-41e2-4fb6-a3f8-bc998355eeb2"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6727), null, false, null, null, "Client/Counterparty Failures", new Guid("237bec3d-cee6-4134-a49c-df772ee78d2d") },
                    { new Guid("575ef965-d001-4f9e-8182-a6592addb8d5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6633), null, false, null, null, "Inadequate skills development (e.g. training)", new Guid("a5296a9f-bda3-4971-8796-8b8e262612bf") },
                    { new Guid("57805eb1-f0d4-4776-9c93-3c2b8b453520"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6645), null, false, null, null, "Inadequate staff compensation (basic salaries, bonuses, reward-system for vigilance etc)", new Guid("e9ac2f9f-42c4-4b61-8f58-f2a8f8828a31") },
                    { new Guid("59b9e8d7-442c-49d4-9dac-3e95d15d051f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6703), null, false, null, null, "Inadequate security over critical data areas", new Guid("2094ab76-2766-4a88-9a45-fd5444570151") },
                    { new Guid("5ebd27b8-d6be-4170-9c64-7bf2f0115413"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6713), null, false, null, null, "Performance failure of outsourced vendor / service provider", new Guid("25302c84-c975-45f7-a46e-f9b0dd286b5c") },
                    { new Guid("5f72425d-a349-4e9b-bd10-d377bed1e5c6"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6679), null, false, null, null, "Inadequate clarity of authority (ultimate decision maker) and reporting lines", new Guid("5fa8e2a4-6d28-4cab-93bf-5a4d13ca66c8") },
                    { new Guid("622c077a-8ef9-48ee-b8c9-0a1bcdc81524"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6649), null, false, null, null, "Corruption / Criminal Intent", new Guid("e9ac2f9f-42c4-4b61-8f58-f2a8f8828a31") },
                    { new Guid("68d25abe-05a9-458f-b436-b7ea52251d0f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6666), null, false, null, null, "Rate of change / diversification of products / services", new Guid("f0c40deb-1d86-4f0d-9ad8-283f25ce56b8") },
                    { new Guid("692ef40e-cfc8-4f09-8eda-2ea885625920"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6644), null, false, null, null, "Performance failure of Support unit", new Guid("a5296a9f-bda3-4971-8796-8b8e262612bf") },
                    { new Guid("6e02f271-5498-45c3-80e9-7f369288f367"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6673), null, false, null, null, "Inadequate controls in place (specific / pervasive / monitoring)", new Guid("269387bf-03b1-4b60-95fc-a62977783334") },
                    { new Guid("6f9c4f87-f609-4f6e-a59b-7a91e702dbf7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6643), null, false, null, null, "Negligence of duties and responsibilities", new Guid("a5296a9f-bda3-4971-8796-8b8e262612bf") },
                    { new Guid("7244336a-39bf-4a3d-97db-d9318a8a9a5a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6707), null, false, null, null, "Poor systems user interface", new Guid("96912526-6283-4f3c-9079-769b5d08f06d") },
                    { new Guid("775a9634-b76c-44e1-8c36-1a8af8e38673"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6695), null, false, null, null, "Technological obsolescence", new Guid("f0297818-9833-4ab3-995f-78cf6bb964e7") },
                    { new Guid("7828b651-d8ad-4262-94ed-a2ee4ebceb3c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6651), null, false, null, null, "Staff shortages within unit (lack of capacity in unit)", new Guid("b528e800-47df-42c5-993c-c0b0ae1fff7f") },
                    { new Guid("7931c7f9-0fab-4252-8e7e-13153f373458"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6676), null, false, null, null, "Management ability to override controls or processes", new Guid("269387bf-03b1-4b60-95fc-a62977783334") },
                    { new Guid("8a9dbbcb-02bd-4532-84ef-42fcb554b998"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6717), null, false, null, null, "Inadequate response to legal / contractual disputes", new Guid("aee0a8ca-a49a-4ee4-b13f-10ae36b6788a") },
                    { new Guid("8e62e237-cce7-4b62-8675-698f7dabfeb3"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6693), null, false, null, null, "Inadequate technical or functional documentation (user guides)", new Guid("4ab36063-c149-4e0f-80c3-0fa76c8fa24c") },
                    { new Guid("8febe1c4-e954-4b14-996a-7d3d2d42c5a0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6692), null, false, null, null, "System inadequate for volume of activities (speed, storage etc)", new Guid("4ab36063-c149-4e0f-80c3-0fa76c8fa24c") },
                    { new Guid("90a570c2-453b-404a-8101-43a490445884"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6687), null, false, null, null, "Lack of SLA's between internal units", new Guid("037fef6e-a151-422e-be74-89efe99f6f6f") },
                    { new Guid("90cc6d23-93c0-4a25-af6c-50616a9b744f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6711), null, false, null, null, "Lack of formalization of relationship with outsourcer (duties, deliverables etc)", new Guid("25302c84-c975-45f7-a46e-f9b0dd286b5c") },
                    { new Guid("92c95373-8c5a-492a-b6a9-4ff7eb9af76a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6657), null, false, null, null, "Complexity of client agreements", new Guid("c8892fdd-4b7e-499f-8a80-9b7c1ec9f6c2") },
                    { new Guid("98e874ac-bddc-46e6-977d-7cc3421336c8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6682), null, false, null, null, "Inadequate segregation of duties", new Guid("5fa8e2a4-6d28-4cab-93bf-5a4d13ca66c8") },
                    { new Guid("9b3f1ee4-3e52-46ca-8bd6-fb587867dabb"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6654), null, false, null, null, "Disagreement on issues of mutual interest", new Guid("acda7790-6767-47b1-bee3-87566c8f6e04") },
                    { new Guid("9ec0f673-02d9-417a-ad49-1fd004259db2"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6714), null, false, null, null, "Regulatory compliance breaches", new Guid("4a0e5abf-d42b-45a7-a98a-8d5dfba25983") },
                    { new Guid("a1a989d7-3f36-4d39-bfeb-33a935a1badb"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6689), null, false, null, null, "Non adherence to processes and procedures", new Guid("037fef6e-a151-422e-be74-89efe99f6f6f") },
                    { new Guid("a5ca64d2-6705-4553-989f-f5a6b409015d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6675), null, false, null, null, "Failure of automated controls", new Guid("269387bf-03b1-4b60-95fc-a62977783334") },
                    { new Guid("a93c08c7-8af7-4655-afa2-3a0844afb519"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6634), null, false, null, null, "Key man retention", new Guid("a5296a9f-bda3-4971-8796-8b8e262612bf") },
                    { new Guid("b4bb092b-0b54-4790-a8a8-d3df04397dc9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6640), null, false, null, null, "Lack of management oversight", new Guid("a5296a9f-bda3-4971-8796-8b8e262612bf") },
                    { new Guid("b9d1e65f-e4e2-4daf-97af-2f2dd8f4b8ee"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6646), null, false, null, null, "Working Atmosphere (level of stress, social climate, interpersonal relationships, malicious Intent)", new Guid("e9ac2f9f-42c4-4b61-8f58-f2a8f8828a31") },
                    { new Guid("c3b207ac-c1f8-4141-93d5-dbc78a8e1d45"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6652), null, false, null, null, "Staff shortages within support units (lack of capacity in supporting units)", new Guid("b528e800-47df-42c5-993c-c0b0ae1fff7f") },
                    { new Guid("cb622fee-aeae-46e2-93ba-3b21800522e3"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6715), null, false, null, null, "Government discretion to impose will and decisions without prior notice.", new Guid("4a0e5abf-d42b-45a7-a98a-8d5dfba25983") },
                    { new Guid("cc825bf0-ed0f-4982-8440-56761c0b0c6f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6697), null, false, null, null, "Hardware failure (Failure of wearing parts etc)", new Guid("f0297818-9833-4ab3-995f-78cf6bb964e7") },
                    { new Guid("cdb832ff-2fd5-4573-978a-6522c52429b5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6659), null, false, null, null, "Automated process failures", new Guid("c8892fdd-4b7e-499f-8a80-9b7c1ec9f6c2") },
                    { new Guid("d022b8f9-056c-4e38-a28a-f8337b1df110"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6663), null, false, null, null, "Internal communication failures", new Guid("f0c40deb-1d86-4f0d-9ad8-283f25ce56b8") },
                    { new Guid("d32d3b6c-8775-4860-abdc-499c78969b63"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6696), null, false, null, null, "Software failure (Software / data corruption etc)", new Guid("f0297818-9833-4ab3-995f-78cf6bb964e7") },
                    { new Guid("d514ed21-8d4b-4aef-8958-5356acec415b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6723), null, false, null, null, "External attacks (burglary, robberies, vandalism etc)", new Guid("47c33a55-b546-4f6e-a47d-7afdfcbc4594") },
                    { new Guid("d79a3044-eae7-4902-b2bb-62333f3ac9a9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6684), null, false, null, null, "Lack of formal procedures / guidelines", new Guid("037fef6e-a151-422e-be74-89efe99f6f6f") },
                    { new Guid("e141b7e6-9f8f-4a8b-9ab5-6885a5c325c3"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6664), null, false, null, null, "Lack of documented guidelines for new processes / services developed", new Guid("f0c40deb-1d86-4f0d-9ad8-283f25ce56b8") },
                    { new Guid("e49dec21-1d60-4676-866c-75948ccde63b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6716), null, false, null, null, "Ambiguity in Regulations", new Guid("4a0e5abf-d42b-45a7-a98a-8d5dfba25983") },
                    { new Guid("e88911af-2cd7-47b8-be67-e578262cdfec"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6674), null, false, null, null, "Lack of reporting of control weaknesses / failures", new Guid("269387bf-03b1-4b60-95fc-a62977783334") },
                    { new Guid("e9573ae0-4026-428f-82e1-54a7891d3d8e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6710), null, false, null, null, "Virus / Intrusion attacks", new Guid("00a54610-0522-4313-ac74-d39f550ff600") },
                    { new Guid("e9c90e1d-13c4-4200-9457-5c86e89c7c24"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6629), null, false, null, null, "Staff selection (poor educational levels etc)", new Guid("a5296a9f-bda3-4971-8796-8b8e262612bf") },
                    { new Guid("ebd8c858-54bd-4208-ab3c-05818a33024e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6705), null, false, null, null, "Inadequate synergy between disparate systems with common users", new Guid("96912526-6283-4f3c-9079-769b5d08f06d") },
                    { new Guid("ef35828b-c46b-49bb-8fae-2a72d2ff475d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6708), null, false, null, null, "Inadequate system / data backups", new Guid("00a54610-0522-4313-ac74-d39f550ff600") },
                    { new Guid("f29ef7f4-2bc8-4207-bf67-6273bd0c87de"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6725), null, false, null, null, "Unethical Social and Business Environment", new Guid("47c33a55-b546-4f6e-a47d-7afdfcbc4594") },
                    { new Guid("fbbe4a42-e44c-4983-b46e-a6468b38936b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6718), null, false, null, null, "Inadequate pre-agreement investigations", new Guid("aee0a8ca-a49a-4ee4-b13f-10ae36b6788a") },
                    { new Guid("fcf78a30-d7ff-4d22-93d9-a600a4c3943b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6690), null, false, null, null, "System inadequate for nature of required tasks", new Guid("4ab36063-c149-4e0f-80c3-0fa76c8fa24c") },
                    { new Guid("fd0b8749-95a2-4019-ba25-a70555fc0cb6"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6726), null, false, null, null, "Inadequate/inappropriate information provided by the client", new Guid("237bec3d-cee6-4134-a49c-df772ee78d2d") },
                    { new Guid("fe11f33c-4601-4fd4-a825-67c3f3d4a7fd"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6655), null, false, null, null, "Failure to consult organised labour on HR policies", new Guid("acda7790-6767-47b1-bee3-87566c8f6e04") },
                    { new Guid("fe1b2325-c5ce-4fb3-8f5a-522c51e15b38"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 505, DateTimeKind.Utc).AddTicks(6702), null, false, null, null, "Inadequate security of user profiles (passwords etc)", new Guid("2094ab76-2766-4a88-9a45-fd5444570151") }
                });

            migrationBuilder.InsertData(
                table: "RiskEventTypeSubCategory",
                columns: new[] { "Id", "CreatedBy", "CreatedOnUtc", "DeletedBy", "IsDeleted", "ModifiedBy", "ModifiedOnUtc", "Name", "RiskEventTypeCategoryId" },
                values: new object[,]
                {
                    { new Guid("00f494e5-d985-4d87-a491-0bad3f6d75c6"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9157), null, false, null, null, "Unauthorised income waivers", new Guid("7f26b2bc-e09d-4dcb-9e1b-375f971b66c1") },
                    { new Guid("033c1bce-afb7-4619-aca5-2f68f8cd784d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9161), null, false, null, null, "Cash theft", new Guid("3429aad4-e734-44ac-919c-af9758979aab") },
                    { new Guid("045843b2-f0e0-46a0-ae32-39b6bdaa9117"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9292), null, false, null, null, "Failure to upload mandates", new Guid("81f7e998-9b34-4092-8590-a551647de2c0") },
                    { new Guid("05c33704-a119-4101-9333-5cb6b279f598"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9175), null, false, null, null, "Bribes", new Guid("849dc895-eca1-4165-b5ab-7cfcdc0d3ebb") },
                    { new Guid("0626eda3-7fe8-48ec-9de5-02dec22e960b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9233), null, false, null, null, "Water spillage", new Guid("611b88d4-5289-4da1-a78d-420f236257dc") },
                    { new Guid("075f62a6-5172-4d4a-b451-f5c446d7606e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9167), null, false, null, null, "Cheque kiting", new Guid("3429aad4-e734-44ac-919c-af9758979aab") },
                    { new Guid("0acf0290-7095-4e52-9276-de60bbea579b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9245), null, false, null, null, "Fines & penalties", new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9") },
                    { new Guid("1292559b-978b-45c2-a54c-8bfc59c07505"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9226), null, false, null, null, "floods", new Guid("715e84f3-6d29-49d0-b8ab-9f3c6c65d27e") },
                    { new Guid("12ad80c0-32a9-4bcc-b937-2dcf616249df"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9298), null, false, null, null, "Failure of vendors to deliver on contractual obligations", new Guid("9a06f398-dacd-44dc-abfd-cfe9721e6ce5") },
                    { new Guid("155a430d-a343-49ad-880f-86355a5062ea"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9274), null, false, null, null, "Failure to regularise customer instructions", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("1ef794b1-689b-4e5d-a02a-a222b6902ccc"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9162), null, false, null, null, "Pool car theft", new Guid("3429aad4-e734-44ac-919c-af9758979aab") },
                    { new Guid("208b1700-9ca7-4853-83e9-6ef275a15eac"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9213), null, false, null, null, "Client exposure (loan) limits exceeded", new Guid("ef9c5269-9866-4d0b-bc67-1cda07009562") },
                    { new Guid("20ba32ea-7a68-494a-b26a-fe51a2bc29dc"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9264), null, false, null, null, "Errors in the maintenance of information", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("21404eca-2e56-4220-a5cc-feb7766f94b8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9143), null, false, null, null, "Teaming", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("2241421c-5fdc-48f2-8291-73e95220ba03"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9246), null, false, null, null, "Loan writeoff expenses", new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9") },
                    { new Guid("2278fbb8-e7ec-413d-abe5-ddcb9f7a8a6b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9154), null, false, null, null, "Intentional mispricing of products", new Guid("7f26b2bc-e09d-4dcb-9e1b-375f971b66c1") },
                    { new Guid("2b076832-4885-4259-94b3-05ee37f58ab0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9225), null, false, null, null, "Fire", new Guid("715e84f3-6d29-49d0-b8ab-9f3c6c65d27e") },
                    { new Guid("2c11dc15-1b75-4b35-89be-c66b9c508405"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9197), null, false, null, null, "Account churning", new Guid("d93d70e3-39d2-4b82-8d73-ba447f1bc06d") },
                    { new Guid("2eda5f62-0e0d-441e-b292-1e3791955565"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9179), null, false, null, null, "Employee health and safety violations", new Guid("ac39225c-db94-4127-8675-c6645b51a8c1") },
                    { new Guid("31b48db7-2865-4cd5-8a2c-47d1a237676f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9288), null, false, null, null, "Client permissions/disclaimers missing", new Guid("81f7e998-9b34-4092-8590-a551647de2c0") },
                    { new Guid("331bfe0c-b4f3-45ef-bea5-cfaf79739f53"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9195), null, false, null, null, "Aggressive selling", new Guid("d93d70e3-39d2-4b82-8d73-ba447f1bc06d") },
                    { new Guid("3450a5fb-cc88-4726-8e37-f67d26c53079"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9212), null, false, null, null, "Non - compliance with internal guidelines when investigating a client", new Guid("ef9c5269-9866-4d0b-bc67-1cda07009562") },
                    { new Guid("362f24e2-6fe9-47a6-9a17-d235741ce2b8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9291), null, false, null, null, "Incomplete account opening documentation", new Guid("81f7e998-9b34-4092-8590-a551647de2c0") },
                    { new Guid("38a22765-0ae7-498d-b920-a06f74de86af"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9263), null, false, null, null, "Automated data processing errors", new Guid("0fef6d10-b14d-4912-a09a-5db403d34154") },
                    { new Guid("38db0935-9653-4b48-8b7d-e2c6adb5f321"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9192), null, false, null, null, "Customer suitability violations", new Guid("a9386e4f-342c-4868-9ef6-9c2db682ac0b") },
                    { new Guid("3e6d45ab-0dcc-4594-8530-00b10afdf3d8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9290), null, false, null, null, "Improper account setup", new Guid("81f7e998-9b34-4092-8590-a551647de2c0") },
                    { new Guid("3f1218c7-b759-42ef-812f-b16b75f5ea7d"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9180), null, false, null, null, "Worker's compensation claims", new Guid("ac39225c-db94-4127-8675-c6645b51a8c1") },
                    { new Guid("40002d5d-f0f4-4837-8aff-04edb04e7af2"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9178), null, false, null, null, "Kickbacks", new Guid("849dc895-eca1-4165-b5ab-7cfcdc0d3ebb") },
                    { new Guid("40b0967c-8837-41a6-beed-56d22dd25f74"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9257), null, false, null, null, "Inability to process transactions", new Guid("0fbe8f2c-7905-40cd-837b-7ccd5195aff6") },
                    { new Guid("4131999f-c694-449a-9768-48cfc9f7daab"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9158), null, false, null, null, "Granting unauthorised credit", new Guid("7f26b2bc-e09d-4dcb-9e1b-375f971b66c1") },
                    { new Guid("429e9412-6f16-443a-844d-b3cf2295b046"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9138), null, false, null, null, "Cheque conversion", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("467869fb-115a-4a8c-bbe5-a30c87f53466"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9272), null, false, null, null, "Application of wrong interest or exchange rates", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("46fe203b-c3d7-449e-a2e7-97cc4cb77752"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9236), null, false, null, null, "Political interference in the companys operations", new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9") },
                    { new Guid("4782aea5-22c9-42f5-91c7-045462b21d30"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9156), null, false, null, null, "Destruction of source documents", new Guid("7f26b2bc-e09d-4dcb-9e1b-375f971b66c1") },
                    { new Guid("47baafb7-f2ba-40c6-8d4a-4dbccc5cf7f0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9136), null, false, null, null, "Cash suppression", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("49e1c534-b724-4bce-85a0-b916760b0b1b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9159), null, false, null, null, "Fraud", new Guid("3429aad4-e734-44ac-919c-af9758979aab") },
                    { new Guid("4b39f163-fe19-48b4-9cfd-4dffa2f25965"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9222), null, false, null, null, "Inferior production of corporate gifts", new Guid("635ca6d7-708f-4349-a483-ecf00679c489") },
                    { new Guid("4dc5a025-3663-40e0-9277-dde3ee9e54fd"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9286), null, false, null, null, "Inaccurate information sent to clients / external parties", new Guid("84c43920-c0c7-4d25-86fe-1ec905d69e26") },
                    { new Guid("4eba5a58-841c-4ce9-bfe0-a53205ff6c79"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9301), null, false, null, null, "Errors in Human Resources/ Administration processes", new Guid("cb18e18c-39a4-4802-9cc5-9a775368cc98") },
                    { new Guid("4f2d7cd6-daed-4b49-823a-4fb25f4886bf"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9163), null, false, null, null, "Cheque forgery", new Guid("3429aad4-e734-44ac-919c-af9758979aab") },
                    { new Guid("4fe69c21-bc64-4ae9-a1a8-e77fe6ceb81a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9187), null, false, null, null, "Organised labour activities", new Guid("c96fdc22-4a35-4461-8726-5f73124545b1") },
                    { new Guid("53b390f4-bfb1-4c0e-b503-2e56a171ea65"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9232), null, false, null, null, "Fire outbreak", new Guid("611b88d4-5289-4da1-a78d-420f236257dc") },
                    { new Guid("54ddbecb-1591-48a6-a4cb-7c9641b6c1c1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9151), null, false, null, null, "Bribes", new Guid("7f26b2bc-e09d-4dcb-9e1b-375f971b66c1") },
                    { new Guid("5b925d29-b68e-444f-9c50-07fc88b98b77"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9139), null, false, null, null, "Manipulation of source documents", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("62714bb7-a5dd-43a4-9448-f3fac76ec4ed"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9224), null, false, null, null, "Poor quality of Annual Reports prints", new Guid("635ca6d7-708f-4349-a483-ecf00679c489") },
                    { new Guid("6381f30c-bbed-442a-96ae-720ce266969b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9132), null, false, null, null, "Extortion", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("668ac297-8ac7-4391-b72d-42d446aa1a90"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9215), null, false, null, null, "Competitors obtaining information about the firm's initiatives and business strategy", new Guid("8e9be527-5bc1-48f5-a07c-10f36cd6d759") },
                    { new Guid("67279af4-c193-4fe2-8f3f-30f276b8dca7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9229), null, false, null, null, "hail damage", new Guid("715e84f3-6d29-49d0-b8ab-9f3c6c65d27e") },
                    { new Guid("686b248e-eeff-44d2-895c-d6ea5c09e744"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9234), null, false, null, null, "Smoke detectors not functioning", new Guid("611b88d4-5289-4da1-a78d-420f236257dc") },
                    { new Guid("687883fc-d805-4f33-9101-027b9b55b3ad"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9124), null, false, null, null, "Theft", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("6ab118ae-fe93-445f-8dbe-901019a86708"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9240), null, false, null, null, "Court debt judgements", new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9") },
                    { new Guid("6c9ab55e-5047-468e-8b01-085032b4ffd5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9194), null, false, null, null, "Breach of regulatory guidelines on foreign exchange transactions / suspicious transactions", new Guid("a9386e4f-342c-4868-9ef6-9c2db682ac0b") },
                    { new Guid("7073aec4-5c04-406d-9067-b41d6b0174ed"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9181), null, false, null, null, "Discrimination on account of religion, nationality, race", new Guid("a67cde3e-3ec3-44ee-a4dd-ad45713cdac7") },
                    { new Guid("775f7951-ed0d-49f5-9e35-b2b6e8d7a46c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9258), null, false, null, null, "Telecommunication link outages", new Guid("0fbe8f2c-7905-40cd-837b-7ccd5195aff6") },
                    { new Guid("782ee6fc-a852-40f8-920b-302a08b9a2fc"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9172), null, false, null, null, "Illegal withdrawals from client accounts", new Guid("f9d3f84f-c129-46f1-9a6a-e18d7ef7f317") },
                    { new Guid("795f1873-8f5b-46c6-b659-e0e596c50ca9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9189), null, false, null, null, "Fighting between staff", new Guid("c96fdc22-4a35-4461-8726-5f73124545b1") },
                    { new Guid("79c5325c-1b41-4c9e-bad3-d43a6b5a4c46"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9210), null, false, null, null, "Model errors (e.g. product conception, methodology, or pricing errors)", new Guid("f2320468-3def-4022-a67f-af0f6bbdc3cd") },
                    { new Guid("7f5d37c3-2d83-41d1-98e4-c6b8da8f5db5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9134), null, false, null, null, "Embezzlement", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("834e3ae0-7342-49e7-a63c-67cbe1800ec8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9250), null, false, null, null, "Sabotage", new Guid("62ce3931-6d3a-42d0-a0f4-f637e9afd0b9") },
                    { new Guid("8a98a853-699a-4134-b8bf-2c3c93f7588e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9262), null, false, null, null, "System downtime", new Guid("0fef6d10-b14d-4912-a09a-5db403d34154") },
                    { new Guid("8bed131b-0952-4ed6-bdd0-91a1a162378a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9121), null, false, null, null, "Fraud", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("8d1da705-5cad-4c5a-86b0-0ba05800ff9a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9198), null, false, null, null, "Unlicensed activities", new Guid("d93d70e3-39d2-4b82-8d73-ba447f1bc06d") },
                    { new Guid("934879f6-a21b-4dcb-ace8-49e64bd3fd25"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9183), null, false, null, null, "Worker's compensation claims", new Guid("a67cde3e-3ec3-44ee-a4dd-ad45713cdac7") },
                    { new Guid("93fa2f06-7fac-4f6d-92bd-d44c74d014f1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9244), null, false, null, null, "Debt recovery expenses", new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9") },
                    { new Guid("948844a3-fd11-43b1-a5dd-0ed4235e63b0"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9174), null, false, null, null, "Account take over / impersonation", new Guid("849dc895-eca1-4165-b5ab-7cfcdc0d3ebb") },
                    { new Guid("955596d9-f7c0-49ea-9afd-1c7d7b8adbea"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9152), null, false, null, null, "Kickbacks", new Guid("7f26b2bc-e09d-4dcb-9e1b-375f971b66c1") },
                    { new Guid("9562ce69-644a-46ac-a7b5-0053a484ad81"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9166), null, false, null, null, "Cheque fraud", new Guid("3429aad4-e734-44ac-919c-af9758979aab") },
                    { new Guid("95e1ac51-d5b3-4add-9919-a5d648c4c59e"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9271), null, false, null, null, "Amount in words different from figures", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("98801183-9281-44f2-a262-5fda733dbb1f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9202), null, false, null, null, "Tax non-remittance", new Guid("d93d70e3-39d2-4b82-8d73-ba447f1bc06d") },
                    { new Guid("9b5c3822-821d-4e3b-9161-48fb7f2a7b92"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9303), null, false, null, null, "Disposal of Fixed asset not approved", new Guid("cb18e18c-39a4-4802-9cc5-9a775368cc98") },
                    { new Guid("9be5b167-b50b-4d9f-b33f-8f04fac4e96c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9200), null, false, null, null, "Money laundering", new Guid("d93d70e3-39d2-4b82-8d73-ba447f1bc06d") },
                    { new Guid("9ec9ad48-44ad-496e-bdcd-1e91cb773074"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9149), null, false, null, null, "Misappropriation of company assets", new Guid("7f26b2bc-e09d-4dcb-9e1b-375f971b66c1") },
                    { new Guid("a731a3fa-1526-42d5-a3a1-a5b64db5946f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9193), null, false, null, null, "Disclosure / misuse of confidential client data", new Guid("a9386e4f-342c-4868-9ef6-9c2db682ac0b") },
                    { new Guid("a9b6e9df-551e-4e34-9ca7-28b7ef87ed3a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9256), null, false, null, null, "Power outages", new Guid("0fbe8f2c-7905-40cd-837b-7ccd5195aff6") },
                    { new Guid("ad26c661-fa8d-48fd-a944-f26ce4ce8f2b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9209), null, false, null, null, "Product defects (e.g. Marketing of unauthorised products)", new Guid("f2320468-3def-4022-a67f-af0f6bbdc3cd") },
                    { new Guid("aec80679-fd88-49ee-b5f2-6a3664116ac1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9251), null, false, null, null, "Robberies", new Guid("62ce3931-6d3a-42d0-a0f4-f637e9afd0b9") },
                    { new Guid("b10e71a7-078e-4196-adbb-ddac73fca10c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9255), null, false, null, null, "Interruption in communications", new Guid("0fbe8f2c-7905-40cd-837b-7ccd5195aff6") },
                    { new Guid("b4a3c1c4-77b4-4d18-8907-249cf7dd3925"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9277), null, false, null, null, "Improper identification of beneficiaries", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("b53bd16b-bf71-44b1-9c54-926699d26cfe"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9135), null, false, null, null, "Forgery", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("b68ee4d8-41b5-4456-8dd1-76bd2128d8b7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9278), null, false, null, null, "Wrong classification of accounts", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("b8d3d683-09f6-4aa0-969d-e57eef10dc12"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9297), null, false, null, null, "Failure of counter-party company to repay inter-company lending amounts on demand", new Guid("f6d2467a-358d-446e-b6ea-79c5c649b472") },
                    { new Guid("b9d5a97a-5cee-428a-9758-5bb7a4e70986"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9289), null, false, null, null, "Contractual documents missing / incomplete / erroneous", new Guid("81f7e998-9b34-4092-8590-a551647de2c0") },
                    { new Guid("c3b394cb-f738-4cf4-ab12-3714c8d9a5f4"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9235), null, false, null, null, "Fire alarms not functioning", new Guid("611b88d4-5289-4da1-a78d-420f236257dc") },
                    { new Guid("c4db8ab7-71d1-43b3-aa35-85bd0293c871"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9269), null, false, null, null, "Transaction not registered", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("ca5aef9c-c8ac-4d95-a416-9af0de957997"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9168), null, false, null, null, "Fake currency fraud", new Guid("3429aad4-e734-44ac-919c-af9758979aab") },
                    { new Guid("cab29b58-eb01-4608-b387-1c25aa337bd2"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9131), null, false, null, null, "Cash management shortages", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("cac15987-d0b5-4736-a143-5c944f56bec9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9243), null, false, null, null, "Litigation expenses", new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9") },
                    { new Guid("cdcd5a9c-8b18-4d80-b13a-4634c7109742"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9230), null, false, null, null, "General responsibility for injuries caused to third parties eg. company Vehicle accidents", new Guid("611b88d4-5289-4da1-a78d-420f236257dc") },
                    { new Guid("ce92e768-0dc2-4c18-8531-6ef985b16c57"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9265), null, false, null, null, "Data entry errors (payment instructions, rates)", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("ceaea547-7801-46af-9646-2eaff037600b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9276), null, false, null, null, "Processing undated transactions", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("d3d7b533-20f3-4ba7-99cd-4fe37ee3f694"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9184), null, false, null, null, "Employee disputes and investigations", new Guid("c96fdc22-4a35-4461-8726-5f73124545b1") },
                    { new Guid("d4a93094-a8eb-4d16-90cc-4e34e4ae33d2"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9231), null, false, null, null, "Electrical surges", new Guid("611b88d4-5289-4da1-a78d-420f236257dc") },
                    { new Guid("d540ddd5-8023-401c-a358-62556ad4190f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9252), null, false, null, null, "Missed deadlines", new Guid("4e053fc0-8442-4da3-a1d9-8a1cca234912") },
                    { new Guid("d571b62b-27b5-4f4b-b37e-6d4f1f55e8f5"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9214), null, false, null, null, "Penalties / Fees incurred for contractual disputes / transgressions", new Guid("05d02531-4d98-41f9-8c34-1da6115b385b") },
                    { new Guid("d77e17d2-661d-46d1-be83-4b18f4c8010c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9268), null, false, null, null, "Alteration not countersigned", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("d787288b-b33c-46d2-b03a-a0e9dfccaceb"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9242), null, false, null, null, "Out-of-court settlement costs", new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9") },
                    { new Guid("da135097-ac1d-4bcb-ae16-1add19daf594"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9254), null, false, null, null, "undeserved fines and licence supensions", new Guid("4e053fc0-8442-4da3-a1d9-8a1cca234912") },
                    { new Guid("da1b9f2d-c7b5-42fe-af18-dc7e441d6410"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9185), null, false, null, null, "Mistakes in the administration of employee compensation, benefits, or termination", new Guid("c96fdc22-4a35-4461-8726-5f73124545b1") },
                    { new Guid("db6dc76d-539c-4297-b8e8-f522c39848ad"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9147), null, false, null, null, "manipulation of files / programs", new Guid("8978faf7-d8ef-482f-9845-6f8a232f64d4") },
                    { new Guid("dcf784ad-6fc4-466d-a385-f4f815debb88"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9171), null, false, null, null, "manipulation of files / programs", new Guid("f9d3f84f-c129-46f1-9a6a-e18d7ef7f317") },
                    { new Guid("de3bec8c-ff83-4f92-a74f-a5b117c3b587"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9275), null, false, null, null, "Data entry errors", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("def08550-438f-431f-8b32-29e82ccdec1a"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9295), null, false, null, null, "Negligent loss or damage of client assets", new Guid("c5c4e527-45e0-4bd2-917f-59783425e0a3") },
                    { new Guid("defed8a5-27b4-4e79-ab2a-7b8710f0e8d3"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9279), null, false, null, null, "Incorrect client records", new Guid("84c43920-c0c7-4d25-86fe-1ec905d69e26") },
                    { new Guid("e062913c-4066-4cbd-8ef3-ee897880064b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9218), null, false, null, null, "Misplacement of client information and correspondence", new Guid("8e9be527-5bc1-48f5-a07c-10f36cd6d759") },
                    { new Guid("e1092e2f-b962-4d72-8c98-33feb36f1d1c"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9220), null, false, null, null, "Misquotes by public media sources", new Guid("5e969527-3694-477a-8f17-40e53039966c") },
                    { new Guid("e140bb44-9a6f-4c42-abb4-5f5f4ba58b86"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9302), null, false, null, null, "Procurement not authorised", new Guid("cb18e18c-39a4-4802-9cc5-9a775368cc98") },
                    { new Guid("e2abe860-49db-44ea-ae9c-2f5d05b1635f"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9261), null, false, null, null, "CCTV outages", new Guid("0fbe8f2c-7905-40cd-837b-7ccd5195aff6") },
                    { new Guid("e338523c-612b-41f7-9f6e-394db6f5f3e8"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9239), null, false, null, null, "Launch of competitive products by agents", new Guid("fbff5d8b-2c51-43e8-8a3d-6b7f2a5873a9") },
                    { new Guid("e3dfe3bb-7e39-41e7-8808-45928876063b"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9247), null, false, null, null, "Vandalisation of company property", new Guid("62ce3931-6d3a-42d0-a0f4-f637e9afd0b9") },
                    { new Guid("e92e8395-11d2-4c5c-bc65-f8402e0b7cc9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9223), null, false, null, null, "Substandard /Offensive advertisements and promotional activities", new Guid("635ca6d7-708f-4349-a483-ecf00679c489") },
                    { new Guid("ede21e5b-1027-416c-a1bb-e88c395c4821"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9140), null, false, null, null, "Manipulation of customer accounts", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("ef4433a5-9bc3-4866-8d92-205c11d9ce73"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9148), null, false, null, null, "Illegal withdrawals from client accounts", new Guid("8978faf7-d8ef-482f-9845-6f8a232f64d4") },
                    { new Guid("efc9e61e-9658-4929-b15b-f1da773b35f4"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9191), null, false, null, null, "Fiduciary breaches and guideline violations", new Guid("a9386e4f-342c-4868-9ef6-9c2db682ac0b") },
                    { new Guid("f010e260-ed62-4f5e-8b70-30c28c3269ab"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9299), null, false, null, null, "Disagreements over terms of outsourcing contracts", new Guid("9a06f398-dacd-44dc-abfd-cfe9721e6ce5") },
                    { new Guid("f13e5ebe-3b13-40cd-802f-94e829fb7cd9"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9294), null, false, null, null, "Unapproved access given to accounts", new Guid("c5c4e527-45e0-4bd2-917f-59783425e0a3") },
                    { new Guid("f1801377-7c83-41b4-8771-da15990a93b7"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9144), null, false, null, null, "Illegal sales of securities from Clients portfolio", new Guid("73a0df86-d805-4e57-a6ad-b8af814646a4") },
                    { new Guid("f61a2b63-c9d4-4439-97e5-f92514a2f583"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9219), null, false, null, null, "Errors in ARM's publications and annual reports", new Guid("5e969527-3694-477a-8f17-40e53039966c") },
                    { new Guid("f7c853f9-7092-4d6e-9979-5fa2e66483c4"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9169), null, false, null, null, "Customer data theft", new Guid("f9d3f84f-c129-46f1-9a6a-e18d7ef7f317") },
                    { new Guid("f9fd54c8-63b5-4762-8aa8-f86bbc6d4df1"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9266), null, false, null, null, "Transaction not booked", new Guid("52ecc3f4-55c8-4a9a-ab54-d86eb8f2b3d0") },
                    { new Guid("fb1db9ca-b41f-47cc-8749-49bb6b62c901"), new Guid("00000000-0000-0000-0000-000000000000"), new DateTime(2024, 8, 3, 10, 55, 22, 509, DateTimeKind.Utc).AddTicks(9146), null, false, null, null, "Customer data theft", new Guid("8978faf7-d8ef-482f-9845-6f8a232f64d4") }
                });

            migrationBuilder.CreateIndex(
                name: "IX_ActionManagement_RiskEventId",
                table: "ActionManagement",
                column: "RiskEventId");

            migrationBuilder.CreateIndex(
                name: "IX_AnualAuditUniverseRiskRating_BusinessRiskRatingId",
                table: "AnualAuditUniverseRiskRating",
                column: "BusinessRiskRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_ARMAgribusinessAuditUniverse_AnualAuditUniverseRiskRatingId",
                table: "ARMAgribusinessAuditUniverse",
                column: "AnualAuditUniverseRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMAgribusinessEMCRating_EMCConcernRiskRatingId",
                table: "ARMAgribusinessEMCRating",
                column: "EMCConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMAgribusinessRating_BusinessRiskRatingId",
                table: "ARMAgribusinessRating",
                column: "BusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMHillAuditUniverse_AnualAuditUniverseRiskRatingId",
                table: "ARMHillAuditUniverse",
                column: "AnualAuditUniverseRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMHILLEMCRating_EMCConcernRiskRatingId",
                table: "ARMHILLEMCRating",
                column: "EMCConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMHillRating_BusinessRiskRatingId",
                table: "ARMHillRating",
                column: "BusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMHoldingCompanyAnnualAuditUniverse_AnualAuditUniverseRiskRatingId",
                table: "ARMHoldingCompanyAnnualAuditUniverse",
                column: "AnualAuditUniverseRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMHoldingCompanyBusinessRating_BusinessRiskRatingId",
                table: "ARMHoldingCompanyBusinessRating",
                column: "BusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMHoldingCompanyEMCRating_EMCConcernRiskRatingId",
                table: "ARMHoldingCompanyEMCRating",
                column: "EMCConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMIMAuditUniverse_AnualAuditUniverseRiskRatingId",
                table: "ARMIMAuditUniverse",
                column: "AnualAuditUniverseRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMIMBusinessRiskRating_BusinessRiskRatingId",
                table: "ARMIMBusinessRiskRating",
                column: "BusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMIMEMCRating_EMCConcernRiskRatingId",
                table: "ARMIMEMCRating",
                column: "EMCConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSecurityAnnualAuditUniverse_AnualAuditUniverseRiskRatingId",
                table: "ARMSecurityAnnualAuditUniverse",
                column: "AnualAuditUniverseRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSecurityEMCRating_EMCConcernRiskRatingId",
                table: "ARMSecurityEMCRating",
                column: "EMCConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSecurityRating_BusinessRiskRatingId",
                table: "ARMSecurityRating",
                column: "BusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverse_AnualAuditUniverseRiskRatingId",
                table: "ARMSharedAuditUniverse",
                column: "AnualAuditUniverseRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseAcademy_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseAcademy",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseARMShared_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseARMShared",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseCorporatestrategy_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseCorporatestrategy",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseCTU_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseCTU",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseCustomerExperience_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseCustomerExperience",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseDigitalFinanceService_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseDigitalFinanceService",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseHCM_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseHCM",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseInformationSecurity_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseInformationSecurity",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseInternalControl_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseInternalControl",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseIT_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseIT",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseLegal_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseLegal",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseMCC_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseMCC",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseProcurementAndAdmin_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseProcurementAndAdmin",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseRiskManagement_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseRiskManagement",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedAuditUniverseTreasury_ARMSharedAuditUniverseId",
                table: "ARMSharedAuditUniverseTreasury",
                column: "ARMSharedAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedServiceEMCRating_EMCConcernRiskRatingId",
                table: "ARMSharedServiceEMCRating",
                column: "EMCConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMSharedServiceRating_BusinessRiskRatingId",
                table: "ARMSharedServiceRating",
                column: "BusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMTAMAuditUniverse_AnualAuditUniverseRiskRatingId",
                table: "ARMTAMAuditUniverse",
                column: "AnualAuditUniverseRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMTAMBusinessRiskRating_BusinessRiskRatingId",
                table: "ARMTAMBusinessRiskRating",
                column: "BusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMTrusteeAuditUniverse_AnualAuditUniverseRiskRatingId",
                table: "ARMTrusteeAuditUniverse",
                column: "AnualAuditUniverseRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMTrusteeEMCRating_EMCConcernRiskRatingId",
                table: "ARMTrusteeEMCRating",
                column: "EMCConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ARMTrusteeRating_BusinessRiskRatingId",
                table: "ARMTrusteeRating",
                column: "BusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditAnnouncementMemoAuditExecution_CommenceEngagementAuditexecutionId",
                table: "AuditAnnouncementMemoAuditExecution",
                column: "CommenceEngagementAuditexecutionId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditFindingAuditReport_InternalAuditReportId",
                table: "AuditFindingAuditReport",
                column: "InternalAuditReportId");

            migrationBuilder.CreateIndex(
                name: "IX_AuditFindings_WorkerPaperId",
                table: "AuditFindings",
                column: "WorkerPaperId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditPlanningMemoAuditExecution_CommenceEngagementAuditexecutionId",
                table: "AuditPlanningMemoAuditExecution",
                column: "CommenceEngagementAuditexecutionId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditProgramAuditExecution_CommenceEngagementAuditexecutionId",
                table: "AuditProgramAuditExecution",
                column: "CommenceEngagementAuditexecutionId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMAgribusiness_ARMAgribusinessAuditUniverseId",
                table: "AuditUniverseARMAgribusiness",
                column: "ARMAgribusinessAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMAgribusinessAAFML_ARMAgribusinessAuditUniverseId",
                table: "AuditUniverseARMAgribusinessAAFML",
                column: "ARMAgribusinessAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMAgribusinessRFL_ARMAgribusinessAuditUniverseId",
                table: "AuditUniverseARMAgribusinessRFL",
                column: "ARMAgribusinessAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMAgriFinancialControlAAFML_ARMAgribusinessAuditUniverseId",
                table: "AuditUniverseARMAgriFinancialControlAAFML",
                column: "ARMAgribusinessAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMAgriFinancialControlRFL_ARMAgribusinessAuditUniverseId",
                table: "AuditUniverseARMAgriFinancialControlRFL",
                column: "ARMAgribusinessAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHill_ARMHillAuditUniverseId",
                table: "AuditUniverseARMHill",
                column: "ARMHillAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHillCompliance_ARMHillAuditUniverseId",
                table: "AuditUniverseARMHillCompliance",
                column: "ARMHillAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHillFinancialControl_ARMHillAuditUniverseId",
                table: "AuditUniverseARMHillFinancialControl",
                column: "ARMHillAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHillInvestmentPortfolio_ARMHillAuditUniverseId",
                table: "AuditUniverseARMHillInvestmentPortfolio",
                column: "ARMHillAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHoldCoCompliance_ARMHoldingCompanyAnnualAuditUniverseId",
                table: "AuditUniverseARMHoldCoCompliance",
                column: "ARMHoldingCompanyAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHoldCoFinancialControl_ARMHoldingCompanyAnnualAuditUniverseId",
                table: "AuditUniverseARMHoldCoFinancialControl",
                column: "ARMHoldingCompanyAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHoldCoTreasuryOperation_ARMHoldingCompanyAnnualAuditUniverseId",
                table: "AuditUniverseARMHoldCoTreasuryOperation",
                column: "ARMHoldingCompanyAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHoldCoTreasurySale_ARMHoldingCompanyAnnualAuditUniverseId",
                table: "AuditUniverseARMHoldCoTreasurySale",
                column: "ARMHoldingCompanyAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMHoldingCompany_ARMHoldingCompanyAnnualAuditUniverseId",
                table: "AuditUniverseARMHoldingCompany",
                column: "ARMHoldingCompanyAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMBDPWMIAMIMRetail_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMBDPWMIAMIMRetail",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMCompliance_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMCompliance",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMFinancialControl_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMFinancialControl",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMFundAccount_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMFundAccount",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMFundAdmin_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMFundAdmin",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMIMUnit_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMIMUnit",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMOperationControl_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMOperationControl",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMOperationSettlement_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMOperationSettlement",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMRegistrar_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMRegistrar",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMRetailOperation_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMRetailOperation",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMIMTreasuryInvestment_ARMIMAuditUniverseId",
                table: "AuditUniverseARMIMTreasuryInvestment",
                column: "ARMIMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMSecurity_ARMSecurityAnnualAuditUniverseId",
                table: "AuditUniverseARMSecurity",
                column: "ARMSecurityAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMSecurityCompliance_ARMSecurityAnnualAuditUniverseId",
                table: "AuditUniverseARMSecurityCompliance",
                column: "ARMSecurityAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMSecurityFinacialControl_ARMSecurityAnnualAuditUniverseId",
                table: "AuditUniverseARMSecurityFinacialControl",
                column: "ARMSecurityAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMSecurityFinancialAdvisory_ARMSecurityAnnualAuditUniverseId",
                table: "AuditUniverseARMSecurityFinancialAdvisory",
                column: "ARMSecurityAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMSecurityResearch_ARMSecurityAnnualAuditUniverseId",
                table: "AuditUniverseARMSecurityResearch",
                column: "ARMSecurityAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMSecuritySecurityOperation_ARMSecurityAnnualAuditUniverseId",
                table: "AuditUniverseARMSecuritySecurityOperation",
                column: "ARMSecurityAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMSecurityStockBroking_ARMSecurityAnnualAuditUniverseId",
                table: "AuditUniverseARMSecurityStockBroking",
                column: "ARMSecurityAnnualAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMTAM_ARMTAMAuditUniverseId",
                table: "AuditUniverseARMTAM",
                column: "ARMTAMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMTAMFinancialControl_ARMTAMAuditUniverseId",
                table: "AuditUniverseARMTAMFinancialControl",
                column: "ARMTAMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMTAMTreasuryOperation_ARMTAMAuditUniverseId",
                table: "AuditUniverseARMTAMTreasuryOperation",
                column: "ARMTAMAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMTrustee_ARMTrusteeAuditUniverseId",
                table: "AuditUniverseARMTrustee",
                column: "ARMTrusteeAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMTrusteeCommercialTrust_ARMTrusteeAuditUniverseId",
                table: "AuditUniverseARMTrusteeCommercialTrust",
                column: "ARMTrusteeAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMTrusteeCompliance_ARMTrusteeAuditUniverseId",
                table: "AuditUniverseARMTrusteeCompliance",
                column: "ARMTrusteeAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMTrusteeFinancialControl_ARMTrusteeAuditUniverseId",
                table: "AuditUniverseARMTrusteeFinancialControl",
                column: "ARMTrusteeAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuditUniverseARMTrusteePrivateTrust_ARMTrusteeAuditUniverseId",
                table: "AuditUniverseARMTrusteePrivateTrust",
                column: "ARMTrusteeAuditUniverseId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_BIAUnitProcessDetails_BusinessImpactAnalysisUnitId",
                table: "BIAUnitProcessDetails",
                column: "BusinessImpactAnalysisUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BIAUnitProcessDetailsBusinessUnitToRunProcess_BIAUnitProcessDetailsId",
                table: "BIAUnitProcessDetailsBusinessUnitToRunProcess",
                column: "BIAUnitProcessDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_BIAUnitProcessDetailsBusinessUnitToRunProcess_UnitId",
                table: "BIAUnitProcessDetailsBusinessUnitToRunProcess",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BusinessEntity_Name",
                table: "BusinessEntity",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_BusinessImpactAnalysisUnit_BusinessImpactAnalysisId",
                table: "BusinessImpactAnalysisUnit",
                column: "BusinessImpactAnalysisId");

            migrationBuilder.CreateIndex(
                name: "IX_BusinessImpactAnalysisUnit_UnitId",
                table: "BusinessImpactAnalysisUnit",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BusinessImpactAnalysisUnitLog_BusinessImpactAnalysisUnitId",
                table: "BusinessImpactAnalysisUnitLog",
                column: "BusinessImpactAnalysisUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_CitationAuditReport_InternalAuditReportId",
                table: "CitationAuditReport",
                column: "InternalAuditReportId");

            migrationBuilder.CreateIndex(
                name: "IX_CommenceEngagementAuditexecution_AnualAuditUniverseRiskRatingId",
                table: "CommenceEngagementAuditexecution",
                column: "AnualAuditUniverseRiskRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceAgribusiness_ARMAgribusinessRatingId",
                table: "ComplianceAgribusiness",
                column: "ARMAgribusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceAgribusinessRating_ComplianceAgribusinessId",
                table: "ComplianceAgribusinessRating",
                column: "ComplianceAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceAgribusinessRatingAAFML_ComplianceAgribusinessId",
                table: "ComplianceAgribusinessRatingAAFML",
                column: "ComplianceAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceAgribusinessRatingFinancialControlAAFML_ComplianceAgribusinessId",
                table: "ComplianceAgribusinessRatingFinancialControlAAFML",
                column: "ComplianceAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceAgribusinessRatingFinancialControlRFl_ComplianceAgribusinessId",
                table: "ComplianceAgribusinessRatingFinancialControlRFl",
                column: "ComplianceAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceAgribusinessRatingRFl_ComplianceAgribusinessId",
                table: "ComplianceAgribusinessRatingRFl",
                column: "ComplianceAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceBusinessARMTAM_ARMTAMBusinessRiskRatingId",
                table: "ComplianceBusinessARMTAM",
                column: "ARMTAMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceBusinessRatingARMHoldCo_ARMHoldingCompanyBusinessRatingId",
                table: "ComplianceBusinessRatingARMHoldCo",
                column: "ARMHoldingCompanyBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceBusinessRatingHill_ARMHillRatingId",
                table: "ComplianceBusinessRatingHill",
                column: "ARMHillRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceBusinessRatingTrustee_ARMTrusteeRatingId",
                table: "ComplianceBusinessRatingTrustee",
                column: "ARMTrusteeRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceBusinessTAMRating_ComplianceBusinessARMTAMId",
                table: "ComplianceBusinessTAMRating",
                column: "ComplianceBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceBusinessTAMRatingFinancialControl_ComplianceBusinessARMTAMId",
                table: "ComplianceBusinessTAMRatingFinancialControl",
                column: "ComplianceBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceBusinessTAMRatingTreasuryOperation_ComplianceBusinessARMTAMId",
                table: "ComplianceBusinessTAMRatingTreasuryOperation",
                column: "ComplianceBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceHillRating_ComplianceBusinessRatingHillId",
                table: "ComplianceHillRating",
                column: "ComplianceBusinessRatingHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceHillRatingCompliance_ComplianceBusinessRatingHillId",
                table: "ComplianceHillRatingCompliance",
                column: "ComplianceBusinessRatingHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceHillRatingFinancialControl_ComplianceBusinessRatingHillId",
                table: "ComplianceHillRatingFinancialControl",
                column: "ComplianceBusinessRatingHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMBusinessRating_ARMIMBusinessRiskRatingId",
                table: "ComplianceIMBusinessRating",
                column: "ARMIMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRating_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRating",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingARMRegistrar_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingARMRegistrar",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingBDPWMIAMIMRetail_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingBDPWMIAMIMRetail",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingCompliance_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingCompliance",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingFinancialControl_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingFinancialControl",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingFundAccount_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingFundAccount",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingFundAdmin_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingFundAdmin",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingOperationControl_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingOperationControl",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingOperationSettlement_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingOperationSettlement",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingRetailOperation_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingRetailOperation",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceIMRatingTreasuryInvestment_ComplianceIMBusinessRatingId",
                table: "ComplianceIMRatingTreasuryInvestment",
                column: "ComplianceIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceInvestmentPortfolio_ComplianceBusinessRatingHillId",
                table: "ComplianceInvestmentPortfolio",
                column: "ComplianceBusinessRatingHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceRules_ComplianceRegulatorId",
                table: "ComplianceRules",
                column: "ComplianceRegulatorId");

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceRulesBusiness_BusinessId",
                table: "ComplianceRulesBusiness",
                column: "BusinessId");

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceRulesBusiness_ComplianceRuleId",
                table: "ComplianceRulesBusiness",
                column: "ComplianceRuleId");

            migrationBuilder.CreateIndex(
                name: "IX_CompliancesBusinessCompliance_ComplianceBusinessRatingARMHoldCoId",
                table: "CompliancesBusinessCompliance",
                column: "ComplianceBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CompliancesBusinessFinancialControl_ComplianceBusinessRatingARMHoldCoId",
                table: "CompliancesBusinessFinancialControl",
                column: "ComplianceBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CompliancesBusinessRiskRatingARMHoldCo_ComplianceBusinessRatingARMHoldCoId",
                table: "CompliancesBusinessRiskRatingARMHoldCo",
                column: "ComplianceBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CompliancesBusinessTreasuryOperation_ComplianceBusinessRatingARMHoldCoId",
                table: "CompliancesBusinessTreasuryOperation",
                column: "ComplianceBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CompliancesBusinessTreasurySale_ComplianceBusinessRatingARMHoldCoId",
                table: "CompliancesBusinessTreasurySale",
                column: "ComplianceBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSecurity_ARMSecurityRatingId",
                table: "ComplianceSecurity",
                column: "ARMSecurityRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSecurityRating_ComplianceSecurityId",
                table: "ComplianceSecurityRating",
                column: "ComplianceSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSecurityRatingCompliance_ComplianceSecurityId",
                table: "ComplianceSecurityRatingCompliance",
                column: "ComplianceSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSecurityRatingFinancialAdvisory_ComplianceSecurityId",
                table: "ComplianceSecurityRatingFinancialAdvisory",
                column: "ComplianceSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSecurityRatingFinancialControl_ComplianceSecurityId",
                table: "ComplianceSecurityRatingFinancialControl",
                column: "ComplianceSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSecurityRatingResearch_ComplianceSecurityId",
                table: "ComplianceSecurityRatingResearch",
                column: "ComplianceSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSecurityRatingSecurityOperation_ComplianceSecurityId",
                table: "ComplianceSecurityRatingSecurityOperation",
                column: "ComplianceSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSecurityRatingStockBroking_ComplianceSecurityId",
                table: "ComplianceSecurityRatingStockBroking",
                column: "ComplianceSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedService_ARMSharedServiceRatingId",
                table: "ComplianceSharedService",
                column: "ARMSharedServiceRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRating_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRating",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingAcademy_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingAcademy",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingCorporatestrategy_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingCorporatestrategy",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingCTU_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingCTU",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingCustomerexperience_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingCustomerexperience",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingDigitalFinanceService_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingDigitalFinanceService",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingHCM_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingHCM",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingInformationSecurity_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingInformationSecurity",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingInternalControl_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingInternalControl",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingIT_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingIT",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingLegal_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingLegal",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingMCC_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingMCC",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingProcurementAndAdmin_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingProcurementAndAdmin",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingRiskManagement_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingRiskManagement",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceSharedServiceRatingTreasury_ComplianceSharedServiceId",
                table: "ComplianceSharedServiceRatingTreasury",
                column: "ComplianceSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceTrusteeRating_ComplianceBusinessRatingTrusteeId",
                table: "ComplianceTrusteeRating",
                column: "ComplianceBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceTrusteeRatingCommercialTrust_ComplianceBusinessRatingTrusteeId",
                table: "ComplianceTrusteeRatingCommercialTrust",
                column: "ComplianceBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceTrusteeRatingCompliance_ComplianceBusinessRatingTrusteeId",
                table: "ComplianceTrusteeRatingCompliance",
                column: "ComplianceBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceTrusteeRatingFinancialControl_ComplianceBusinessRatingTrusteeId",
                table: "ComplianceTrusteeRatingFinancialControl",
                column: "ComplianceBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComplianceTrusteeRatingPrivateTrust_ComplianceBusinessRatingTrusteeId",
                table: "ComplianceTrusteeRatingPrivateTrust",
                column: "ComplianceBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ConsolidatedAuditFinding_BusinessRiskRatingId",
                table: "ConsolidatedAuditFinding",
                column: "BusinessRiskRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_ConsolidatedAuditFindingActionDetail_ConsolidatedAuditFindingId",
                table: "ConsolidatedAuditFindingActionDetail",
                column: "ConsolidatedAuditFindingId");

            migrationBuilder.CreateIndex(
                name: "IX_Department_BusinessEntityId_Name",
                table: "Department",
                columns: new[] { "BusinessEntityId", "Name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_DocumentRSCAProcess_RiskControlSelfAssessmentUnitId",
                table: "DocumentRSCAProcess",
                column: "RiskControlSelfAssessmentUnitId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_DocumentRSCAProcessLog_DocumentRSCAProcessId",
                table: "DocumentRSCAProcessLog",
                column: "DocumentRSCAProcessId");

            migrationBuilder.CreateIndex(
                name: "IX_EMCConcernRiskRating_BusinessRiskRatingId",
                table: "EMCConcernRiskRating",
                column: "BusinessRiskRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_EngagementLetterAuditExecution_CommenceEngagementAuditexecutionId",
                table: "EngagementLetterAuditExecution",
                column: "CommenceEngagementAuditexecutionId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_EngagementLetterAuditExecutionDuration_EngagementLetterAuditExecutionId",
                table: "EngagementLetterAuditExecutionDuration",
                column: "EngagementLetterAuditExecutionId");

            migrationBuilder.CreateIndex(
                name: "IX_EngagementLetterReportDistributionList_EngagementLetterAuditExecutionId",
                table: "EngagementLetterReportDistributionList",
                column: "EngagementLetterAuditExecutionId");

            migrationBuilder.CreateIndex(
                name: "IX_FinacialAgribusinessRating_FinancialAgribusinessReportingId",
                table: "FinacialAgribusinessRating",
                column: "FinancialAgribusinessReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialAgribusinessRatingAAFML_FinancialAgribusinessReportingId",
                table: "FinacialAgribusinessRatingAAFML",
                column: "FinancialAgribusinessReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialAgribusinessRatingFinancialControlAAFML_FinancialAgribusinessReportingId",
                table: "FinacialAgribusinessRatingFinancialControlAAFML",
                column: "FinancialAgribusinessReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialAgribusinessRatingFinancialControlRFl_FinancialAgribusinessReportingId",
                table: "FinacialAgribusinessRatingFinancialControlRFl",
                column: "FinancialAgribusinessReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialAgribusinessRatingRFl_FinancialAgribusinessReportingId",
                table: "FinacialAgribusinessRatingRFl",
                column: "FinancialAgribusinessReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialBusinessTAMRating_FinancialBusinessARMTAMId",
                table: "FinacialBusinessTAMRating",
                column: "FinancialBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialHillRating_FinancialHillReportingId",
                table: "FinacialHillRating",
                column: "FinancialHillReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialHillRatingCompliance_FinancialHillReportingId",
                table: "FinacialHillRatingCompliance",
                column: "FinancialHillReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialHillRatingFinancialControl_FinancialHillReportingId",
                table: "FinacialHillRatingFinancialControl",
                column: "FinancialHillReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialHillRatingInvestmentPortfolio_FinancialHillReportingId",
                table: "FinacialHillRatingInvestmentPortfolio",
                column: "FinancialHillReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMBusinessRating_FinancialIMBusinessRatingId",
                table: "FinacialIMBusinessRating",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingARMRegistrar_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingARMRegistrar",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingBDPWMIAMIMRetail_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingBDPWMIAMIMRetail",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingCompliance_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingCompliance",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingFinancialControl_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingFinancialControl",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingFundAccount_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingFundAccount",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingFundAdmin_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingFundAdmin",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingOperationControl_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingOperationControl",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingOperationSettlement_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingOperationSettlement",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingRetailOperation_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingRetailOperation",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialIMRatingTreasuryInvestment_FinancialIMBusinessRatingId",
                table: "FinacialIMRatingTreasuryInvestment",
                column: "FinancialIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialRatingBusinessCompliance_FinancialReportingBusinessratingARMHoldCoId",
                table: "FinacialRatingBusinessCompliance",
                column: "FinancialReportingBusinessratingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialRatingBusinessFinancialControl_FinancialReportingBusinessratingARMHoldCoId",
                table: "FinacialRatingBusinessFinancialControl",
                column: "FinancialReportingBusinessratingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialRatingBusinessratingARMHoldCo_FinancialReportingBusinessratingARMHoldCoId",
                table: "FinacialRatingBusinessratingARMHoldCo",
                column: "FinancialReportingBusinessratingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialRatingBusinessratingTreasurySale_FinancialReportingBusinessratingARMHoldCoId",
                table: "FinacialRatingBusinessratingTreasurySale",
                column: "FinancialReportingBusinessratingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialRatingBusinessTreasuryOperation_FinancialReportingBusinessratingARMHoldCoId",
                table: "FinacialRatingBusinessTreasuryOperation",
                column: "FinancialReportingBusinessratingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSecurityRating_FinancialSecurityReportingId",
                table: "FinacialSecurityRating",
                column: "FinancialSecurityReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSecurityRatingCompliance_FinancialSecurityReportingId",
                table: "FinacialSecurityRatingCompliance",
                column: "FinancialSecurityReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSecurityRatingFinancialAdvisory_FinancialSecurityReportingId",
                table: "FinacialSecurityRatingFinancialAdvisory",
                column: "FinancialSecurityReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSecurityRatingFinancialControl_FinancialSecurityReportingId",
                table: "FinacialSecurityRatingFinancialControl",
                column: "FinancialSecurityReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSecurityRatingResearch_FinancialSecurityReportingId",
                table: "FinacialSecurityRatingResearch",
                column: "FinancialSecurityReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSecurityRatingSecurityOperation_FinancialSecurityReportingId",
                table: "FinacialSecurityRatingSecurityOperation",
                column: "FinancialSecurityReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSecurityRatingStockBroking_FinancialSecurityReportingId",
                table: "FinacialSecurityRatingStockBroking",
                column: "FinancialSecurityReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRating_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRating",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingAcademy_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingAcademy",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingCorporatestrategy_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingCorporatestrategy",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingCTU_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingCTU",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingCustomerexperience_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingCustomerexperience",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingDigitalFinanceService_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingDigitalFinanceService",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingHCM_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingHCM",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingInformationSecurity_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingInformationSecurity",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingInternalControl_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingInternalControl",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingIT_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingIT",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingLegal_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingLegal",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingMCC_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingMCC",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingProcurementAndAdmin_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingProcurementAndAdmin",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingRiskManagement_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingRiskManagement",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialSharedServiceRatingTreasury_FinancialSharedServiceReportingId",
                table: "FinacialSharedServiceRatingTreasury",
                column: "FinancialSharedServiceReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialTAMRatingFinancialControl_FinancialBusinessARMTAMId",
                table: "FinacialTAMRatingFinancialControl",
                column: "FinancialBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialTAMRatingTreasuryOperation_FinancialBusinessARMTAMId",
                table: "FinacialTAMRatingTreasuryOperation",
                column: "FinancialBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialTrusteeRating_FinancialTrusteeReportingId",
                table: "FinacialTrusteeRating",
                column: "FinancialTrusteeReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialTrusteeRatingCommercialTrust_FinancialTrusteeReportingId",
                table: "FinacialTrusteeRatingCommercialTrust",
                column: "FinancialTrusteeReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialTrusteeRatingCompliance_FinancialTrusteeReportingId",
                table: "FinacialTrusteeRatingCompliance",
                column: "FinancialTrusteeReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialTrusteeRatingFinancialControl_FinancialTrusteeReportingId",
                table: "FinacialTrusteeRatingFinancialControl",
                column: "FinancialTrusteeReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinacialTrusteeRatingPrivateTrust_FinancialTrusteeReportingId",
                table: "FinacialTrusteeRatingPrivateTrust",
                column: "FinancialTrusteeReportingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialAgribusinessReporting_ARMAgribusinessRatingId",
                table: "FinancialAgribusinessReporting",
                column: "ARMAgribusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialBusinessARMTAM_ARMTAMBusinessRiskRatingId",
                table: "FinancialBusinessARMTAM",
                column: "ARMTAMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialHillReporting_ARMHillRatingId",
                table: "FinancialHillReporting",
                column: "ARMHillRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialIMBusinessRating_ARMIMBusinessRiskRatingId",
                table: "FinancialIMBusinessRating",
                column: "ARMIMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialReportingBusinessratingARMHoldCo_ARMHoldingCompanyBusinessRatingId",
                table: "FinancialReportingBusinessratingARMHoldCo",
                column: "ARMHoldingCompanyBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialSecurityReporting_ARMSecurityRatingId",
                table: "FinancialSecurityReporting",
                column: "ARMSecurityRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialSharedServiceReporting_ARMSharedServiceRatingId",
                table: "FinancialSharedServiceReporting",
                column: "ARMSharedServiceRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialTrusteeReporting_ARMTrusteeRatingId",
                table: "FinancialTrusteeReporting",
                column: "ARMTrusteeRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_InformationRequirementAuditExecution_CommenceEngagementAuditexecutionId",
                table: "InformationRequirementAuditExecution",
                column: "CommenceEngagementAuditexecutionId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_InternalAuditRatingReport_InternalAuditReportId",
                table: "InternalAuditRatingReport",
                column: "InternalAuditReportId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalAuditReport_BusinessRiskRatingId",
                table: "InternalAuditReport",
                column: "BusinessRiskRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_LossManagement_RiskEventId",
                table: "LossManagement",
                column: "RiskEventId");

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernARMAgribusiness_ManagementConcernRiskRatingId",
                table: "ManagementConcernARMAgribusiness",
                column: "ManagementConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernARMHill_ManagementConcernRiskRatingId",
                table: "ManagementConcernARMHill",
                column: "ManagementConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernARMIM_ManagementConcernRiskRatingId",
                table: "ManagementConcernARMIM",
                column: "ManagementConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernARMSecurity_ManagementConcernRiskRatingId",
                table: "ManagementConcernARMSecurity",
                column: "ManagementConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernARMTrustee_ManagementConcernRiskRatingId",
                table: "ManagementConcernARMTrustee",
                column: "ManagementConcernRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernBusinessUnitARMAgribusinessRating_ManagementConcernARMAgribusinessId",
                table: "ManagementConcernBusinessUnitARMAgribusinessRating",
                column: "ManagementConcernARMAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernBusinessUnitARMHillRating_ManagementConcernARMHillId",
                table: "ManagementConcernBusinessUnitARMHillRating",
                column: "ManagementConcernARMHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernBusinessUnitARMIMRating_ManagementConcernARMIMId",
                table: "ManagementConcernBusinessUnitARMIMRating",
                column: "ManagementConcernARMIMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernBusinessUnitARMSecurityRating_ManagementConcernARMSecurityId",
                table: "ManagementConcernBusinessUnitARMSecurityRating",
                column: "ManagementConcernARMSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernBusinessUnitARMTrusteeRating_ManagementConcernARMTrusteeId",
                table: "ManagementConcernBusinessUnitARMTrusteeRating",
                column: "ManagementConcernARMTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernRiskRating_BusinessRiskRatingId",
                table: "ManagementConcernRiskRating",
                column: "BusinessRiskRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernSharedServiceARMAgribusinessRating_ManagementConcernARMAgribusinessId",
                table: "ManagementConcernSharedServiceARMAgribusinessRating",
                column: "ManagementConcernARMAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernSharedServiceARMHillRating_ManagementConcernARMHillId",
                table: "ManagementConcernSharedServiceARMHillRating",
                column: "ManagementConcernARMHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernSharedServiceARMIMRating_ManagementConcernARMIMId",
                table: "ManagementConcernSharedServiceARMIMRating",
                column: "ManagementConcernARMIMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernSharedServiceARMSecurityRating_ManagementConcernARMSecurityId",
                table: "ManagementConcernSharedServiceARMSecurityRating",
                column: "ManagementConcernARMSecurityId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementConcernSharedServiceARTrusteeRating_ManagementConcernARMTrusteeId",
                table: "ManagementConcernSharedServiceARTrusteeRating",
                column: "ManagementConcernARMTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ManagementResponseAuditReport_InternalAuditReportId",
                table: "ManagementResponseAuditReport",
                column: "InternalAuditReportId");

            migrationBuilder.CreateIndex(
                name: "IX_ObservationListAuditReport_InternalAuditReportId",
                table: "ObservationListAuditReport",
                column: "InternalAuditReportId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationAgribusiness_ARMAgribusinessRatingId",
                table: "OperationAgribusiness",
                column: "ARMAgribusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationAgribusinessRating_OperationAgribusinessId",
                table: "OperationAgribusinessRating",
                column: "OperationAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationAgribusinessRatingAAFML_OperationAgribusinessId",
                table: "OperationAgribusinessRatingAAFML",
                column: "OperationAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationAgribusinessRatingFinancialControlAAFML_OperationAgribusinessId",
                table: "OperationAgribusinessRatingFinancialControlAAFML",
                column: "OperationAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationAgribusinessRatingFinancialControlRFl_OperationAgribusinessId",
                table: "OperationAgribusinessRatingFinancialControlRFl",
                column: "OperationAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationAgribusinessRatingRFl_OperationAgribusinessId",
                table: "OperationAgribusinessRatingRFl",
                column: "OperationAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessArmHolco_OperationBusinessRatingARMHoldCoId",
                table: "OperationBusinessArmHolco",
                column: "OperationBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessARMTAM_ARMTAMBusinessRiskRatingId",
                table: "OperationBusinessARMTAM",
                column: "ARMTAMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessCompliance_OperationBusinessRatingARMHoldCoId",
                table: "OperationBusinessCompliance",
                column: "OperationBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessFinancialControl_OperationBusinessRatingARMHoldCoId",
                table: "OperationBusinessFinancialControl",
                column: "OperationBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessRatingARMHoldCo_ARMHoldingCompanyBusinessRatingId",
                table: "OperationBusinessRatingARMHoldCo",
                column: "ARMHoldingCompanyBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessRatingHill_ARMHillRatingId",
                table: "OperationBusinessRatingHill",
                column: "ARMHillRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessTAMRating_OperationBusinessARMTAMId",
                table: "OperationBusinessTAMRating",
                column: "OperationBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessTAMRatingFinancialControl_OperationBusinessARMTAMId",
                table: "OperationBusinessTAMRatingFinancialControl",
                column: "OperationBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessTAMRatingTreasuryOperation_OperationBusinessARMTAMId",
                table: "OperationBusinessTAMRatingTreasuryOperation",
                column: "OperationBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessTreasuryOperation_OperationBusinessRatingARMHoldCoId",
                table: "OperationBusinessTreasuryOperation",
                column: "OperationBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationBusinessTreasurySale_OperationBusinessRatingARMHoldCoId",
                table: "OperationBusinessTreasurySale",
                column: "OperationBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationHillRating_OperationBusinessRatingHillId",
                table: "OperationHillRating",
                column: "OperationBusinessRatingHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationHillRatingCompliance_OperationBusinessRatingHillId",
                table: "OperationHillRatingCompliance",
                column: "OperationBusinessRatingHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationHillRatingFinancialControl_OperationBusinessRatingHillId",
                table: "OperationHillRatingFinancialControl",
                column: "OperationBusinessRatingHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationHillRatingInvestmentPortfolio_OperationBusinessRatingHillId",
                table: "OperationHillRatingInvestmentPortfolio",
                column: "OperationBusinessRatingHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMBusinessRating_ARMIMBusinessRiskRatingId",
                table: "OperationIMBusinessRating",
                column: "ARMIMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingARMRegistrar_OperationIMBusinessRatingId",
                table: "OperationIMRatingARMRegistrar",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingBDPWMIAMIMRetail_OperationIMBusinessRatingId",
                table: "OperationIMRatingBDPWMIAMIMRetail",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingCompliance_OperationIMBusinessRatingId",
                table: "OperationIMRatingCompliance",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingFinancialControl_OperationIMBusinessRatingId",
                table: "OperationIMRatingFinancialControl",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingFundAccount_OperationIMBusinessRatingId",
                table: "OperationIMRatingFundAccount",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingFundAdmin_OperationIMBusinessRatingId",
                table: "OperationIMRatingFundAdmin",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingOperationControl_OperationIMBusinessRatingId",
                table: "OperationIMRatingOperationControl",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingOperationSettlement_OperationIMBusinessRatingId",
                table: "OperationIMRatingOperationSettlement",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingRetailOperation_OperationIMBusinessRatingId",
                table: "OperationIMRatingRetailOperation",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMRatingTreasuryInvestment_OperationIMBusinessRatingId",
                table: "OperationIMRatingTreasuryInvestment",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationIMUnitRating_OperationIMBusinessRatingId",
                table: "OperationIMUnitRating",
                column: "OperationIMBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSecurityBusinessRating_ARMSecurityRatingId",
                table: "OperationSecurityBusinessRating",
                column: "ARMSecurityRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSecurityRating_OperationSecurityBusinessRatingId",
                table: "OperationSecurityRating",
                column: "OperationSecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSecurityRatingCompliance_OperationSecurityBusinessRatingId",
                table: "OperationSecurityRatingCompliance",
                column: "OperationSecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSecurityRatingFinancialAdvisory_OperationSecurityBusinessRatingId",
                table: "OperationSecurityRatingFinancialAdvisory",
                column: "OperationSecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSecurityRatingFinancialControl_OperationSecurityBusinessRatingId",
                table: "OperationSecurityRatingFinancialControl",
                column: "OperationSecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSecurityRatingResearch_OperationSecurityBusinessRatingId",
                table: "OperationSecurityRatingResearch",
                column: "OperationSecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSecurityRatingSecurityOperation_OperationSecurityBusinessRatingId",
                table: "OperationSecurityRatingSecurityOperation",
                column: "OperationSecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSecurityRatingStockBroking_OperationSecurityBusinessRatingId",
                table: "OperationSecurityRatingStockBroking",
                column: "OperationSecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedService_ARMSharedServiceRatingId",
                table: "OperationSharedService",
                column: "ARMSharedServiceRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRating_OperationSharedServiceId",
                table: "OperationSharedServiceRating",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingAcademy_OperationSharedServiceId",
                table: "OperationSharedServiceRatingAcademy",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingCorporatestrategy_OperationSharedServiceId",
                table: "OperationSharedServiceRatingCorporatestrategy",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingCTU_OperationSharedServiceId",
                table: "OperationSharedServiceRatingCTU",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingCustomerexperience_OperationSharedServiceId",
                table: "OperationSharedServiceRatingCustomerexperience",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingDigitalFinanceService_OperationSharedServiceId",
                table: "OperationSharedServiceRatingDigitalFinanceService",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingHCM_OperationSharedServiceId",
                table: "OperationSharedServiceRatingHCM",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingInformationSecurity_OperationSharedServiceId",
                table: "OperationSharedServiceRatingInformationSecurity",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingInternalControl_OperationSharedServiceId",
                table: "OperationSharedServiceRatingInternalControl",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingIT_OperationSharedServiceId",
                table: "OperationSharedServiceRatingIT",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingLegal_OperationSharedServiceId",
                table: "OperationSharedServiceRatingLegal",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingMCC_OperationSharedServiceId",
                table: "OperationSharedServiceRatingMCC",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingProcurementAndAdmin_OperationSharedServiceId",
                table: "OperationSharedServiceRatingProcurementAndAdmin",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingRiskManagement_OperationSharedServiceId",
                table: "OperationSharedServiceRatingRiskManagement",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationSharedServiceRatingTreasury_OperationSharedServiceId",
                table: "OperationSharedServiceRatingTreasury",
                column: "OperationSharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationTrustee_ARMTrusteeRatingId",
                table: "OperationTrustee",
                column: "ARMTrusteeRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationTrusteeRating_OperationTrusteeId",
                table: "OperationTrusteeRating",
                column: "OperationTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationTrusteeRatingCommercialTrust_OperationTrusteeId",
                table: "OperationTrusteeRatingCommercialTrust",
                column: "OperationTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationTrusteeRatingCompliance_OperationTrusteeId",
                table: "OperationTrusteeRatingCompliance",
                column: "OperationTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationTrusteeRatingFinancialControl_OperationTrusteeId",
                table: "OperationTrusteeRatingFinancialControl",
                column: "OperationTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OperationTrusteeRatingPrivateTrust_OperationTrusteeId",
                table: "OperationTrusteeRatingPrivateTrust",
                column: "OperationTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProcessInherentRiskControl_DocumentRCSAProcessId",
                table: "ProcessInherentRiskControl",
                column: "DocumentRCSAProcessId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductAssessRisk_ProductRiskAssementId",
                table: "ProductAssessRisk",
                column: "ProductRiskAssementId");

            migrationBuilder.CreateIndex(
                name: "IX_RatedBusinessRiskRating_BusinessRiskRatingId",
                table: "RatedBusinessRiskRating",
                column: "BusinessRiskRatingId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskControlSelfAssessmentUnit_RiskControlSelfAssessmentId_Id",
                table: "RiskControlSelfAssessmentUnit",
                columns: new[] { "RiskControlSelfAssessmentId", "Id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RiskControlSelfAssessmentUnit_UnitId",
                table: "RiskControlSelfAssessmentUnit",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskDriver_Name",
                table: "RiskDriver",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RiskDriverCategory_RiskDriverId_Name",
                table: "RiskDriverCategory",
                columns: new[] { "RiskDriverId", "Name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RiskDriverSubCategory_RiskDriverCategoryId_Name",
                table: "RiskDriverSubCategory",
                columns: new[] { "RiskDriverCategoryId", "Name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RiskEffectManagement_EffectCategoryId",
                table: "RiskEffectManagement",
                column: "EffectCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEffectManagement_RiskEventId",
                table: "RiskEffectManagement",
                column: "RiskEventId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEvent_BusinessEntityId",
                table: "RiskEvent",
                column: "BusinessEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEvent_DepartmentId",
                table: "RiskEvent",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEvent_UnitId",
                table: "RiskEvent",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventManagement_EventCategoryId",
                table: "RiskEventManagement",
                column: "EventCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventManagement_EventSubCategoryId",
                table: "RiskEventManagement",
                column: "EventSubCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventManagement_EventTypeId",
                table: "RiskEventManagement",
                column: "EventTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventManagement_RiskDriverCategoryId",
                table: "RiskEventManagement",
                column: "RiskDriverCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventManagement_RiskDriverId",
                table: "RiskEventManagement",
                column: "RiskDriverId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventManagement_RiskDriverSubCategoryId",
                table: "RiskEventManagement",
                column: "RiskDriverSubCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventManagement_RiskEventId",
                table: "RiskEventManagement",
                column: "RiskEventId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventTypeCategory_RiskEventTypeId",
                table: "RiskEventTypeCategory",
                column: "RiskEventTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskEventTypeSubCategory_RiskEventTypeCategoryId",
                table: "RiskEventTypeSubCategory",
                column: "RiskEventTypeCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_RSCAProcess_UnitId",
                table: "RSCAProcess",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_StrategyAgribusiness_ARMAgribusinessRatingId",
                table: "StrategyAgribusiness",
                column: "ARMAgribusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyAgribusinessRating_StrategyAgribusinessId",
                table: "StrategyAgribusinessRating",
                column: "StrategyAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyAgribusinessRatingAAFML_StrategyAgribusinessId",
                table: "StrategyAgribusinessRatingAAFML",
                column: "StrategyAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyAgribusinessRatingFinancialControlAAFML_StrategyAgribusinessId",
                table: "StrategyAgribusinessRatingFinancialControlAAFML",
                column: "StrategyAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyAgribusinessRatingFinancialControlRFl_StrategyAgribusinessId",
                table: "StrategyAgribusinessRatingFinancialControlRFl",
                column: "StrategyAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyAgribusinessRatingRFl_StrategyAgribusinessId",
                table: "StrategyAgribusinessRatingRFl",
                column: "StrategyAgribusinessId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessArmHoldCo_StrategyBusinessRatingARMHoldCoId",
                table: "StrategyBusinessArmHoldCo",
                column: "StrategyBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessARMTAM_ARMTAMBusinessRiskRatingId",
                table: "StrategyBusinessARMTAM",
                column: "ARMTAMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessCompliance_StrategyBusinessRatingARMHoldCoId",
                table: "StrategyBusinessCompliance",
                column: "StrategyBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessFinancialControl_StrategyBusinessRatingARMHoldCoId",
                table: "StrategyBusinessFinancialControl",
                column: "StrategyBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessRatingARMHill_ARMHillRatingId",
                table: "StrategyBusinessRatingARMHill",
                column: "ARMHillRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessRatingARMHoldCo_ARMHoldingCompanyBusinessRatingId",
                table: "StrategyBusinessRatingARMHoldCo",
                column: "ARMHoldingCompanyBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessRatingTrustee_ARMTrusteeRatingId",
                table: "StrategyBusinessRatingTrustee",
                column: "ARMTrusteeRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessTAMRating_StrategyBusinessARMTAMId",
                table: "StrategyBusinessTAMRating",
                column: "StrategyBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessTAMRatingFinancialControl_StrategyBusinessARMTAMId",
                table: "StrategyBusinessTAMRatingFinancialControl",
                column: "StrategyBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessTAMRatingTreasuryOperation_StrategyBusinessARMTAMId",
                table: "StrategyBusinessTAMRatingTreasuryOperation",
                column: "StrategyBusinessARMTAMId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessTreasuryOperation_StrategyBusinessRatingARMHoldCoId",
                table: "StrategyBusinessTreasuryOperation",
                column: "StrategyBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyBusinessTreasurySale_StrategyBusinessRatingARMHoldCoId",
                table: "StrategyBusinessTreasurySale",
                column: "StrategyBusinessRatingARMHoldCoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyHillRating_StrategyBusinessRatingARMHillId",
                table: "StrategyHillRating",
                column: "StrategyBusinessRatingARMHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyHillRatingCompliance_StrategyBusinessRatingARMHillId",
                table: "StrategyHillRatingCompliance",
                column: "StrategyBusinessRatingARMHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyHillRatingFinancialControl_StrategyBusinessRatingARMHillId",
                table: "StrategyHillRatingFinancialControl",
                column: "StrategyBusinessRatingARMHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyHillRatingInvestmentPortfolio_StrategyBusinessRatingARMHillId",
                table: "StrategyHillRatingInvestmentPortfolio",
                column: "StrategyBusinessRatingARMHillId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyImBusinessRating_ARMIMBusinessRiskRatingId",
                table: "StrategyImBusinessRating",
                column: "ARMIMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRating_StrategyImBusinessRatingId",
                table: "StrategyIMRating",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingARMRegistrar_StrategyImBusinessRatingId",
                table: "StrategyIMRatingARMRegistrar",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingBDPWMIAMIMRetail_StrategyImBusinessRatingId",
                table: "StrategyIMRatingBDPWMIAMIMRetail",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingCompliance_StrategyImBusinessRatingId",
                table: "StrategyIMRatingCompliance",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingFinancialControl_StrategyImBusinessRatingId",
                table: "StrategyIMRatingFinancialControl",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingFundAccount_StrategyImBusinessRatingId",
                table: "StrategyIMRatingFundAccount",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingFundAdmin_StrategyImBusinessRatingId",
                table: "StrategyIMRatingFundAdmin",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingOperationControl_StrategyImBusinessRatingId",
                table: "StrategyIMRatingOperationControl",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingOperationSettlement_StrategyImBusinessRatingId",
                table: "StrategyIMRatingOperationSettlement",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingRetailOperation_StrategyImBusinessRatingId",
                table: "StrategyIMRatingRetailOperation",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyIMRatingTreasuryInvestment_StrategyImBusinessRatingId",
                table: "StrategyIMRatingTreasuryInvestment",
                column: "StrategyImBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySecurityBusinessRating_ARMSecurityRatingId",
                table: "StrategySecurityBusinessRating",
                column: "ARMSecurityRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySecurityRating_StrategySecurityBusinessRatingId",
                table: "StrategySecurityRating",
                column: "StrategySecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySecurityRatingCompliance_StrategySecurityBusinessRatingId",
                table: "StrategySecurityRatingCompliance",
                column: "StrategySecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySecurityRatingFinancialAdvisory_StrategySecurityBusinessRatingId",
                table: "StrategySecurityRatingFinancialAdvisory",
                column: "StrategySecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySecurityRatingFinancialControl_StrategySecurityBusinessRatingId",
                table: "StrategySecurityRatingFinancialControl",
                column: "StrategySecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySecurityRatingResearch_StrategySecurityBusinessRatingId",
                table: "StrategySecurityRatingResearch",
                column: "StrategySecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySecurityRatingSecurityOperation_StrategySecurityBusinessRatingId",
                table: "StrategySecurityRatingSecurityOperation",
                column: "StrategySecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySecurityRatingStockBroking_StrategySecurityBusinessRatingId",
                table: "StrategySecurityRatingStockBroking",
                column: "StrategySecurityBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedService_ARMSharedServiceRatingId",
                table: "StrategySharedService",
                column: "ARMSharedServiceRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRating_StrategySharedServiceId",
                table: "StrategySharedServiceRating",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingAcademy_StrategySharedServiceId",
                table: "StrategySharedServiceRatingAcademy",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingCorporatestrategy_StrategySharedServiceId",
                table: "StrategySharedServiceRatingCorporatestrategy",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingCTU_StrategySharedServiceId",
                table: "StrategySharedServiceRatingCTU",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingCustomerexperience_StrategySharedServiceId",
                table: "StrategySharedServiceRatingCustomerexperience",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingDigitalFinanceService_StrategySharedServiceId",
                table: "StrategySharedServiceRatingDigitalFinanceService",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingHCM_StrategySharedServiceId",
                table: "StrategySharedServiceRatingHCM",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingInformationSecurity_StrategySharedServiceId",
                table: "StrategySharedServiceRatingInformationSecurity",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingInternalControl_StrategySharedServiceId",
                table: "StrategySharedServiceRatingInternalControl",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingIT_StrategySharedServiceId",
                table: "StrategySharedServiceRatingIT",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingLegal_StrategySharedServiceId",
                table: "StrategySharedServiceRatingLegal",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingMCC_StrategySharedServiceId",
                table: "StrategySharedServiceRatingMCC",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingProcurementAndAdmin_StrategySharedServiceId",
                table: "StrategySharedServiceRatingProcurementAndAdmin",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingRiskManagement_StrategySharedServiceId",
                table: "StrategySharedServiceRatingRiskManagement",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategySharedServiceRatingTreasury_StrategySharedServiceId",
                table: "StrategySharedServiceRatingTreasury",
                column: "StrategySharedServiceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyTrusteeRating_StrategyBusinessRatingTrusteeId",
                table: "StrategyTrusteeRating",
                column: "StrategyBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyTrusteeRatingCommercialTrust_StrategyBusinessRatingTrusteeId",
                table: "StrategyTrusteeRatingCommercialTrust",
                column: "StrategyBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyTrusteeRatingCompliance_StrategyBusinessRatingTrusteeId",
                table: "StrategyTrusteeRatingCompliance",
                column: "StrategyBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyTrusteeRatingFinancialControl_StrategyBusinessRatingTrusteeId",
                table: "StrategyTrusteeRatingFinancialControl",
                column: "StrategyBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StrategyTrusteeRatingPrivateTrust_StrategyBusinessRatingTrusteeId",
                table: "StrategyTrusteeRatingPrivateTrust",
                column: "StrategyBusinessRatingTrusteeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TimeSinceLastAgribusinessAudit_ARMAgribusinessRatingId",
                table: "TimeSinceLastAgribusinessAudit",
                column: "ARMAgribusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TimeSinceLastAuditBusinessRatingARMHoldCo_ARMHoldingCompanyBusinessRatingId",
                table: "TimeSinceLastAuditBusinessRatingARMHoldCo",
                column: "ARMHoldingCompanyBusinessRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TimeSinceLastAuditIMBusinessRating_ARMIMBusinessRiskRatingId",
                table: "TimeSinceLastAuditIMBusinessRating",
                column: "ARMIMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TimeSinceLastBusinessARMTAMAudit_ARMTAMBusinessRiskRatingId",
                table: "TimeSinceLastBusinessARMTAMAudit",
                column: "ARMTAMBusinessRiskRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TimeSinceLastHillAudit_ARMHillRatingId",
                table: "TimeSinceLastHillAudit",
                column: "ARMHillRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TimeSinceLastSecurityAudit_ARMSecurityRatingId",
                table: "TimeSinceLastSecurityAudit",
                column: "ARMSecurityRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TimeSinceLastSharedServiceAudit_ARMSharedServiceRatingId",
                table: "TimeSinceLastSharedServiceAudit",
                column: "ARMSharedServiceRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TimeSinceLastTrusteeAudit_ARMTrusteeRatingId",
                table: "TimeSinceLastTrusteeAudit",
                column: "ARMTrusteeRatingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Unit_DepartmentId_Name",
                table: "Unit",
                columns: new[] { "DepartmentId", "Name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_User_UserRoleId",
                table: "User",
                column: "UserRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_UserRole_Name",
                table: "UserRole",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_WorkPaper_AuditProgramId",
                table: "WorkPaper",
                column: "AuditProgramId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ActionManagement");

            migrationBuilder.DropTable(
                name: "ARMAgribusinessEMCRating");

            migrationBuilder.DropTable(
                name: "ARMHILLEMCRating");

            migrationBuilder.DropTable(
                name: "ARMHoldingCompanyEMCRating");

            migrationBuilder.DropTable(
                name: "ARMIMEMCRating");

            migrationBuilder.DropTable(
                name: "ARMSecurityEMCRating");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseAcademy");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseARMShared");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseCorporatestrategy");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseCTU");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseCustomerExperience");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseDigitalFinanceService");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseHCM");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseInformationSecurity");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseInternalControl");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseIT");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseLegal");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseMCC");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseProcurementAndAdmin");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseRiskManagement");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverseTreasury");

            migrationBuilder.DropTable(
                name: "ARMSharedServiceEMCRating");

            migrationBuilder.DropTable(
                name: "ARMTrusteeEMCRating");

            migrationBuilder.DropTable(
                name: "AuditAnnouncementMemoAuditExecution");

            migrationBuilder.DropTable(
                name: "AuditFindingAuditReport");

            migrationBuilder.DropTable(
                name: "AuditFindings");

            migrationBuilder.DropTable(
                name: "AuditPlanningMemoAuditExecution");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMAgribusiness");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMAgribusinessAAFML");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMAgribusinessRFL");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMAgriFinancialControlAAFML");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMAgriFinancialControlRFL");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHill");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHillCompliance");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHillFinancialControl");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHillInvestmentPortfolio");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHoldCoCompliance");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHoldCoFinancialControl");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHoldCoTreasuryOperation");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHoldCoTreasurySale");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMHoldingCompany");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMBDPWMIAMIMRetail");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMCompliance");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMFinancialControl");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMFundAccount");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMFundAdmin");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMIMUnit");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMOperationControl");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMOperationSettlement");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMRegistrar");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMRetailOperation");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMIMTreasuryInvestment");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMSecurity");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMSecurityCompliance");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMSecurityFinacialControl");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMSecurityFinancialAdvisory");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMSecurityResearch");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMSecuritySecurityOperation");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMSecurityStockBroking");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMTAM");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMTAMFinancialControl");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMTAMTreasuryOperation");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMTrustee");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMTrusteeCommercialTrust");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMTrusteeCompliance");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMTrusteeFinancialControl");

            migrationBuilder.DropTable(
                name: "AuditUniverseARMTrusteePrivateTrust");

            migrationBuilder.DropTable(
                name: "BIAUnitProcessDetailsBusinessUnitToRunProcess");

            migrationBuilder.DropTable(
                name: "BusinessImpactAnalysisUnitLog");

            migrationBuilder.DropTable(
                name: "CitationAuditReport");

            migrationBuilder.DropTable(
                name: "ComplianceAgribusinessRating");

            migrationBuilder.DropTable(
                name: "ComplianceAgribusinessRatingAAFML");

            migrationBuilder.DropTable(
                name: "ComplianceAgribusinessRatingFinancialControlAAFML");

            migrationBuilder.DropTable(
                name: "ComplianceAgribusinessRatingFinancialControlRFl");

            migrationBuilder.DropTable(
                name: "ComplianceAgribusinessRatingRFl");

            migrationBuilder.DropTable(
                name: "ComplianceBusinessTAMRating");

            migrationBuilder.DropTable(
                name: "ComplianceBusinessTAMRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "ComplianceBusinessTAMRatingTreasuryOperation");

            migrationBuilder.DropTable(
                name: "ComplianceCalendar");

            migrationBuilder.DropTable(
                name: "ComplianceHillRating");

            migrationBuilder.DropTable(
                name: "ComplianceHillRatingCompliance");

            migrationBuilder.DropTable(
                name: "ComplianceHillRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "ComplianceIMRating");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingARMRegistrar");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingBDPWMIAMIMRetail");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingCompliance");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingFundAccount");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingFundAdmin");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingOperationControl");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingOperationSettlement");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingRetailOperation");

            migrationBuilder.DropTable(
                name: "ComplianceIMRatingTreasuryInvestment");

            migrationBuilder.DropTable(
                name: "ComplianceInvestmentPortfolio");

            migrationBuilder.DropTable(
                name: "ComplianceRegulatoryPayment");

            migrationBuilder.DropTable(
                name: "ComplianceRulesBusiness");

            migrationBuilder.DropTable(
                name: "CompliancesBusinessCompliance");

            migrationBuilder.DropTable(
                name: "CompliancesBusinessFinancialControl");

            migrationBuilder.DropTable(
                name: "CompliancesBusinessRiskRatingARMHoldCo");

            migrationBuilder.DropTable(
                name: "CompliancesBusinessTreasuryOperation");

            migrationBuilder.DropTable(
                name: "CompliancesBusinessTreasurySale");

            migrationBuilder.DropTable(
                name: "ComplianceSecurityRating");

            migrationBuilder.DropTable(
                name: "ComplianceSecurityRatingCompliance");

            migrationBuilder.DropTable(
                name: "ComplianceSecurityRatingFinancialAdvisory");

            migrationBuilder.DropTable(
                name: "ComplianceSecurityRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "ComplianceSecurityRatingResearch");

            migrationBuilder.DropTable(
                name: "ComplianceSecurityRatingSecurityOperation");

            migrationBuilder.DropTable(
                name: "ComplianceSecurityRatingStockBroking");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRating");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingAcademy");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingCorporatestrategy");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingCTU");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingCustomerexperience");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingDigitalFinanceService");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingHCM");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingInformationSecurity");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingInternalControl");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingIT");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingLegal");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingMCC");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingProcurementAndAdmin");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingRiskManagement");

            migrationBuilder.DropTable(
                name: "ComplianceSharedServiceRatingTreasury");

            migrationBuilder.DropTable(
                name: "ComplianceTrusteeRating");

            migrationBuilder.DropTable(
                name: "ComplianceTrusteeRatingCommercialTrust");

            migrationBuilder.DropTable(
                name: "ComplianceTrusteeRatingCompliance");

            migrationBuilder.DropTable(
                name: "ComplianceTrusteeRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "ComplianceTrusteeRatingPrivateTrust");

            migrationBuilder.DropTable(
                name: "ConsolidatedAuditFindingActionDetail");

            migrationBuilder.DropTable(
                name: "Document");

            migrationBuilder.DropTable(
                name: "DocumentRSCAProcessLog");

            migrationBuilder.DropTable(
                name: "Email");

            migrationBuilder.DropTable(
                name: "EngagementLetterAuditExecutionDuration");

            migrationBuilder.DropTable(
                name: "EngagementLetterReportDistributionList");

            migrationBuilder.DropTable(
                name: "FinacialAgribusinessRating");

            migrationBuilder.DropTable(
                name: "FinacialAgribusinessRatingAAFML");

            migrationBuilder.DropTable(
                name: "FinacialAgribusinessRatingFinancialControlAAFML");

            migrationBuilder.DropTable(
                name: "FinacialAgribusinessRatingFinancialControlRFl");

            migrationBuilder.DropTable(
                name: "FinacialAgribusinessRatingRFl");

            migrationBuilder.DropTable(
                name: "FinacialBusinessTAMRating");

            migrationBuilder.DropTable(
                name: "FinacialHillRating");

            migrationBuilder.DropTable(
                name: "FinacialHillRatingCompliance");

            migrationBuilder.DropTable(
                name: "FinacialHillRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "FinacialHillRatingInvestmentPortfolio");

            migrationBuilder.DropTable(
                name: "FinacialIMBusinessRating");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingARMRegistrar");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingBDPWMIAMIMRetail");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingCompliance");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingFundAccount");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingFundAdmin");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingOperationControl");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingOperationSettlement");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingRetailOperation");

            migrationBuilder.DropTable(
                name: "FinacialIMRatingTreasuryInvestment");

            migrationBuilder.DropTable(
                name: "FinacialRatingBusinessCompliance");

            migrationBuilder.DropTable(
                name: "FinacialRatingBusinessFinancialControl");

            migrationBuilder.DropTable(
                name: "FinacialRatingBusinessratingARMHoldCo");

            migrationBuilder.DropTable(
                name: "FinacialRatingBusinessratingTreasurySale");

            migrationBuilder.DropTable(
                name: "FinacialRatingBusinessTreasuryOperation");

            migrationBuilder.DropTable(
                name: "FinacialSecurityRating");

            migrationBuilder.DropTable(
                name: "FinacialSecurityRatingCompliance");

            migrationBuilder.DropTable(
                name: "FinacialSecurityRatingFinancialAdvisory");

            migrationBuilder.DropTable(
                name: "FinacialSecurityRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "FinacialSecurityRatingResearch");

            migrationBuilder.DropTable(
                name: "FinacialSecurityRatingSecurityOperation");

            migrationBuilder.DropTable(
                name: "FinacialSecurityRatingStockBroking");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRating");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingAcademy");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingCorporatestrategy");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingCTU");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingCustomerexperience");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingDigitalFinanceService");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingHCM");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingInformationSecurity");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingInternalControl");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingIT");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingLegal");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingMCC");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingProcurementAndAdmin");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingRiskManagement");

            migrationBuilder.DropTable(
                name: "FinacialSharedServiceRatingTreasury");

            migrationBuilder.DropTable(
                name: "FinacialTAMRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "FinacialTAMRatingTreasuryOperation");

            migrationBuilder.DropTable(
                name: "FinacialTrusteeRating");

            migrationBuilder.DropTable(
                name: "FinacialTrusteeRatingCommercialTrust");

            migrationBuilder.DropTable(
                name: "FinacialTrusteeRatingCompliance");

            migrationBuilder.DropTable(
                name: "FinacialTrusteeRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "FinacialTrusteeRatingPrivateTrust");

            migrationBuilder.DropTable(
                name: "InformationRequirementAuditExecution");

            migrationBuilder.DropTable(
                name: "InternalAuditRatingReport");

            migrationBuilder.DropTable(
                name: "LossManagement");

            migrationBuilder.DropTable(
                name: "ManagementConcernBusinessUnitARMAgribusinessRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernBusinessUnitARMHillRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernBusinessUnitARMIMRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernBusinessUnitARMSecurityRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernBusinessUnitARMTrusteeRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernSharedServiceARMAgribusinessRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernSharedServiceARMHillRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernSharedServiceARMIMRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernSharedServiceARMSecurityRating");

            migrationBuilder.DropTable(
                name: "ManagementConcernSharedServiceARTrusteeRating");

            migrationBuilder.DropTable(
                name: "ManagementResponseAuditReport");

            migrationBuilder.DropTable(
                name: "MonthlyARMAgribusinessRating");

            migrationBuilder.DropTable(
                name: "MonthlyARMHillRating");

            migrationBuilder.DropTable(
                name: "MonthlyARMHoldingCompanyRating");

            migrationBuilder.DropTable(
                name: "MonthlyARMIMRating");

            migrationBuilder.DropTable(
                name: "MonthlyARMSecurityRating");

            migrationBuilder.DropTable(
                name: "MonthlyARMSharedServiceRating");

            migrationBuilder.DropTable(
                name: "MonthlyARMTrusteeRating");

            migrationBuilder.DropTable(
                name: "ObservationListAuditReport");

            migrationBuilder.DropTable(
                name: "OperationAgribusinessRating");

            migrationBuilder.DropTable(
                name: "OperationAgribusinessRatingAAFML");

            migrationBuilder.DropTable(
                name: "OperationAgribusinessRatingFinancialControlAAFML");

            migrationBuilder.DropTable(
                name: "OperationAgribusinessRatingFinancialControlRFl");

            migrationBuilder.DropTable(
                name: "OperationAgribusinessRatingRFl");

            migrationBuilder.DropTable(
                name: "OperationBusinessArmHolco");

            migrationBuilder.DropTable(
                name: "OperationBusinessCompliance");

            migrationBuilder.DropTable(
                name: "OperationBusinessFinancialControl");

            migrationBuilder.DropTable(
                name: "OperationBusinessTAMRating");

            migrationBuilder.DropTable(
                name: "OperationBusinessTAMRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "OperationBusinessTAMRatingTreasuryOperation");

            migrationBuilder.DropTable(
                name: "OperationBusinessTreasuryOperation");

            migrationBuilder.DropTable(
                name: "OperationBusinessTreasurySale");

            migrationBuilder.DropTable(
                name: "OperationHillRating");

            migrationBuilder.DropTable(
                name: "OperationHillRatingCompliance");

            migrationBuilder.DropTable(
                name: "OperationHillRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "OperationHillRatingInvestmentPortfolio");

            migrationBuilder.DropTable(
                name: "OperationIMRatingARMRegistrar");

            migrationBuilder.DropTable(
                name: "OperationIMRatingBDPWMIAMIMRetail");

            migrationBuilder.DropTable(
                name: "OperationIMRatingCompliance");

            migrationBuilder.DropTable(
                name: "OperationIMRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "OperationIMRatingFundAccount");

            migrationBuilder.DropTable(
                name: "OperationIMRatingFundAdmin");

            migrationBuilder.DropTable(
                name: "OperationIMRatingOperationControl");

            migrationBuilder.DropTable(
                name: "OperationIMRatingOperationSettlement");

            migrationBuilder.DropTable(
                name: "OperationIMRatingRetailOperation");

            migrationBuilder.DropTable(
                name: "OperationIMRatingTreasuryInvestment");

            migrationBuilder.DropTable(
                name: "OperationIMUnitRating");

            migrationBuilder.DropTable(
                name: "OperationSecurityRating");

            migrationBuilder.DropTable(
                name: "OperationSecurityRatingCompliance");

            migrationBuilder.DropTable(
                name: "OperationSecurityRatingFinancialAdvisory");

            migrationBuilder.DropTable(
                name: "OperationSecurityRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "OperationSecurityRatingResearch");

            migrationBuilder.DropTable(
                name: "OperationSecurityRatingSecurityOperation");

            migrationBuilder.DropTable(
                name: "OperationSecurityRatingStockBroking");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRating");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingAcademy");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingCorporatestrategy");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingCTU");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingCustomerexperience");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingDigitalFinanceService");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingHCM");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingInformationSecurity");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingInternalControl");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingIT");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingLegal");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingMCC");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingProcurementAndAdmin");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingRiskManagement");

            migrationBuilder.DropTable(
                name: "OperationSharedServiceRatingTreasury");

            migrationBuilder.DropTable(
                name: "OperationTrusteeRating");

            migrationBuilder.DropTable(
                name: "OperationTrusteeRatingCommercialTrust");

            migrationBuilder.DropTable(
                name: "OperationTrusteeRatingCompliance");

            migrationBuilder.DropTable(
                name: "OperationTrusteeRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "OperationTrusteeRatingPrivateTrust");

            migrationBuilder.DropTable(
                name: "ProcessInherentRiskControl");

            migrationBuilder.DropTable(
                name: "ProductAssessRisk");

            migrationBuilder.DropTable(
                name: "RatedBusinessRiskRating");

            migrationBuilder.DropTable(
                name: "RecoveryType");

            migrationBuilder.DropTable(
                name: "RiskEffectManagement");

            migrationBuilder.DropTable(
                name: "RiskEventManagement");

            migrationBuilder.DropTable(
                name: "RSCAProcess");

            migrationBuilder.DropTable(
                name: "SessionTracker");

            migrationBuilder.DropTable(
                name: "StrategyAgribusinessRating");

            migrationBuilder.DropTable(
                name: "StrategyAgribusinessRatingAAFML");

            migrationBuilder.DropTable(
                name: "StrategyAgribusinessRatingFinancialControlAAFML");

            migrationBuilder.DropTable(
                name: "StrategyAgribusinessRatingFinancialControlRFl");

            migrationBuilder.DropTable(
                name: "StrategyAgribusinessRatingRFl");

            migrationBuilder.DropTable(
                name: "StrategyBusinessArmHoldCo");

            migrationBuilder.DropTable(
                name: "StrategyBusinessCompliance");

            migrationBuilder.DropTable(
                name: "StrategyBusinessFinancialControl");

            migrationBuilder.DropTable(
                name: "StrategyBusinessTAMRating");

            migrationBuilder.DropTable(
                name: "StrategyBusinessTAMRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "StrategyBusinessTAMRatingTreasuryOperation");

            migrationBuilder.DropTable(
                name: "StrategyBusinessTreasuryOperation");

            migrationBuilder.DropTable(
                name: "StrategyBusinessTreasurySale");

            migrationBuilder.DropTable(
                name: "StrategyHillRating");

            migrationBuilder.DropTable(
                name: "StrategyHillRatingCompliance");

            migrationBuilder.DropTable(
                name: "StrategyHillRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "StrategyHillRatingInvestmentPortfolio");

            migrationBuilder.DropTable(
                name: "StrategyIMRating");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingARMRegistrar");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingBDPWMIAMIMRetail");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingCompliance");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingFundAccount");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingFundAdmin");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingOperationControl");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingOperationSettlement");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingRetailOperation");

            migrationBuilder.DropTable(
                name: "StrategyIMRatingTreasuryInvestment");

            migrationBuilder.DropTable(
                name: "StrategySecurityRating");

            migrationBuilder.DropTable(
                name: "StrategySecurityRatingCompliance");

            migrationBuilder.DropTable(
                name: "StrategySecurityRatingFinancialAdvisory");

            migrationBuilder.DropTable(
                name: "StrategySecurityRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "StrategySecurityRatingResearch");

            migrationBuilder.DropTable(
                name: "StrategySecurityRatingSecurityOperation");

            migrationBuilder.DropTable(
                name: "StrategySecurityRatingStockBroking");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRating");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingAcademy");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingCorporatestrategy");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingCTU");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingCustomerexperience");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingDigitalFinanceService");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingHCM");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingInformationSecurity");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingInternalControl");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingIT");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingLegal");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingMCC");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingProcurementAndAdmin");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingRiskManagement");

            migrationBuilder.DropTable(
                name: "StrategySharedServiceRatingTreasury");

            migrationBuilder.DropTable(
                name: "StrategyTrusteeRating");

            migrationBuilder.DropTable(
                name: "StrategyTrusteeRatingCommercialTrust");

            migrationBuilder.DropTable(
                name: "StrategyTrusteeRatingCompliance");

            migrationBuilder.DropTable(
                name: "StrategyTrusteeRatingFinancialControl");

            migrationBuilder.DropTable(
                name: "StrategyTrusteeRatingPrivateTrust");

            migrationBuilder.DropTable(
                name: "TimeSinceLastAgribusinessAudit");

            migrationBuilder.DropTable(
                name: "TimeSinceLastAuditBusinessRatingARMHoldCo");

            migrationBuilder.DropTable(
                name: "TimeSinceLastAuditIMBusinessRating");

            migrationBuilder.DropTable(
                name: "TimeSinceLastBusinessARMTAMAudit");

            migrationBuilder.DropTable(
                name: "TimeSinceLastHillAudit");

            migrationBuilder.DropTable(
                name: "TimeSinceLastSecurityAudit");

            migrationBuilder.DropTable(
                name: "TimeSinceLastSharedServiceAudit");

            migrationBuilder.DropTable(
                name: "TimeSinceLastTrusteeAudit");

            migrationBuilder.DropTable(
                name: "User");

            migrationBuilder.DropTable(
                name: "ARMSharedAuditUniverse");

            migrationBuilder.DropTable(
                name: "EMCConcernRiskRating");

            migrationBuilder.DropTable(
                name: "WorkPaper");

            migrationBuilder.DropTable(
                name: "ARMAgribusinessAuditUniverse");

            migrationBuilder.DropTable(
                name: "ARMHillAuditUniverse");

            migrationBuilder.DropTable(
                name: "ARMHoldingCompanyAnnualAuditUniverse");

            migrationBuilder.DropTable(
                name: "ARMIMAuditUniverse");

            migrationBuilder.DropTable(
                name: "ARMSecurityAnnualAuditUniverse");

            migrationBuilder.DropTable(
                name: "ARMTAMAuditUniverse");

            migrationBuilder.DropTable(
                name: "ARMTrusteeAuditUniverse");

            migrationBuilder.DropTable(
                name: "BIAUnitProcessDetails");

            migrationBuilder.DropTable(
                name: "ComplianceAgribusiness");

            migrationBuilder.DropTable(
                name: "ComplianceBusinessARMTAM");

            migrationBuilder.DropTable(
                name: "ComplianceIMBusinessRating");

            migrationBuilder.DropTable(
                name: "ComplianceBusinessRatingHill");

            migrationBuilder.DropTable(
                name: "ComplianceBusines");

            migrationBuilder.DropTable(
                name: "ComplianceRules");

            migrationBuilder.DropTable(
                name: "ComplianceBusinessRatingARMHoldCo");

            migrationBuilder.DropTable(
                name: "ComplianceSecurity");

            migrationBuilder.DropTable(
                name: "ComplianceSharedService");

            migrationBuilder.DropTable(
                name: "ComplianceBusinessRatingTrustee");

            migrationBuilder.DropTable(
                name: "ConsolidatedAuditFinding");

            migrationBuilder.DropTable(
                name: "EngagementLetterAuditExecution");

            migrationBuilder.DropTable(
                name: "FinancialAgribusinessReporting");

            migrationBuilder.DropTable(
                name: "FinancialHillReporting");

            migrationBuilder.DropTable(
                name: "FinancialIMBusinessRating");

            migrationBuilder.DropTable(
                name: "FinancialReportingBusinessratingARMHoldCo");

            migrationBuilder.DropTable(
                name: "FinancialSecurityReporting");

            migrationBuilder.DropTable(
                name: "FinancialSharedServiceReporting");

            migrationBuilder.DropTable(
                name: "FinancialBusinessARMTAM");

            migrationBuilder.DropTable(
                name: "FinancialTrusteeReporting");

            migrationBuilder.DropTable(
                name: "ManagementConcernARMAgribusiness");

            migrationBuilder.DropTable(
                name: "ManagementConcernARMHill");

            migrationBuilder.DropTable(
                name: "ManagementConcernARMIM");

            migrationBuilder.DropTable(
                name: "ManagementConcernARMSecurity");

            migrationBuilder.DropTable(
                name: "ManagementConcernARMTrustee");

            migrationBuilder.DropTable(
                name: "InternalAuditReport");

            migrationBuilder.DropTable(
                name: "OperationAgribusiness");

            migrationBuilder.DropTable(
                name: "OperationBusinessARMTAM");

            migrationBuilder.DropTable(
                name: "OperationBusinessRatingARMHoldCo");

            migrationBuilder.DropTable(
                name: "OperationBusinessRatingHill");

            migrationBuilder.DropTable(
                name: "OperationIMBusinessRating");

            migrationBuilder.DropTable(
                name: "OperationSecurityBusinessRating");

            migrationBuilder.DropTable(
                name: "OperationSharedService");

            migrationBuilder.DropTable(
                name: "OperationTrustee");

            migrationBuilder.DropTable(
                name: "DocumentRSCAProcess");

            migrationBuilder.DropTable(
                name: "ProductRiskAssessment");

            migrationBuilder.DropTable(
                name: "RiskEffectCategory");

            migrationBuilder.DropTable(
                name: "RiskDriverSubCategory");

            migrationBuilder.DropTable(
                name: "RiskEventTypeSubCategory");

            migrationBuilder.DropTable(
                name: "RiskEvent");

            migrationBuilder.DropTable(
                name: "StrategyAgribusiness");

            migrationBuilder.DropTable(
                name: "StrategyBusinessARMTAM");

            migrationBuilder.DropTable(
                name: "StrategyBusinessRatingARMHoldCo");

            migrationBuilder.DropTable(
                name: "StrategyBusinessRatingARMHill");

            migrationBuilder.DropTable(
                name: "StrategyImBusinessRating");

            migrationBuilder.DropTable(
                name: "StrategySecurityBusinessRating");

            migrationBuilder.DropTable(
                name: "StrategySharedService");

            migrationBuilder.DropTable(
                name: "StrategyBusinessRatingTrustee");

            migrationBuilder.DropTable(
                name: "UserRole");

            migrationBuilder.DropTable(
                name: "AuditProgramAuditExecution");

            migrationBuilder.DropTable(
                name: "BusinessImpactAnalysisUnit");

            migrationBuilder.DropTable(
                name: "ComplianceRegulator");

            migrationBuilder.DropTable(
                name: "ManagementConcernRiskRating");

            migrationBuilder.DropTable(
                name: "RiskControlSelfAssessmentUnit");

            migrationBuilder.DropTable(
                name: "RiskDriverCategory");

            migrationBuilder.DropTable(
                name: "RiskEventTypeCategory");

            migrationBuilder.DropTable(
                name: "ARMAgribusinessRating");

            migrationBuilder.DropTable(
                name: "ARMTAMBusinessRiskRating");

            migrationBuilder.DropTable(
                name: "ARMHoldingCompanyBusinessRating");

            migrationBuilder.DropTable(
                name: "ARMHillRating");

            migrationBuilder.DropTable(
                name: "ARMIMBusinessRiskRating");

            migrationBuilder.DropTable(
                name: "ARMSecurityRating");

            migrationBuilder.DropTable(
                name: "ARMSharedServiceRating");

            migrationBuilder.DropTable(
                name: "ARMTrusteeRating");

            migrationBuilder.DropTable(
                name: "CommenceEngagementAuditexecution");

            migrationBuilder.DropTable(
                name: "BusinessImpactAnalysis");

            migrationBuilder.DropTable(
                name: "RiskControlSelfAssessment");

            migrationBuilder.DropTable(
                name: "Unit");

            migrationBuilder.DropTable(
                name: "RiskDriver");

            migrationBuilder.DropTable(
                name: "RiskEventType");

            migrationBuilder.DropTable(
                name: "AnualAuditUniverseRiskRating");

            migrationBuilder.DropTable(
                name: "Department");

            migrationBuilder.DropTable(
                name: "BusinessRiskRating");

            migrationBuilder.DropTable(
                name: "BusinessEntity");
        }
    }
}
