using Arm.GrcApi.Modules.VulnerabilityManagement;
using Arm.GrcTool.InfrastruCTOre;
using Arm.GrcTool.Infrastructure;
using GrcApi.Modules.Shared.Helpers;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    /*
        * Original Author: Sodiq Quadre
        * Date Created: 05/31/2025
        * Development Group: GRCTools
        * Internal Vulnerability approval endpoint
        */
    public class ApproveVulnerabilityEndpoint
    {
        /// <summary>
        /// Internal Vulnerability approval endpoint
        /// </summary>
        /// <param name="payload"></param>
        /// <param name="vulneribiltyRepo"></param>
        /// <param name="currentUserService"></param>
        /// <returns></returns>
        public static async Task<IResult> HandleAsync(
           ApproveVulnerabilityRequest payload, IRepository<InternalVulnerability> vulneribiltyRepo, IRepository<VulnerabilityModel> inVuln, ICurrentUserService currentUserService
        )
        {
            try
            {
                var update = vulneribiltyRepo.GetContextByConditon(v => v.Id == payload.InternalVulnerabilityId && v.Status == VulnerabilityStatus.Resolved).FirstOrDefault();
                if (update is null) return TypedResults.NotFound("Internal Vulnerability was not found or it has not been resolved");
                if(update.Action == VulnerabilityStatus.Approve)
                {
                    return TypedResults.BadRequest("Internal Vulnerability has been previously approved");
                }
                var UpdateinVuln = inVuln.GetContextByConditon(v => v.Id == update.VulnerabilityModelId).FirstOrDefault();
                UpdateinVuln.UpdateApproval(currentUserService.CurrentUserFullName);
                update.ApproveVulnerability();
                update.SetModifiedBy(currentUserService.CurrentUserFullName);
                update.SetModifiedOnUtc(DateTime.Now);
                vulneribiltyRepo.SaveChanges();

                return TypedResults.Ok("Approved successfully");
            }
            catch (Exception ex)
            {

                return TypedResults.BadRequest("Approval was not successfully");
            }
        }
    }
}
