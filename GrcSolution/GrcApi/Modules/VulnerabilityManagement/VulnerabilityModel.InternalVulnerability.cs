using Arm.GrcApi.Modules.AntivirusAssessment;
using Arm.GrcApi.Modules.Compliance.CompliancePlanning;
using Arm.GrcApi.Modules.IncidentManagement;
using Arm.GrcApi.Modules.InternalControl;
using Arm.GrcApi.Modules.Shared;
using GrcApi.Modules.VulnerabilityManagement;
using System.ComponentModel;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    public enum VulnerabilityStatus
    {
        [Description("PENDING APPROVAL")] Pending = 1,
        [Description("RESOLVED")] Resolved,
        [Description("UNRESOLVED")] UnResolved,
        [Description("AWAITING APPROVAL")] Awaiting_Approval,
        [Description("COMPLETED")]  Completed,
        [Description("APPROVED")] Approve,
        [Description("REJECTED")] Rejected
    }

    public class InternalVulnerability : AuditEntity2
    {
        public Guid Id { get; init; } = Guid.NewGuid();
        public Guid VulnerabilityModelId { get; private set; }
        public string? IP { get; private set; } = null;
        public string? DNS { get; private set; } = null;
        public string? NETBIOS { get; private set; } = null;
        public string? Vulnerability { get; private set; } = null;
        public string? Rating { get; private set; } = null;
        public string? Port { get; private set; } = null;
        public string? Proptocol { get; private set; } = null;
        public string? Threat { get; private set; } = null;
        public string? Impact { get; private set; } = null;
        public string? Solution { get; private set; } = null;
        public string? Classification { get; private set; } = null;
        public string? ReClassification { get; private set; } = null;
        public string? Comment { get; set; } = null;
        public VulnerabilityStatus Status { get; private set; } = VulnerabilityStatus.UnResolved;
        public VulnerabilityStatus ActionOwnerStatus { get; private set; } = VulnerabilityStatus.UnResolved;
        public VulnerabilityStatus? Action { get; private set; } = null;
        public VulnerabilityModel VulnerabilityModel { get; private set; }

        public static InternalVulnerability ExcelUploadCreate(Guid id, VulnerabilityModelReq request)
        {
            return new InternalVulnerability
            {
                VulnerabilityModelId = id,
                IP = request?.IP,
                DNS = request?.DNS,
                NETBIOS = request?.NETBIOS,
                Vulnerability = request?.Vulnerability,
                Rating = request?.Rating,
                Port = request?.Port,
                Proptocol = request?.Protocol,
                Threat = request?.Threat,
                Impact = request?.Impact,
                Solution = request?.Solution,
                Classification = request?.Classification
            };
        }

        public void ActionOwnerReclasifyVulnerability(string reClassification)
        {
            ReClassification = reClassification;            
        }

        public void ApproveVulnerability()
        {
            Action = VulnerabilityStatus.Approve;
        }
        public void RejectVulnerability(string comment)
        {
            Comment = comment;
            Action = VulnerabilityStatus.Rejected;
        }

        public void UpdateAfterActionOwnerResponse(VulnerabilityStatus status, string? classification)
        {
            Status = status;
            //ActionOwnerStatus = status;

            if (!string.IsNullOrWhiteSpace(classification)) 
                Classification = classification;
        }

        public void UpdateActionStatus(VulnerabilityStatus action, string comment)
        {
            Action = action;
            Comment = comment;
        }

        public void EditInternalVulnerabilty(UpdateActionownerResponse request)
        {
            Classification = request?.Classification;
            ReClassification = request?.Classification;
            Status = request.Status;
        }

        public void ResetAction()
        {
            Action = null;
        }
    }
}
