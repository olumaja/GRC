using Arm.GrcApi.Modules.VulnerabilityManagement;
using Arm.GrcTool.Infrastructure;
using GrcApi.Modules.Shared.Helpers;
using GrcApi.Modules.VulnerabilityManagement;
using static Arm.GrcTool.Domain.RiskEvent.RiskEvent;
using System.Linq;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    /*
   * Original Author: Sodiq Quadre
   * Date Created: 05/29/2025
   * Development Group: GRCTools
   * Infosec Get all Action Owner feedback Endpoint
   */
    public class InfosecViewActionOwnerFeedbackEndpoint
    {
        /// <summary>
        /// Infosec Get all Action Owner feedback Endpoint
        /// </summary>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        /// <param name="logtype"></param>
        /// <param name="status"></param>
        /// <param name="requester"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="search"></param>
        /// <param name="repo"></param>
        /// <param name="currentUserService"></param>
        /// <param name="httpContext"></param>
        /// <returns></returns>
        public static async Task<IResult> HandleAsync(
            int pageSize, int pageNumber, string? status, string? requester, DateTime? startDate, DateTime? endDate, string? search,
            IRepository<VulnerabilityModel> repo, ICurrentUserService currentUserService, IHttpContextAccessor httpContext
        )
        {
            try
            {               
                var internalVul = repo.GetContextByConditon(x => x.VulnerabilityStatus == VulnerabilityStatus.Completed || x.VulnerabilityStatus == VulnerabilityStatus.Awaiting_Approval);

                if (startDate != null || endDate != null)
                {
                    internalVul = internalVul.Where(d => d.CreatedOnUtc.Date >= startDate.Value.Date && d.CreatedOnUtc.Date <= endDate.Value.Date);
                }
                if (startDate > endDate)
                {
                    return TypedResults.BadRequest("Oops, EndDate cannot be earlier than StartDate");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    var getStatus = status.ToLower();
                    var statusRecommended = new Dictionary<string, VulnerabilityStatus>
                    {
                         {"completed",  VulnerabilityStatus.Completed}, {"awaiting approval", VulnerabilityStatus.Awaiting_Approval}
                    };

                    if (!statusRecommended.ContainsKey(getStatus))
                        return TypedResults.BadRequest($"Enter one of the following recommended status {string.Join(",", statusRecommended.Keys)}");

                    internalVul = internalVul.Where(d => d.VulnerabilityStatus == statusRecommended[getStatus]);
                }
                if (!string.IsNullOrEmpty(requester))
                {
                    internalVul = internalVul.Where(d => d.CreatedBy.ToLower() == requester.ToLower());
                }

                if (!string.IsNullOrEmpty(search))
                {
                    internalVul = internalVul.Where(d => d.CreatedBy.Contains(search) || d.ReasonForRejection.Contains(search) ||
                        d.CreatedBy.Contains(search) || d.ModifiedBy.Contains(search) || d.ActionOwnerUnit.Contains(search) ||
                        d.AssessmentType.Contains(search) || d.TitleOfAssessment.Contains(search) || d.ApprovedBy.Contains(search)
                    );
                }

                const int MaxPageSize = 100, DefaultPageSize = 10, DefaultPageNumber = 1;

                if (pageSize > MaxPageSize)
                    pageSize = MaxPageSize;

                if (pageSize < 1)
                    pageSize = DefaultPageSize;

                if (pageNumber < DefaultPageNumber)
                    pageNumber = DefaultPageNumber;

                var paginatedTasks = Pagination<VulnerabilityModel>.Create(internalVul.OrderByDescending(r => r.CreatedOnUtc), pageNumber, pageSize);

                var paginationMeta = new PaginationMeta
                (
                    paginatedTasks.HasNextPage,
                    paginatedTasks.HasPreviousPage,
                    paginatedTasks.CurrentPage,
                    paginatedTasks.PageSize,
                    paginatedTasks.TotalPages,
                    paginatedTasks.TotalCount
                );
                httpContext.HttpContext.Response.AddPagination(paginationMeta);
                var response = new PaginatedGetInternalVulnerabilityResp(
                 paginationMeta,
                   paginatedTasks.Select(e => new GetInternalVulnerabilityResponse
                   {
                       InternalVulnerabilityFileId = e.Id,
                       Date = e.CreatedOnUtc.ToString("MM/dd/yyyy hh:mm tt"),
                       AssessmentType = e.AssessmentType,
                       AssessmentTitle = e.TitleOfAssessment,
                       Initiator = e.CreatedBy,
                       ActionOwner = e.ActionOwner,
                       Status = e.VulnerabilityStatus.ToString(),
                   }).ToList());
                return TypedResults.Ok(response);
            }
            catch (Exception ex)
            {
                return TypedResults.NotFound("Record was not found");
            }
        }
    }
}
