using Arm.GrcApi.Modules.VulnerabilityManagement;
using Arm.GrcTool.Infrastructure;
using Microsoft.EntityFrameworkCore;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;

namespace GrcApi.Modules.VulnerabilityManagement
{
    public class SubmitApprovedVulnerabilitiesEndpoints
    {
        public static async Task<IResult> HandleAsync(SubmitVulnerabiltyModelDt0 payload, IRepository<VulnerabilityModel> vulnerabilityRepo)
        {
            var vulnerability = vulnerabilityRepo.GetContextByConditon(v => v.Id == payload.vulnerabilityModelId)
                                                .Include(v => v.InternalVulnerabilities)
                                                .FirstOrDefault();

            if (vulnerability is null)
                return TypedResults.NotFound("Record not found");

            if (vulnerability.InternalVulnerabilities.Any(v => v.Action != VulnerabilityStatus.Approve))
                return TypedResults.BadRequest("Some records are yet to be approve");

            vulnerability.SetInfosecFeedbackStatus(VulnerabilityStatus.Completed, string.Empty);
            vulnerability.SetModifiedOnUtc(DateTime.Now);
            vulnerabilityRepo.SaveChanges();
            return TypedResults.Ok("Submit successful");
        }
    }
}
