using Arm.GrcApi.Modules.VulnerabilityManagement;
using Arm.GrcTool.Infrastructure;
using GrcApi.Modules.VulnerabilityManagement;
using Microsoft.EntityFrameworkCore;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    /*
        * Original Author: Olusegun Adaramaja
        * Date Created: 02/06/2025
        * Development Group: GRCTools
        * Generate statistic of issues     
        */
    public class ViewTrackerEndpoint
    {
        /// <summary>
        /// Generate statistic of issues resolved and unsolved with their rating
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        public static async Task<IResult> HandleAsync(
            Guid VunerabilityId, IRepository<VulnerabilityModel> vulneribiltyRepo, IRepository<InternalVulnerability> repo
        )
        {
            var vulnerability = vulneribiltyRepo.GetContextByConditon(v => v.Id == VunerabilityId)
                                                .Include(v => v.InternalVulnerabilities)
                                                .FirstOrDefault();
            if (vulnerability is null)
                return TypedResults.NotFound("No record found");

            var forActionVulnerabilities = vulnerability.InternalVulnerabilities.Where(v => v.Classification.ToUpper() == "FOR ACTION");

            #region Issues raised
            var criticalIssueRaisedIPs = forActionVulnerabilities.Where(v => v.Rating.ToUpper() == "CRITICAL")
                                                            .Select(v => v.IP).ToHashSet();
            var criticalIssueRaisedCount = criticalIssueRaisedIPs.Count();

            var mediumIssueRaisedIPs = forActionVulnerabilities.Where(v => v.Rating.ToUpper() == "MEDIUM")
                                                                .Select(v => v.IP).ToHashSet();
            var mediumIssueRaisedCount = mediumIssueRaisedIPs.Count();

            var highIssueRaisedIPs = forActionVulnerabilities.Where(v => v.Rating.ToUpper() == "HIGH")
                                                           .Select(v => v.IP).ToHashSet();
            var highIssueRaisedCount = highIssueRaisedIPs.Count();
            #endregion

            #region Issues resolved
            var criticalIssueResolvedIPs = forActionVulnerabilities.Where(v => v.Rating.ToUpper() == "CRITICAL" && v.Status == VulnerabilityStatus.Resolved)
                                                                .Select(v => v.IP).ToHashSet();
            var criticalIssueResolvedCount = criticalIssueResolvedIPs.Count();

            var mediumIssueResolvedIPs = forActionVulnerabilities.Where(v => v.Rating.ToUpper() == "MEDIUM" && v.Status == VulnerabilityStatus.Resolved)
                                                                .Select(v => v.IP).ToHashSet();
            var mediumIssueResolvedCount = mediumIssueResolvedIPs.Count();

            var highIssueResolvedIPs = forActionVulnerabilities.Where(v => v.Rating.ToUpper() == "HIGH" && v.Status == VulnerabilityStatus.Resolved)
                                                            .Select(v => v.IP).ToHashSet();
            var highIssueResolvedCount = highIssueResolvedIPs.Count();
            #endregion

            #region Outstanding Issues
            var pendingIssuesIPs = forActionVulnerabilities.Where(v => v.Status == VulnerabilityStatus.Resolved && v.Action == null)
                                                        .Select(v => v.IP).ToHashSet();
            var pendingIssuesCount = pendingIssuesIPs.Count();                                            
            var unresolvedIssuesIPs = forActionVulnerabilities.Where(v => v.Status == VulnerabilityStatus.UnResolved)
                                                            .Select(v => v.IP).ToHashSet();
            var unresolvedIssuesCount = unresolvedIssuesIPs.Count();                                            
            #endregion

            return TypedResults.Ok(new InternalVulnerabilityDto(
                TotalIssuesRaised: criticalIssueRaisedCount + mediumIssueRaisedCount + highIssueRaisedCount,
                CriticalIssueRaised: criticalIssueRaisedCount,
                MediumIssueRaised: mediumIssueRaisedCount,
                HighIssueRaised: highIssueRaisedCount,
                TotalIssuesResolved: criticalIssueResolvedCount + mediumIssueResolvedCount + highIssueResolvedCount,
                CriticalIssueResolved: criticalIssueResolvedCount,
                MediumIssueResolved: mediumIssueResolvedCount,
                HighIssueResolved: highIssueResolvedCount,
                OutstandingIssues: pendingIssuesCount + unresolvedIssuesCount,
                PendingIssues: pendingIssuesCount,
                UnresolvedIssues: unresolvedIssuesCount
            ));
        }
    }
}
