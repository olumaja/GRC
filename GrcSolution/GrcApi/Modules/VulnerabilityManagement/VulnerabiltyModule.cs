using Arm.GrcApi.Modules.AntivirusAssessment;
using Arm.GrcApi.Modules.Compliance.CompliancePlanning;
using Arm.GrcApi.Modules.IncidentManagement;
using Arm.GrcApi.Modules.InternalControl;
using Arm.GrcApi.Modules.RiskManagement.AuditPlan;
using Arm.GrcApi.Modules.Shared;
using Arm.GrcTool.Infrastructure;
using FluentValidation;
using GrcApi.Modules.VulnerabilityManagement;
using Microsoft.AspNetCore.Mvc;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    public class VulnerabiltyModule : IModule
    {
        public WebApplication MapEndpoints(WebApplication app)
        {
            var routeGroup = app.MapGroup("Vulnerability-Management").WithTags(new string[] { "Vulnerability Management" });

            //POST /internal/vulnerability/file/upload
            routeGroup.MapPost("/internal/vulnerability/file/upload", InternalVulnerabilityFileUploadEndpoint.HandleAsync)
                 .AddEndpointFilter<ValidationFilter<InternalVulnerabilityFileUploadReq>>()
                .Accepts<InternalVulnerabilityFileUploadReq>("multipart/form-data")
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management: Internal Vulnerability Excel File Upload "
                })
               .RequireAuthorization("InfoSecOfficerOnly")
                .WithName("InternalVulnerabilityFileUploadEndpoint")
                .Produces<string>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            // GET /infosec/internal/vulnerability
            routeGroup.MapGet("/infosec/internal/vulnerability", InfosecGetInternalVulnerabilityActionOwnerEndpoint.HandleAsync)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management: Infosec get all vulnerabilities"
                })
               //infosec staff
               .RequireAuthorization("InfoSecOfficerOnly")
               .WithName("InfosecGetInternalVulnerabilityActionOwnerEndpoint")
               .Produces<PaginatedGetInternalVulnerabilityResp>(StatusCodes.Status200OK)
               .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            //GET  /infosec/vulnerability/{internalVulnerabilityFileId:guid}"
            routeGroup.MapGet("/infosec/vulnerability/{internalVulnerabilityFileId:guid}", InfosecGetInternalVulnerabilityByIdEndpoint.HandleAsync)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management: Get Internal Vulnerability to assign an action owner by id"
                })
                //infosec staff
                .RequireAuthorization("InfoSecOfficerOnly")
                .WithName("InfosecGetInternalVulnerabilityByIdEndpoint")
                .Produces<GetInternalVulnerabilityByIdDetail>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            //Patch /infosec/assign-action-owner
            routeGroup.MapPatch("/infosec/assign-action-owner", InfoSecAssignedActionOwnerEndpoint.HandleAsync)
                .AddEndpointFilter<ValidationFilter<InfoSecAssignActionOwnerReq>>()
                .Accepts<InfoSecAssignActionOwnerReq>(GRCConstants.applicationOrJson)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management:  InfoSec staff assign an action owner to the vulnerability raised"
                })
               .RequireAuthorization("InfoSecOfficerOnly")
                .WithName("InfoSecAssignedActionOwnerEndpoint")
                .Produces<string>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            // GET /internal/vulnerability/action-owner
            routeGroup.MapGet("/internal/vulnerability/action-owner", GetInternalVulnerabilityActionOwnerEndpoint.HandleAsync)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management: Action Owner get all vulnerabilties assigned to them"
                })
               .RequireAuthorization()
               .WithName("GetInternalVulnerabilityActionOwnerEndpoint")
               .Produces<PaginatedGetInternalVulnerabilityResp>(StatusCodes.Status200OK)
               .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            //GET  /internal/vulnerability/{internalVulnerabilityFileId:guid}"
            routeGroup.MapGet("/internal/vulnerability/{internalVulnerabilityFileId:guid}", GetInternalVulnerabilityByIdEndpoint.HandleAsync)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management: Get Internal Vulnerability Detail by id"
                })
                 .RequireAuthorization()
                .WithName("GetInternalVulnerabilityByIdEndpoint")
                .Produces<GetInternalVulnerabilityByIdDetail>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            // GET /view-tracker/{VunerabilityId:guid}
            routeGroup.MapGet("/view-tracker/{VunerabilityId:guid}", ViewTrackerEndpoint.HandleAsync)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulneribilty Management: Get statistics of issues"
                })
               .RequireAuthorization()
               .WithName("ViewTrackerEndpoint")
               .Produces<InternalVulnerabilityDto>(StatusCodes.Status200OK)
               .Produces<string>(StatusCodes.Status400BadRequest)
               .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);
                       
            //Patch /approve/vulnerability
            routeGroup.MapPatch("/approve/vulnerability", ApproveVulnerabilityEndpoint.HandleAsync)
                .AddEndpointFilter<ValidationFilter<ApproveVulnerabilityRequest>>() 
                .Accepts<ApproveVulnerabilityRequest>(GRCConstants.applicationOrJson)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management:  Approve Internal Vulnerability"
                })
                //infosec staff
                .RequireAuthorization("InfoSecOfficerOnly")
                .WithName("ApproveVulnerabilityEndpoint")
                .Produces<string>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            //Patch /approve/vulnerability
            routeGroup.MapPatch("/submit-approved/vulnerability", SubmitApprovedVulnerabilitiesEndpoints.HandleAsync)
                .AddEndpointFilter<ValidationFilter<SubmitVulnerabiltyModelDt0>>()
                .Accepts<SubmitVulnerabiltyModelDt0>(GRCConstants.applicationOrJson)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management: Submit all approved Internal Vulnerabilities"
                })
                .RequireAuthorization("InfoSecOfficerOnly")
                .WithName("SubmitApprovedVulnerabilitiesEndpoints")
                .Produces<string>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            //Patch /reject/vulnerability
            routeGroup.MapPatch("/reject/vulnerability", RejectVulnerabilityEndpoint.HandleAsync)
                .AddEndpointFilter<ValidationFilter<RejectVulnerabilityReq>>()
                .Accepts<RejectVulnerabilityReq>(GRCConstants.applicationOrJson)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management:  Reject Internal Vulnerability"
                })
                //infosec staff
                .RequireAuthorization("InfoSecOfficerOnly")
                .WithName("RejectVulnerabilityEndpoint")
                .Produces<string>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            routeGroup.MapPatch("/action-owner-evidence", ActionOwnerEvidenceResponseEndpoint.HandleAsync)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management: Action owner response"
                })
                .RequireAuthorization()
                .WithName("ActionOwnerEvidenceResponseEndpoint")
                .Produces<string>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);
                      
            //Patch /update-action-owner-response
            routeGroup.MapPatch("/update-action-owner-response", UpdateActionOwnerResponseEndpoint.HandleAsync)
                .AddEndpointFilter<ValidationFilter<UpdateActionownerResponseDto>>()
                .Accepts<UpdateActionownerResponseDto>(GRCConstants.multipartOrFormData)
               .WithOpenApi(operation => new(operation)
               {
                   Summary = "Vulnerability Management: Update action owner response"
               })
                .RequireAuthorization()
                .WithName("UpdateActionOwnerResponseEndpoint")
                .Produces<string>(StatusCodes.Status200OK)
                .Produces<List<string>>(StatusCodes.Status400BadRequest)
                .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            // GET infosec/View/action-owner-feedback
            routeGroup.MapGet("/infosec/View/action-owner-feedback", InfosecViewActionOwnerFeedbackEndpoint.HandleAsync)
                .WithOpenApi(operation => new(operation)
                {
                    Summary = "Vulnerability Management: Infosec get all action owner feedback for the approval or rejection"
                })
               .RequireAuthorization("InfoSecOfficerOnly")
               .WithName("InfosecViewActionOwnerFeedbackEndpoint")
               .Produces<PaginatedGetInternalVulnerabilityResp>(StatusCodes.Status200OK)
               .Produces<ProblemDetails>(StatusCodes.Status500InternalServerError);

            return app;
        }

        public IServiceCollection RegisterModule(IServiceCollection builder, ConfigurationManager configuration)
        {
            builder.AddScoped<IRepository<VulnerabilityModel>, Repository<VulnerabilityModel>>();
            builder.AddScoped<IRepository<InternalVulnerability>, Repository<InternalVulnerability>>();

            builder.AddScoped<IValidator<UpdateActionownerResponseDto>, UpdateActionownerResponseDtoValidator>();
            builder.AddScoped<IValidator<InternalVulnerabilityFileUploadReq>, InternalVulnerabilityFileUploadReqValidator>();
            builder.AddScoped<IValidator<InfoSecAssignActionOwnerReq>, InfoSecAssignActionOwnerReqValidator>();
            builder.AddScoped<IValidator<ActionOwnerReClassifyVulnerabilityReq>, ActionOwnerReClassifyVulnerabilityReqValidator>();
            builder.AddScoped<IValidator<RejectVulnerabilityReq>, RejectVulnerabilityReqValidator>();
            builder.AddScoped<IValidator<ApproveVulnerabilityReq>, ApproveVulnerabilityReqValidator>();
            builder.AddScoped<IValidator<BulkApprovedDto>, BulkApprovedDtoValidator>();
            builder.AddScoped<IValidator<ApproveVulnerabilityRequest>, ApproveVulnerabilityRequestValidator>();
            builder.AddScoped<IValidator<SubmitVulnerabiltyModelDt0>, SubmitVulnerabiltyModelDt0alidator>();

            return builder;
        }
    }
}
