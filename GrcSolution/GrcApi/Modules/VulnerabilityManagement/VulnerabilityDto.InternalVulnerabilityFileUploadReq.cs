using Arm.GrcApi.Modules.Shared;
using FluentValidation;
using GrcApi.Modules.Shared.Helpers;
using System.Reflection;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    public record InternalVulnerabilityFileUploadReq(string TitleOfAssessment, IFormFile file)
    { 
        /// <summary>
        /// Binds the values from the multipart form in the http request to a InternalVulnerabilityFileUploadReq object and returns object
        /// </summary>     
        public static ValueTask<InternalVulnerabilityFileUploadReq> BindAsync(HttpContext httpContext, ParameterInfo parameter)
        {
            return ValueTask.FromResult(new InternalVulnerabilityFileUploadReq(
                   httpContext.Request.Form["TitleOfAssessment"],                   
                   httpContext.Request.Form.Files.GetFile("file")
                ));
        }
        
    }
    public class InternalVulnerabilityFileUploadReqValidator : AbstractValidator<InternalVulnerabilityFileUploadReq>
    {
        public InternalVulnerabilityFileUploadReqValidator()
        {
            RuleFor(e => e.TitleOfAssessment).NotEmpty().Must(CharacterValidation.IsInvalidCharacter).WithMessage(GRCToolsMessages.InvalidCharacters);
            RuleFor(model => model.file).NotEmpty();

        }
    }
}
