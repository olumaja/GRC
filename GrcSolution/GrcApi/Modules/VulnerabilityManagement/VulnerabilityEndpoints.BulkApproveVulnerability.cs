using Arm.GrcApi.Modules.VulnerabilityManagement;
using Arm.GrcTool.Infrastructure;
using GrcApi.Modules.Shared.Helpers;
using Microsoft.EntityFrameworkCore;

namespace GrcApi.Modules.VulnerabilityManagement
{
    public class BulkApproveVulnerabilityEndpoint
    {
        public static async Task<IResult> HandleAsync(
            BulkApprovedDto payload, IRepository<VulnerabilityModel> vulnerabilityRepo, ICurrentUserService currentUserService
        )
        {
            var vulnerability = vulnerabilityRepo.GetContextByConditon(v => v.Id == payload.VulnerabilityModelId)
                                                .Include(v => v.InternalVulnerabilities)
                                                .FirstOrDefault();

            if (vulnerability == null)
                return TypedResults.NotFound("Record not found");

            vulnerability.SetModifiedBy(vulnerability.ModifiedBy);
            vulnerability.SetModifiedOnUtc(DateTime.Now);

            var internalVulnerabilities = vulnerability.InternalVulnerabilities;

            foreach (var item in payload.InternalVulnerabilities)
            {
                int index = internalVulnerabilities.FindIndex(f => f.Id == item.InternalVulnerabilityId);

                if (index != -1)
                {
                    internalVulnerabilities[index].UpdateActionStatus(VulnerabilityStatus.Approve, item.ReasonForRejection);
                }
                    
            }

            return TypedResults.Ok("Approval successful");
        }
    }
}
