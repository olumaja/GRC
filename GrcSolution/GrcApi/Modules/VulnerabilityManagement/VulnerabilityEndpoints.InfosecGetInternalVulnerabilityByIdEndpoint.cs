using Arm.GrcApi.Modules.VulnerabilityManagement;
using Arm.GrcTool.Infrastructure;
using GrcApi.Modules.Shared.Helpers;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    /*
        * Original Author: Sodiq Quadre
        * Date Created: 05/31/2025
        * Development Group: GRCTools
        * Infosec Get internal vulnerability by Id Endpoint.
        */
    public class InfosecGetInternalVulnerabilityByIdEndpoint
    {
        /// <summary>
        /// Get internal vulnerability by Id Endpoint.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="repository"></param>
        /// <param name="VulDetail"></param>
        /// <param name="currentUserService"></param>
        /// <returns></returns>
        public static async Task<IResult> HandleAsync(Guid internalVulnerabilityFileId, IRepository<VulnerabilityModel> repository, IRepository<InternalVulnerability> VulDetail, ICurrentUserService currentUserService)
        {
            try
            {
                var loggedVuln = repository.GetContextByConditon(r => r.Id == internalVulnerabilityFileId).FirstOrDefault();

                if (loggedVuln is null)
                    return TypedResults.NotFound("Record not found");
                var getVuln = VulDetail.GetContextByConditon(a => a.VulnerabilityModelId == loggedVuln.Id);
                var getVulnResp = getVuln.Select(p => new InfosecGetInternalVulnerabilityById
                {
                    InternalVulnerabilityId = p.Id,
                    IP = p.IP,
                    DNS = p.DNS,
                    NETBIOS = p.NETBIOS,
                    Vulnerability = p.Vulnerability,
                    Rating = p.Rating,
                    Port = p.Port,
                    Proptocol = p.Proptocol,
                    Threat = p.Threat,
                    Impact = p.Impact,
                    Solution = p.Solution,
                    Classification = p.Classification
                }).ToList();

                return TypedResults.Ok(new InfosecGetInternalVulnerabilityByIdDetail(
                    InternalVulnerabilityFileId: internalVulnerabilityFileId,
                    DocumentTitle: loggedVuln.TitleOfAssessment,
                    InternalVulnerabilities: getVulnResp

                ));
            }
            catch (Exception ex)
            {

                return TypedResults.Problem("Unable to get the vulnerability detail");
            }
        }
    }
}
