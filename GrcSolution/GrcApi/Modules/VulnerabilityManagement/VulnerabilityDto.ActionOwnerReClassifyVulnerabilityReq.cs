using Arm.GrcApi.Modules.InternalControl;
using Arm.GrcApi.Modules.Shared;
using FluentValidation;
using GrcApi.Modules.Shared.Helpers;
using System.Reflection;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    public record ActionOwnerReClassifyVulnerabilityReq(
    Guid InternalVulnerabilityId,
    string ReClassification
 
    );

    public class ActionOwnerReClassifyVulnerabilityReqValidator : AbstractValidator<ActionOwnerReClassifyVulnerabilityReq>
    {
        public ActionOwnerReClassifyVulnerabilityReqValidator()
        {
            RuleFor(x => x.InternalVulnerabilityId).NotEmpty();
            RuleFor(x => x.ReClassification).NotEmpty().Must(CharacterValidation.IsInvalidCharacter).WithMessage(GRCToolsMessages.InvalidCharacters);
           
        }
    }
       
    public record UpdateActionownerResponseDto(Guid InternalVulnerabilityId, string? Classification, string? Status, IFormFile Attachment )
    {
        /// <summary>
        /// Binds the values from the multipart form in the http request to a UpdateActionownerResponseDto object and returns object
        /// </summary>     
        public static ValueTask<UpdateActionownerResponseDto> BindAsync(HttpContext httpContext, ParameterInfo parameter)
        {
            var internalVulnerabilityId = Guid.Parse(httpContext.Request.Form["InternalVulnerabilityId"]);

            return ValueTask.FromResult(new UpdateActionownerResponseDto(
                   internalVulnerabilityId,
                   httpContext.Request.Form["Classification"],
                   httpContext.Request.Form["Status"],
                   httpContext.Request.Form.Files.GetFile("Attachment")
            ));
        }
    }

    public class UpdateActionownerResponseDtoValidator : AbstractValidator<UpdateActionownerResponseDto>
    {
        public UpdateActionownerResponseDtoValidator()
        {
            RuleFor(r => r.InternalVulnerabilityId).NotEmpty();
            RuleFor(r => r.Classification).NotEmpty().Must(CharacterValidation.IsInvalidCharacter).WithMessage(GRCToolsMessages.InvalidCharacters);
            RuleFor(r => r.Status).NotEmpty().Must(CharacterValidation.IsInvalidCharacter).WithMessage(GRCToolsMessages.InvalidCharacters);
        }
    }



    public record UpdateActionownerResponse(string Classification, VulnerabilityStatus Status);
}
