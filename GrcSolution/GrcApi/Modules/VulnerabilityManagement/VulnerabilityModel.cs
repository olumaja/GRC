using Arm.GrcApi.Modules.IncidentManagement;
using Arm.GrcApi.Modules.Shared;
using GrcApi.Modules.VulnerabilityManagement;
using static Arm.GrcTool.Domain.RiskEvent.RiskEvent;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    public class VulnerabilityModel : AuditEntity2
    {
        public Guid Id { get; init; } = Guid.NewGuid();
        public string AssessmentType { get; private set; } 
        public string TitleOfAssessment { get; private set; }
        public string? ActionOwner { get; private set; }
        public string? ActionOwnerEmail { get; private set; }
        public string? ActionOwnerUnit { get; private set; }
        public DateTime? ProposeEndDate { get; private set; }
        public string? ReasonForRejection { get; private set; }
        public string? ApprovedBy { get; private set; }
        public DateTime? DateApproved { get; private set; }
        public string? RequesterEmailAddress { get; private set; }
        public VulnerabilityStatus VulnerabilityStatus { get; private set; } = VulnerabilityStatus.Pending;
        public VulnerabilityStatus InfosecFeedbackStatus { get; private set; } = VulnerabilityStatus.Pending;
        public List<InternalVulnerability> InternalVulnerabilities { get; private set; }

        public static VulnerabilityModel Create(string assessmentType, string titleOfAssessment, string requesterEmailAddress)
        {
            return new VulnerabilityModel
            {
                AssessmentType = assessmentType,
                TitleOfAssessment = titleOfAssessment,
                RequesterEmailAddress = requesterEmailAddress
            };
        }

        public void InfoSecAssignActionOwner(string actionOwner, string actionOwnerEmail, string actionOwnerUnit, DateTime proposeEndDate)
        {
            ActionOwner = actionOwner;
            ActionOwnerEmail = actionOwnerEmail;
            ActionOwnerUnit = actionOwnerUnit;
            ProposeEndDate = proposeEndDate;
        }

        public void StatusAfterActionOwnerResponse()
        {
            VulnerabilityStatus = VulnerabilityStatus.Awaiting_Approval;
        }
        public void SetInfosecFeedbackStatus(VulnerabilityStatus newStatus, string reason)
        {
            InfosecFeedbackStatus = newStatus;
            VulnerabilityStatus = newStatus;
            ReasonForRejection = reason;
        }
        public void UpdateApproval(string name)
        {
            ApprovedBy = name;
            DateApproved = DateTime.Now;
        }
    }
}
