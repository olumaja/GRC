using Arm.GrcApi.Modules.Shared;
using Arm.GrcApi.Modules.VulnerabilityManagement;
using FluentValidation;
using GrcApi.Modules.Shared.Helpers;

namespace GrcApi.Modules.VulnerabilityManagement
{
    public record InternalVulnerabilityDto(
        int TotalIssuesRaised,
        int CriticalIssueRaised,
        int MediumIssueRaised,
        int HighIssueRaised,
        int TotalIssuesResolved,
        int CriticalIssueResolved,
        int MediumIssueResolved,
        int HighIssueResolved,
        int OutstandingIssues,
        int PendingIssues,
        int UnresolvedIssues
    );

    public record EvidenceDto(
        Guid VulnerabilityModelId, Guid InternalVulnerabilityId, 
        string? Classification, VulnerabilityStatus Status, IFormFile? Attachment
    );

    public record BulkApprovedDto(Guid VulnerabilityModelId, List<ApproveInternalVulnerability> InternalVulnerabilities);

    public class BulkApprovedDtoValidator : AbstractValidator<BulkApprovedDto>
    {
        public BulkApprovedDtoValidator() { 
            RuleFor(v => v.VulnerabilityModelId).NotEmpty();
            RuleFor(v => v.InternalVulnerabilities).NotEmpty();
            RuleForEach(v => v.InternalVulnerabilities).SetValidator(new ApproveInternalVulnerabilityValidator());
        }
    }

    public record ApproveInternalVulnerability(Guid InternalVulnerabilityId, string Status, string Action, string ReasonForRejection);

    public class ApproveInternalVulnerabilityValidator : AbstractValidator<ApproveInternalVulnerability>
    {
        public ApproveInternalVulnerabilityValidator()
        {
            RuleFor(i => i.InternalVulnerabilityId).NotEmpty();
            RuleFor(i =>i.Status).NotEmpty();
            RuleFor(i =>i.Action)
                .NotEmpty().When(i => !string.IsNullOrWhiteSpace(i.Status) && !i.Status.Equals("unresolved", StringComparison.CurrentCultureIgnoreCase))
                .Must(CharacterValidation.IsInvalidCharacter).WithMessage(GRCToolsMessages.InvalidCharacters);
            RuleFor(i => i.ReasonForRejection)
                .NotEmpty().When(i => !string.IsNullOrWhiteSpace(i.Action) && i.Action.Equals("rejected", StringComparison.CurrentCultureIgnoreCase))
                .Must(CharacterValidation.IsInvalidCharacter).WithMessage(GRCToolsMessages.InvalidCharacters);
        }
    }
}
