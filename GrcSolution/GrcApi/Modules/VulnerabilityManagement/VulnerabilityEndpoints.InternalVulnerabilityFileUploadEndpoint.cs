using Arm.GrcApi.Modules.Compliance.CompliancePlanning;
using Arm.GrcApi.Modules.IncidentManagement;
using Arm.GrcTool.Infrastructure;
using GrcApi.Modules.Shared.Helpers;
using GrcApi.Modules.VulnerabilityManagement;
using OfficeOpenXml;

namespace Arm.GrcApi.Modules.VulnerabilityManagement
{
    /*
    * Original Author: Sodiq Quadre
    * Date Created: 05/29/2025
    * Development Group: GRCTools
    * Vulnerability Management: Internal Vulnerability File Upload Endpoint    
    */
    public class InternalVulnerabilityFileUploadEndpoint
    {
        /// <summary>
        /// Excel Upload For the New vulnerability
        /// </summary>
        /// <param name="req"></param>
        /// <param name="repo"></param>
        /// <param name="vuln"></param>
        /// <param name="cancellationToken"></param>
        /// <param name="config"></param>
        /// <param name="currentUserService"></param>
        /// <returns></returns>
        public static async Task<IResult> HandleAsync(InternalVulnerabilityFileUploadReq req, IRepository<VulnerabilityModel> repo, 
            IRepository<InternalVulnerability> vuln, CancellationToken cancellationToken, IConfiguration config, ICurrentUserService currentUserService
        )
        {
            try  
            {
                DateTime date = DateTime.Now;
                var checkIfRecordExist = repo.GetContextByConditon(c => c.TitleOfAssessment == req.TitleOfAssessment).FirstOrDefault();

                if (checkIfRecordExist != null && checkIfRecordExist.CreatedOnUtc.Year == date.Year && checkIfRecordExist.CreatedOnUtc.Month == date.Month) 
                {
                    return TypedResults.BadRequest($"Internal Vulnerability file upload has been done for this month for the assessment title '{req.TitleOfAssessment}'");
                }

                var logRequest = VulnerabilityModel.Create("Internal vulnerability Assessment", req.TitleOfAssessment, currentUserService.CurrentUserEmail);

                logRequest.SetCreatedBy(currentUserService.CurrentUserFullName);
                logRequest.SetModifiedBy(currentUserService.CurrentUserFullName);
                logRequest.SetModifiedOnUtc(DateTime.Now);
                repo.Add(logRequest);

               // VulnerabilityModelReq rules = new VulnerabilityModelReq();
                List<InternalVulnerability> vulnReq = new List<InternalVulnerability>();

                if (req.file == null || req.file.Length == 0) { return TypedResults.BadRequest("Invalid file selected"); }

                string fileExtension = Path.GetExtension(req.file.FileName);

                if (fileExtension == ".xlsx" || fileExtension == ".xls")
                {
                    var VulnList = new List<VulnerabilityModelReq>();
                    using (var stream = new MemoryStream())
                    {
                        await req.file.CopyToAsync(stream, cancellationToken);
                        ExcelPackage.License.SetNonCommercialOrganization("arm");
                        using (ExcelPackage excelPackage = new ExcelPackage(stream))
                        {
                            var workSheet = excelPackage.Workbook.Worksheets[0];
                            int totalRows = workSheet.Dimension.Rows;

                            for (int i = 2; i <= totalRows; i++)
                            {                               

                                VulnList.Add(new VulnerabilityModelReq
                                {
                                    IP = workSheet.Cells[i, 1].Value?.ToString() ?? null,
                                    DNS = workSheet.Cells[i, 2].Value?.ToString() ?? null,
                                    NETBIOS = workSheet.Cells[i, 3].Value?.ToString() ?? null,
                                    Vulnerability = workSheet.Cells[i, 4].Value?.ToString() ?? null,
                                    Rating = workSheet.Cells[i, 5].Value?.ToString() ?? null,
                                    Port = workSheet.Cells[i, 6].Value?.ToString() ?? null,
                                    Protocol = workSheet.Cells[i, 7].Value?.ToString() ?? null,
                                    Threat = workSheet.Cells[i, 8].Value?.ToString() ?? null,
                                    Impact = workSheet.Cells[i, 9].Value?.ToString() ?? null,
                                    Solution = workSheet.Cells[i, 10].Value?.ToString() ?? null,
                                    Classification = workSheet.Cells[i, 11].Value?.ToString() ?? null
                                });
                            }
                        }
                    }
                    
                    foreach (var item in VulnList)
                    {

                        vulnReq.Add(InternalVulnerability.ExcelUploadCreate(logRequest.Id, item));
                    }
                    await vuln.AddRangeAsync(vulnReq);
                    await vuln.SaveChangesAsync();

                    var response = new InternalVulnerabiltyFileUploadResp(InternalVulnerabilityFileId: logRequest.Id, Message: $"{VulnList.Count} Records uploaded successfully");
                    return TypedResults.Created($"iv/{response}", response);
                }

                return TypedResults.BadRequest("You can only upload excel file");

            }
            catch (Exception ex)
            {
                return TypedResults.Problem("Exception: Unable to save the request");
            }

        }

    }
}
